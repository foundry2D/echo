<!-- This file can be parsed by haxe.rtti.XmlParser -->
<haxe>
	<abstract path="Any" params="" file="/home/travis/haxe/std/Any.hx">
		<from><icast field="__cast"><c path="__cast.T"/></icast></from>
		<this><d/></this>
		<to><icast field="__promote"><c path="__promote.T"/></icast></to>
		<haxe_doc>`Any` is a type that is compatible with any other in both ways.

	This means that a value of any type can be assigned to `Any`, and
	vice-versa, a value of `Any` type can be assigned to any other type.

	It's a more type-safe alternative to `Dynamic`, because it doesn't
	support field access or operators and it's bound to monomorphs. So,
	to work with the actual value, it needs to be explicitly promoted
	to another type.</haxe_doc>
		<impl><class path="_Any.Any_Impl_" params="" file="/home/travis/haxe/std/Any.hx" private="1" module="Any"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<class path="Array" params="T" file="/home/travis/haxe/std/js/_std/Array.hx" extern="1">
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The length of `this` Array.</haxe_doc>
		</length>
		<concat public="1" set="method">
			<f a="a">
				<c path="Array"><c path="Array.T"/></c>
				<c path="Array"><c path="Array.T"/></c>
			</f>
			<haxe_doc>Returns a new Array by appending the elements of `a` to the elements of
		`this` Array.

		This operation does not modify `this` Array.

		If `a` is the empty Array `[]`, a copy of `this` Array is returned.

		The length of the returned Array is equal to the sum of `this.length`
		and `a.length`.

		If `a` is `null`, the result is unspecified.</haxe_doc>
		</concat>
		<join public="1" set="method">
			<f a="sep">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a string representation of `this` Array, with `sep` separating
		each element.

		The result of this operation is equal to `Std.string(this[0]) + sep +
		Std.string(this[1]) + sep + ... + sep + Std.string(this[this.length-1])`

		If `this` is the empty Array `[]`, the result is the empty String `""`.
		If `this` has exactly one element, the result is equal to a call to
		`Std.string(this[0])`.

		If `sep` is null, the result is unspecified.</haxe_doc>
		</join>
		<push public="1" set="method">
			<f a="x">
				<c path="Array.T"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Adds the element `x` at the end of `this` Array and returns the new
		length of `this` Array.

		This operation modifies `this` Array in place.

		`this.length` increases by 1.</haxe_doc>
		</push>
		<shift public="1" set="method">
			<f a=""><x path="Null"><c path="Array.T"/></x></f>
			<haxe_doc>Removes the first element of `this` Array and returns it.

		This operation modifies `this` Array in place.

		If `this` has at least one element, `this`.length and the index of each
		remaining element is decreased by 1.

		If `this` is the empty Array `[]`, `null` is returned and the length
		remains 0.</haxe_doc>
		</shift>
		<splice public="1" set="method">
			<f a="pos:len">
				<x path="Int"/>
				<x path="Int"/>
				<c path="Array"><c path="Array.T"/></c>
			</f>
			<haxe_doc><![CDATA[Removes `len` elements from `this` Array, starting at and including
		`pos`, an returns them.

		This operation modifies `this` Array in place.

		If `len` is < 0 or `pos` exceeds `this`.length, an empty Array [] is
		returned and `this` Array is unchanged.

		If `pos` is negative, its value is calculated from the end	of `this`
		Array by `this.length + pos`. If this yields a negative value, 0 is
		used instead.

		If the sum of the resulting values for `len` and `pos` exceed
		`this.length`, this operation will affect the elements from `pos` to the
		end of `this` Array.

		The length of the returned Array is equal to the new length of `this`
		Array subtracted from the original length of `this` Array. In other
		words, each element of the original `this` Array either remains in
		`this` Array or becomes an element of the returned Array.]]></haxe_doc>
		</splice>
		<indexOf public="1" set="method">
			<f a="x:?fromIndex">
				<c path="Array.T"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns position of the first occurrence of `x` in `this` Array, searching front to back.

		If `x` is found by checking standard equality, the function returns its index.

		If `x` is not found, the function returns -1.

		If `fromIndex` is specified, it will be used as the starting index to search from,
		otherwise search starts with zero index. If it is negative, it will be taken as the
		offset from the end of `this` Array to compute the starting index. If given or computed
		starting index is less than 0, the whole array will be searched, if it is greater than
		or equal to the length of `this` Array, the function returns -1.</haxe_doc>
		</indexOf>
		<iterator public="1" get="inline" set="null" line="77">
			<f a=""><t path="Iterator"><c path="Array.T"/></t></f>
			<meta><m n=":runtime"/></meta>
			<haxe_doc>Returns an iterator of the Array values.</haxe_doc>
		</iterator>
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new Array.</haxe_doc>
		</new>
		<haxe_doc>An Array is a storage for values. You can access it using indexes or
	with its API.

	@see https://haxe.org/manual/std-Array.html
	@see https://haxe.org/manual/lf-array-comprehension.html</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<abstract path="Class" params="T" file="/home/travis/haxe/std/Class.hx">
		<this><x path="Class"><c path="Class.T"/></x></this>
		<haxe_doc>An abstract type that represents a Class.

	See `Type` for the Haxe Reflection API.

	@see https://haxe.org/manual/types-class-instance.html</haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<class path="Date" params="" file="/home/travis/haxe/std/js/_std/Date.hx" extern="1">
		<now public="1" get="inline" set="null" line="46" static="1">
			<f a=""><c path="Date"/></f>
			<haxe_doc>Returns a Date representing the current local time.</haxe_doc>
		</now>
		<fromTime public="1" get="inline" set="null" line="50" static="1">
			<f a="t">
				<x path="Float"/>
				<c path="Date"/>
			</f>
			<haxe_doc>Creates a Date from the timestamp (in milliseconds) `t`.</haxe_doc>
		</fromTime>
		<fromString public="1" get="inline" set="null" line="54" static="1">
			<f a="s">
				<c path="String"/>
				<c path="Date"/>
			</f>
			<haxe_doc>Creates a Date from the formatted string `s`. The following formats are
		accepted by the function:

		- `"YYYY-MM-DD hh:mm:ss"`
		- `"YYYY-MM-DD"`
		- `"hh:mm:ss"`

		The first two formats expressed a date in local time. The third is a time
		relative to the UTC epoch.</haxe_doc>
		</fromString>
		<getTime public="1" set="method">
			<f a=""><x path="Float"/></f>
			<haxe_doc>Returns the timestamp (in milliseconds) of `this` date.
		On cpp and neko, this function only has a second resolution, so the
		result will always be a multiple of `1000.0`, e.g. `1454698271000.0`.
		To obtain the current timestamp with better precision on cpp and neko,
		see the `Sys.time` API.

		For measuring time differences with millisecond accuracy on
		all platforms, see `haxe.Timer.stamp`.</haxe_doc>
		</getTime>
		<getHours public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the hours of `this` Date (0-23 range) in the local timezone.</haxe_doc>
		</getHours>
		<getMinutes public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the minutes of `this` Date (0-59 range) in the local timezone.</haxe_doc>
		</getMinutes>
		<getSeconds public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the seconds of `this` Date (0-59 range) in the local timezone.</haxe_doc>
		</getSeconds>
		<getFullYear public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the full year of `this` Date (4 digits) in the local timezone.</haxe_doc>
		</getFullYear>
		<getMonth public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the month of `this` Date (0-11 range) in the local timezone.
		Note that the month number is zero-based.</haxe_doc>
		</getMonth>
		<getDate public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the day of `this` Date (1-31 range) in the local timezone.</haxe_doc>
		</getDate>
		<getDay public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the day of the week of `this` Date (0-6 range, where `0` is Sunday)
		in the local timezone.</haxe_doc>
		</getDay>
		<getUTCHours public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the hours of `this` Date (0-23 range) in UTC.</haxe_doc>
		</getUTCHours>
		<getUTCMinutes public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the minutes of `this` Date (0-59 range) in UTC.</haxe_doc>
		</getUTCMinutes>
		<getUTCSeconds public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the seconds of `this` Date (0-59 range) in UTC.</haxe_doc>
		</getUTCSeconds>
		<getUTCFullYear public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the full year of `this` Date (4 digits) in UTC.</haxe_doc>
		</getUTCFullYear>
		<getUTCMonth public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the month of `this` Date (0-11 range) in UTC.
		Note that the month number is zero-based.</haxe_doc>
		</getUTCMonth>
		<getUTCDate public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the day of `this` Date (1-31 range) in UTC.</haxe_doc>
		</getUTCDate>
		<getUTCDay public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the day of the week of `this` Date (0-6 range, where `0` is Sunday)
		in UTC.</haxe_doc>
		</getUTCDay>
		<getTimezoneOffset public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the time zone difference of `this` Date in the current locale
		to UTC, in minutes.

		Assuming the function is executed on a machine in a UTC+2 timezone,
		`Date.now().getTimezoneOffset()` will return `-120`.</haxe_doc>
		</getTimezoneOffset>
		<toString public="1" get="inline" set="null" line="42">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a string representation of `this` Date in the local timezone
		using the standard format `YYYY-MM-DD HH:MM:SS`. See `DateTools.format` for
		other formatting rules.</haxe_doc>
		</toString>
		<new public="1" set="method">
			<f a="year:month:day:hour:min:sec">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a new date object from the given arguments.

		The behaviour of a Date instance is only consistent across platforms if
		the the arguments describe a valid date.

		- month: 0 to 11 (note that this is zero-based)
		- day: 1 to 31
		- hour: 0 to 23
		- min: 0 to 59
		- sec: 0 to 59</haxe_doc>
		</new>
		<haxe_doc>The Date class provides a basic structure for date and time related
	information. Date instances can be created by

	- `new Date()` for a specific date,
	- `Date.now()` to obtain information about the current time,
	- `Date.fromTime()` with a given timestamp or
	- `Date.fromString()` by parsing from a String.

	There are some extra functions available in the `DateTools` class.

	In the context of Haxe dates, a timestamp is defined as the number of
	milliseconds elapsed since 1st January 1970 UTC.

	## Supported range

	Due to platform limitations, only dates in the range 1970 through 2038 are
	supported consistently. Some targets may support dates outside this range,
	depending on the OS at runtime. The `Date.fromTime` method will not work with
	timestamps outside the range on any target.</haxe_doc>
		<meta><m n=":coreApi"/></meta>
	</class>
	<abstract path="Enum" params="T" file="/home/travis/haxe/std/Enum.hx">
		<this><x path="Enum"><c path="Enum.T"/></x></this>
		<haxe_doc>An abstract type that represents an Enum type.

	The corresponding enum instance type is `EnumValue`.

	See `Type` for the Haxe Reflection API.

	@see https://haxe.org/manual/types-enum-instance.html</haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<abstract path="EnumValue" params="" file="/home/travis/haxe/std/EnumValue.hx">
		<this><x path="EnumValue"/></this>
		<haxe_doc>An abstract type that represents any enum value.
	See `Type` for the Haxe Reflection API.

	@see https://haxe.org/manual/types-enum-instance.html</haxe_doc>
		<meta><m n=":coreType"/></meta>
		<impl><class path="_EnumValue.EnumValue_Impl_" params="" file="/home/travis/haxe/std/EnumValue.hx" private="1" module="EnumValue"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<class path="Lambda" params="" file="/home/travis/haxe/std/Lambda.hx">
		<find public="1" params="T" set="method" line="241" static="1">
			<f a="it:f">
				<t path="Iterable"><c path="find.T"/></t>
				<f a="item">
					<c path="find.T"/>
					<x path="Bool"/>
				</f>
				<x path="Null"><c path="find.T"/></x>
			</f>
			<haxe_doc>Returns the first element of `it` for which `f` is true.

		This function returns as soon as an element is found for which a call to
		`f` returns true.

		If no such element is found, the result is null.

		If `f` is null, the result is unspecified.</haxe_doc>
		</find>
		<haxe_doc>The `Lambda` class is a collection of methods to support functional
	programming. It is ideally used with `using Lambda` and then acts as an
	extension to Iterable types.

	On static platforms, working with the Iterable structure might be slower
	than performing the operations directly on known types, such as Array and
	List.

	If the first argument to any of the methods is null, the result is
	unspecified.

	@see https://haxe.org/manual/std-Lambda.html</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
		</meta>
	</class>
	<typedef path="Map" params="K:V" file="/home/travis/haxe/std/Map.hx"><x path="haxe.ds.Map">
	<c path="Map.K"/>
	<c path="Map.V"/>
</x></typedef>
	<typedef path="IMap" params="K:V" file="/home/travis/haxe/std/Map.hx" module="Map">
		<c path="haxe.IMap">
			<c path="IMap.K"/>
			<c path="IMap.V"/>
		</c>
		<meta>
			<m n=":dox"><e>hide</e></m>
			<m n=":deprecated"/>
		</meta>
	</typedef>
	<class path="Math" params="" file="/home/travis/haxe/std/js/_std/Math.hx" extern="1">
		<PI public="1" set="null" static="1"><x path="Float"/></PI>
		<abs public="1" set="method" static="1"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></abs>
		<acos public="1" set="method" static="1"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></acos>
		<atan2 public="1" set="method" static="1"><f a="y:x">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></atan2>
		<cos public="1" set="method" static="1"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></cos>
		<floor public="1" set="method" static="1"><f a="v">
	<x path="Float"/>
	<x path="Int"/>
</f></floor>
		<max public="1" set="method" static="1"><f a="a:b">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></max>
		<min public="1" set="method" static="1"><f a="a:b">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></min>
		<sin public="1" set="method" static="1"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></sin>
		<sqrt public="1" set="method" static="1"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></sqrt>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
			<m n=":keepInit"/>
		</meta>
	</class>
	<class path="Reflect" params="" file="/home/travis/haxe/std/js/_std/Reflect.hx">
		<field public="1" set="method" line="29" static="1">
			<f a="o:field">
				<d/>
				<c path="String"/>
				<d/>
			</f>
			<haxe_doc>Returns the value of the field named `field` on object `o`.

		If `o` is not an object or has no field named `field`, the result is
		null.

		If the field is defined as a property, its accessors are ignored. Refer
		to `Reflect.getProperty` for a function supporting property accessors.

		If `field` is null, the result is unspecified.

		(As3) If used on a property field, the getter will be invoked. It is
		not possible to obtain the value directly.</haxe_doc>
		</field>
		<fields public="1" set="method" line="60" static="1">
			<f a="o">
				<d/>
				<c path="Array"><c path="String"/></c>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Returns the fields of structure `o`.

		This method is only guaranteed to work on anonymous structures. Refer to
		`Type.getInstanceFields` for a function supporting class instances.

		If `o` is null, the result is unspecified.</haxe_doc>
		</fields>
		<copy public="1" params="T" set="method" line="110" static="1">
			<f a="o">
				<x path="Null"><c path="copy.T"/></x>
				<x path="Null"><c path="copy.T"/></x>
			</f>
			<haxe_doc>Copies the fields of structure `o`.

		This is only guaranteed to work on anonymous structures.

		If `o` is null, the result is `null`.</haxe_doc>
		</copy>
		<haxe_doc>The Reflect API is a way to manipulate values dynamically through an
	abstract interface in an untyped manner. Use with care.

	@see https://haxe.org/manual/std-reflection.html</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<class path="js.Syntax" params="" file="/home/travis/haxe/std/js/Syntax.hx" extern="1">
		<code public="1" set="method" static="1">
			<f a="code:args">
				<c path="String"/>
				<x path="haxe.extern.Rest"><d/></x>
				<d/>
			</f>
			<haxe_doc>Inject `code` directly into generated source.

		`code` must be a string constant.

		Additional `args` are supported to provide code interpolation, for example:
		```haxe
		Syntax.code("console.log({0}, {1})", "hi", 42);
		```
		will generate
		```haxe
		console.log("hi", 42);
		```</haxe_doc>
		</code>
		<construct public="1" params="T" set="method" static="1">
			<f a="cl:args">
				<x path="Class"><c path="construct.T"/></x>
				<x path="haxe.extern.Rest"><d/></x>
				<c path="construct.T"/>
			</f>
			<haxe_doc>Generate `new cl(...args)` expression.</haxe_doc>
			<overloads><construct public="1" set="method">
	<f a="cl:args">
		<c path="String"/>
		<x path="haxe.extern.Rest"><d/></x>
		<d/>
	</f>
	<haxe_doc>Generate `new cl(...args)` expression.</haxe_doc>
</construct></overloads>
		</construct>
		<instanceof public="1" set="method" static="1">
			<f a="v:cl">
				<d/>
				<x path="Class"><d/></x>
				<x path="Bool"/>
			</f>
			<haxe_doc>Generate `v instanceof cl` expression.</haxe_doc>
		</instanceof>
		<typeof public="1" set="method" static="1">
			<f a="o">
				<d/>
				<c path="String"/>
			</f>
			<haxe_doc>Generate `typeof o` expression.</haxe_doc>
		</typeof>
		<strictEq public="1" set="method" static="1">
			<f a="a:b">
				<d/>
				<d/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Genearte `a === b` expression.</haxe_doc>
		</strictEq>
		<strictNeq public="1" set="method" static="1">
			<f a="a:b">
				<d/>
				<d/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Genearte `a !== b` expression.</haxe_doc>
		</strictNeq>
		<delete public="1" set="method" static="1">
			<f a="o:f">
				<d/>
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Generate `delete o[f]` expression.</haxe_doc>
			<overloads><delete public="1" set="method">
	<f a="o:f">
		<d/>
		<x path="Int"/>
		<x path="Bool"/>
	</f>
	<haxe_doc>Generate `delete o[f]` expression.</haxe_doc>
</delete></overloads>
		</delete>
		<field public="1" set="method" static="1">
			<f a="o:f">
				<d/>
				<c path="String"/>
				<d/>
			</f>
			<haxe_doc>Generate `o.f` expression, if `f` is a constant string,
		or `o[f]` if it's any other expression.</haxe_doc>
		</field>
		<haxe_doc>Generate JavaScript syntax not directly supported by Haxe.
	Use only at low-level when specific target-specific code-generation is required.</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":noClosure"/>
		</meta>
	</class>
	<class path="String" params="" file="/home/travis/haxe/std/js/_std/String.hx" extern="1">
		<fromCharCode public="1" get="inline" set="null" line="43" static="1">
			<f a="code">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Returns the String corresponding to the character code `code`.

		If `code` is negative or has another invalid value, the result is
		unspecified.</haxe_doc>
		</fromCharCode>
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The number of characters in `this` String.</haxe_doc>
		</length>
		<toUpperCase public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a String where all characters of `this` String are upper case.</haxe_doc>
		</toUpperCase>
		<toLowerCase public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a String where all characters of `this` String are lower case.</haxe_doc>
		</toLowerCase>
		<charAt public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the character at position `index` of `this` String.

		If `index` is negative or exceeds `this.length`, the empty String `""`
		is returned.</haxe_doc>
		</charAt>
		<indexOf public="1" set="method">
			<f a="str:?startIndex">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the position of the leftmost occurrence of `str` within `this`
		String.

		If `startIndex` is given, the search is performed within the substring
		of `this` String starting from `startIndex` (if `startIndex` is posivite
		or 0) or `max(this.length + startIndex, 0)` (if `startIndex` is negative).

		If `startIndex` exceeds `this.length`, -1 is returned.

		Otherwise the search is performed within `this` String. In either case,
		the returned position is relative to the beginning of `this` String.

		If `str` cannot be found, -1 is returned.</haxe_doc>
		</indexOf>
		<lastIndexOf public="1" set="method">
			<f a="str:?startIndex">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the position of the rightmost occurrence of `str` within `this`
		String.

		If `startIndex` is given, the search is performed within the substring
		of `this` String from 0 to `startIndex + str.length`. Otherwise the search
		is performed within `this` String. In either case, the returned position
		is relative to the beginning of `this` String.

		If `str` cannot be found, -1 is returned.</haxe_doc>
		</lastIndexOf>
		<split public="1" set="method">
			<f a="delimiter">
				<c path="String"/>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Splits `this` String at each occurrence of `delimiter`.

		If `this` String is the empty String `""`, the result is not consistent
		across targets and may either be `[]` (on Js, Cpp) or `[""]`.

		If `delimiter` is the empty String `""`, `this` String is split into an
		Array of `this.length` elements, where the elements correspond to the
		characters of `this` String.

		If `delimiter` is not found within `this` String, the result is an Array
		with one element, which equals `this` String.

		If `delimiter` is null, the result is unspecified.

		Otherwise, `this` String is split into parts at each occurrence of
		`delimiter`. If `this` String starts (or ends) with `delimiter`, the
		result `Array` contains a leading (or trailing) empty String `""` element.
		Two subsequent delimiters also result in an empty String `""` element.</haxe_doc>
		</split>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns the String itself.</haxe_doc>
		</toString>
		<substring public="1" set="method">
			<f a="startIndex:?endIndex">
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the part of `this` String from `startIndex` to but not including `endIndex`.

		If `startIndex` or `endIndex` are negative, 0 is used instead.

		If `startIndex` exceeds `endIndex`, they are swapped.

		If the (possibly swapped) `endIndex` is omitted or exceeds
		`this.length`, `this.length` is used instead.

		If the (possibly swapped) `startIndex` exceeds `this.length`, the empty
		String `""` is returned.</haxe_doc>
		</substring>
		<charCodeAt public="1" get="inline" set="null" line="35">
			<f a="index">
				<x path="Int"/>
				<x path="Null"><x path="Int"/></x>
			</f>
			<haxe_doc>Returns the character code at position `index` of `this` String.

		If `index` is negative or exceeds `this.length`, `null` is returned.

		To obtain the character code of a single character, `"x".code` can be
		used instead to inline the character code at compile time. Note that
		this only works on String literals of length 1.</haxe_doc>
		</charCodeAt>
		<substr public="1" get="inline" set="null" line="39">
			<f a="pos:?len">
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns `len` characters of `this` String, starting at position `pos`.

		If `len` is omitted, all characters from position `pos` to the end of
		`this` String are included.

		If `pos` is negative, its value is calculated from the end of `this`
		String by `this.length + pos`. If this yields a negative value, 0 is
		used instead.

		If the calculated position + `len` exceeds `this.length`, the characters
		from that position to the end of `this` String are returned.

		If `len` is negative, the result is unspecified.</haxe_doc>
		</substr>
		<new public="1" set="method">
			<f a="string">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a copy from a given String.</haxe_doc>
		</new>
		<haxe_doc>The basic String class.

	A Haxe String is immutable, it is not possible to modify individual
	characters. No method of this class changes the state of `this` String.

	Strings can be constructed using the String literal syntax `"string value"`.

	String can be concatenated by using the `+` operator. If an operand is not a
	String, it is passed through `Std.string()` first.

	@see https://haxe.org/manual/std-String.html</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<class path="Std" params="" file="/home/travis/haxe/std/js/_std/Std.hx">
		<string public="1" set="method" line="41" static="1">
			<f a="s">
				<d/>
				<c path="String"/>
			</f>
			<haxe_doc>Converts any value to a String.

		If `s` is of `String`, `Int`, `Float` or `Bool`, its value is returned.

		If `s` is an instance of a class and that class or one of its parent classes has
		a `toString` method, that method is called. If no such method is present, the result
		is unspecified.

		If `s` is an enum constructor without argument, the constructor's name is returned. If
		arguments exists, the constructor's name followed by the String representations of
		the arguments is returned.

		If `s` is a structure, the field names along with their values are returned. The field order
		and the operator separating field names and values are unspecified.

		If s is null, "null" is returned.</haxe_doc>
		</string>
		<haxe_doc>The Std class provides standard methods for manipulating basic types.</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
			<m n=":keepInit"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<abstract path="Void" params="" file="/home/travis/haxe/std/StdTypes.hx" module="StdTypes">
		<this><x path="Void"/></this>
		<haxe_doc>The standard `Void` type. Only `null` values can be of the type `Void`.

	@see https://haxe.org/manual/types-void.html</haxe_doc>
		<meta><m n=":coreType"/></meta>
	</abstract>
	<abstract path="Float" params="" file="/home/travis/haxe/std/StdTypes.hx" module="StdTypes">
		<this><x path="Float"/></this>
		<haxe_doc><![CDATA[The standard `Float` type, this is a double-precision IEEE 64bit float.

	On static targets, `null` cannot be assigned to Float. If this is necessary,
	`Null<Float>` can be used instead.

	`Std.int` converts a `Float` to an `Int`, rounded towards 0.
	`Std.parseFloat` converts a `String` to a `Float`.

	@see https://haxe.org/manual/types-basic-types.html
	@see https://haxe.org/manual/types-nullability.html]]></haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":notNull"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<abstract path="Int" params="" file="/home/travis/haxe/std/StdTypes.hx" module="StdTypes">
		<this><x path="Int"/></this>
		<to><icast><x path="Float"/></icast></to>
		<haxe_doc><![CDATA[The standard `Int` type. Its precision depends on the platform.

	On static targets, `null` cannot be assigned to `Int`. If this is necessary,
	`Null<Int>` can be used instead.

	`Std.int` converts a `Float` to an `Int`, rounded towards 0.
	`Std.parseInt` converts a `String` to an `Int`.

	@see https://haxe.org/manual/types-basic-types.html
	@see https://haxe.org/manual/std-math-integer-math.html
	@see https://haxe.org/manual/types-nullability.html]]></haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":notNull"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<abstract path="Null" params="T" file="/home/travis/haxe/std/StdTypes.hx" module="StdTypes">
		<from><icast><c path="Null.T"/></icast></from>
		<this><x path="Null"><c path="Null.T"/></x></this>
		<to><icast><c path="Null.T"/></icast></to>
		<haxe_doc><![CDATA[`Null<T>` is a wrapper that can be used to make the basic types `Int`,
	`Float` and `Bool` nullable on static targets.

	If null safety is enabled, only types wrapped in `Null<T>` are nullable.

	Otherwise, it has no effect on non-basic-types, but it can be useful as a way to document
	that `null` is an acceptable value for a method argument, return value or variable.

	@see https://haxe.org/manual/types-nullability.html]]></haxe_doc>
		<meta>
			<m n=":forward"/>
			<m n=":coreType"/>
		</meta>
	</abstract>
	<abstract path="Bool" params="" file="/home/travis/haxe/std/StdTypes.hx" module="StdTypes">
		<this><x path="Bool"/></this>
		<haxe_doc><![CDATA[The standard Boolean type, which can either be `true` or `false`.

	On static targets, `null` cannot be assigned to `Bool`. If this is necessary,
	`Null<Bool>` can be used instead.

	@see https://haxe.org/manual/types-bool.html
	@see https://haxe.org/manual/types-nullability.html]]></haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":notNull"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<abstract path="Dynamic" params="T" file="/home/travis/haxe/std/StdTypes.hx" module="StdTypes">
		<this><x path="Dynamic"><c path="Dynamic.T"/></x></this>
		<haxe_doc>`Dynamic` is a special type which is compatible with all other types.

	Use of `Dynamic` should be minimized as it prevents several compiler
	checks and optimizations. See `Any` type for a safer alternative for
	representing values of any type.

	@see https://haxe.org/manual/types-dynamic.html</haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<typedef path="Iterator" params="T" file="/home/travis/haxe/std/StdTypes.hx" module="StdTypes">
		<a>
			<next set="method">
				<f a=""><c path="Iterator.T"/></f>
				<haxe_doc>Returns the current item of the `Iterator` and advances to the next one.

		This method is not required to check `hasNext()` first. A call to this
		method while `hasNext()` is `false` yields unspecified behavior.

		On the other hand, iterators should not require a call to `hasNext()`
		before the first call to `next()` if an element is available.</haxe_doc>
			</next>
			<hasNext set="method">
				<f a=""><x path="Bool"/></f>
				<haxe_doc>Returns `false` if the iteration is complete, `true` otherwise.

		Usually iteration is considered to be complete if all elements of the
		underlying data structure were handled through calls to `next()`. However,
		in custom iterators any logic may be used to determine the completion
		state.</haxe_doc>
			</hasNext>
		</a>
		<haxe_doc>An `Iterator` is a structure that permits iteration over elements of type `T`.

	Any class with matching `hasNext()` and `next()` fields is considered an `Iterator`
	and can then be used e.g. in `for`-loops. This makes it easy to implement
	custom iterators.

	@see https://haxe.org/manual/lf-iterators.html</haxe_doc>
	</typedef>
	<typedef path="Iterable" params="T" file="/home/travis/haxe/std/StdTypes.hx" module="StdTypes">
		<a><iterator set="method"><f a=""><t path="Iterator"><c path="Iterable.T"/></t></f></iterator></a>
		<haxe_doc>An `Iterable` is a data structure which has an `iterator()` method.
	See `Lambda` for generic functions on iterable structures.

	@see https://haxe.org/manual/lf-iterators.html</haxe_doc>
	</typedef>
	<typedef path="KeyValueIterator" params="K:V" file="/home/travis/haxe/std/StdTypes.hx" module="StdTypes">
		<t path="Iterator"><a>
	<value><c path="KeyValueIterator.V"/></value>
	<key><c path="KeyValueIterator.K"/></key>
</a></t>
		<haxe_doc>A `KeyValueIterator` is an `Iterator` that has a key and a value.</haxe_doc>
	</typedef>
	<typedef path="KeyValueIterable" params="K:V" file="/home/travis/haxe/std/StdTypes.hx" module="StdTypes">
		<a><keyValueIterator set="method"><f a=""><t path="KeyValueIterator">
	<c path="KeyValueIterable.K"/>
	<c path="KeyValueIterable.V"/>
</t></f></keyValueIterator></a>
		<haxe_doc>A `KeyValueIterable` is a data structure which has a `keyValueIterator()`
	method to iterate over key-value-pairs.</haxe_doc>
	</typedef>
	<class path="ArrayAccess" params="T" file="/home/travis/haxe/std/StdTypes.hx" module="StdTypes" extern="1" interface="1"><haxe_doc>`ArrayAccess` is used to indicate a class that can be accessed using brackets.
	The type parameter represents the type of the elements stored.

	This interface should be used for externs only. Haxe does not support custom
	array access on classes. However, array access can be implemented for
	abstract types.

	@see https://haxe.org/manual/types-abstract-array-access.html</haxe_doc></class>
	<class path="Type" params="" file="/home/travis/haxe/std/js/_std/Type.hx">
		<createInstance public="1" params="T" set="method" line="136" static="1">
			<f a="cl:args">
				<x path="Class"><c path="createInstance.T"/></x>
				<c path="Array"><d/></c>
				<c path="createInstance.T"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Creates an instance of class `cl`, using `args` as arguments to the
		class constructor.

		This function guarantees that the class constructor is called.

		Default values of constructors arguments are not guaranteed to be
		taken into account.

		If `cl` or `args` are null, or if the number of elements in `args` does
		not match the expected number of constructor arguments, or if any
		argument has an invalid type,  or if `cl` has no own constructor, the
		result is unspecified.

		In particular, default values of constructor arguments are not
		guaranteed to be taken into account.</haxe_doc>
		</createInstance>
		<haxe_doc>The Haxe Reflection API allows retrieval of type information at runtime.

	This class complements the more lightweight Reflect class, with a focus on
	class and enum instances.

	@see https://haxe.org/manual/types.html
	@see https://haxe.org/manual/std-reflection.html</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<class path="echo.util.IDisposable" params="" file="/home/travis/build/AustinEast/echo/echo/util/Disposable.hx" module="echo.util.Disposable" interface="1"><dispose public="1" set="method"><f a=""><x path="Void"/></f></dispose></class>
	<class path="echo.Body" params="" file="/home/travis/build/AustinEast/echo/echo/Body.hx">
		<implements path="echo.util.IDisposable"/>
		<defaults public="1" get="accessor" set="null" static="1">
			<t path="echo.data.BodyOptions"/>
			<haxe_doc>* Default Body Options</haxe_doc>
		</defaults>
		<ids expr="0" line="25" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</ids>
		<get_defaults set="method" line="534" static="1"><f a=""><t path="echo.data.BodyOptions"/></f></get_defaults>
		<id public="1" set="null">
			<x path="Int"/>
			<haxe_doc>* Unique id of the Body.</haxe_doc>
		</id>
		<x public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<haxe_doc>* The Body's position on the X axis.</haxe_doc>
		</x>
		<y public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<haxe_doc>* The Body's position on the Y axis.</haxe_doc>
		</y>
		<shape public="1" get="accessor" set="accessor">
			<x path="Null"><c path="echo.Shape"/></x>
			<haxe_doc>* The Body's first `Shape` object in the `shapes` array. If it **isn't** null, this `Shape` object act as the Body's Collider, allowing it to be checked for Collisions.</haxe_doc>
		</shape>
		<shapes public="1" set="null">
			<c path="Array"><c path="echo.Shape"/></c>
			<haxe_doc>* The Body's array of `Shape` objects. If the array **isn't** empty, these `Shape` objects act as the Body's Collider, allowing it to be checked for Collisions.
   *
   * NOTE: If adding shapes directly to this Array, make sure to parent the Shape to the Body (ie `shape.set_parent(body.frame);`).</haxe_doc>
		</shapes>
		<children set="null">
			<c path="Array"><c path="echo.Body"/></c>
			<meta><m n=":dox"><e>hide</e></m></meta>
			<haxe_doc>* TODO - Child Body transforms</haxe_doc>
		</children>
		<kinematic public="1">
			<x path="Bool"/>
			<haxe_doc>* Flag to set how a Body is affected by Collisions.
   *
   * If set to true, the Body will still Collide and move through the world, but it will not be moved by external collision forces.
   * This is useful for things like moving platforms.</haxe_doc>
		</kinematic>
		<mass public="1" set="accessor">
			<x path="Float"/>
			<haxe_doc>* Body's mass. Affects how the Body reacts to Collisions and Velocity.
   *
   * The higher a Body's mass, the more resistant it is to those forces.
   * If a Body's mass is set to `0`, it becomes static - unmovable by forces and collisions.</haxe_doc>
		</mass>
		<rotation public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<haxe_doc>* Body's current rotational angle.</haxe_doc>
		</rotation>
		<elasticity public="1">
			<x path="Float"/>
			<haxe_doc>* Value to determine how much of a Body's `velocity` should be retained during collisions (or how much should the `Body` "bounce", in other words).</haxe_doc>
		</elasticity>
		<velocity public="1">
			<x path="hxmath.math.Vector2"/>
			<haxe_doc>* The units/second that a `Body` moves.</haxe_doc>
		</velocity>
		<acceleration public="1">
			<x path="hxmath.math.Vector2"/>
			<haxe_doc>* A measure of how fast a `Body` will change it's velocity.
   *
   * Can be thought of the sum of all external forces on an object during a step.</haxe_doc>
		</acceleration>
		<rotational_velocity public="1">
			<x path="Float"/>
			<haxe_doc>* The units/second that a `Body` will rotate.</haxe_doc>
		</rotational_velocity>
		<max_velocity public="1">
			<x path="hxmath.math.Vector2"/>
			<haxe_doc>* The maximum values a Body's velocity's x and y components can be. If set to 0, the Body has no restrictions on how fast it can move.
   *
   * Note: this is calculated separately from a Body's `max_velocity_length`, so be careful when applying both.</haxe_doc>
		</max_velocity>
		<max_velocity_length public="1">
			<x path="Float"/>
			<haxe_doc>* The maximum velocity that a `Body` can have along the velocity's length. If set to 0, the Body has no restrictions on how fast it can move.
   *
   * Note: this is calculated separately from a Body's `max_velocity`, so be careful when applying both.</haxe_doc>
		</max_velocity_length>
		<max_rotational_velocity public="1">
			<x path="Float"/>
			<haxe_doc>* The maximum rotational velocity range that a `Body` can have.
   *
   * If set to 0, the Body has no restrictions on how fast it can rotate.</haxe_doc>
		</max_rotational_velocity>
		<drag public="1">
			<x path="hxmath.math.Vector2"/>
			<haxe_doc>* A measure of how fast a Body will move its velocity's x and y components towards 0, when there is no acceleration.
   *
   * Note: this is calculated separately from a Body's `drag_length`, so be careful when applying both.</haxe_doc>
		</drag>
		<drag_length public="1">
			<x path="Float"/>
			<haxe_doc>* A measure of how fast a Body will move its velocity towards 0 along the velocity's length, when there is no acceleration.
   *
   * Note: this is calculated separately from a Body's `drag`, so be careful when applying both.</haxe_doc>
		</drag_length>
		<rotational_drag public="1">
			<x path="Float"/>
			<haxe_doc>* A measure of how fast a Body will move its `rotational_velocity` towards 0.</haxe_doc>
		</rotational_drag>
		<gravity_scale public="1">
			<x path="Float"/>
			<haxe_doc>* Percentage value that represents how much a World's gravity affects the Body.</haxe_doc>
		</gravity_scale>
		<inverse_mass public="1" set="null">
			<x path="Float"/>
			<haxe_doc>* Cached value of 1 divided by the Body's mass. Used in Internal calculations.</haxe_doc>
		</inverse_mass>
		<active public="1">
			<x path="Bool"/>
			<haxe_doc>* Flag to set if the Body is active and will participate in a World's Physics calculations or Collision querys.</haxe_doc>
		</active>
		<disposed public="1" set="null"><x path="Bool"/></disposed>
		<sleeping>
			<x path="Bool"/>
			<meta><m n=":dox"><e>hide</e></m></meta>
			<haxe_doc>* TODO - sleeping support
   *
   * Flag to check if the Body is in a sleeping state. A Body is awake if it has any acceleration, velocity, or has changed its position/rotation since the last step.
   * If the Body's World has the `sleeping_bodies` optimization on, this flag determines if the Body will participate in a World's Physics calculations or Collision querys.</haxe_doc>
		</sleeping>
		<world public="1" set="null">
			<c path="echo.World"/>
			<meta><m n=":allow"><e>echo.World</e></m></meta>
			<haxe_doc>* The `World` that this body is attached to. It can only be a part of one `World` at a time.</haxe_doc>
		</world>
		<data public="1" set="null">
			<d/>
			<haxe_doc>* Dynamic Object to store any user data on the `Body`. Useful for Callbacks.</haxe_doc>
		</data>
		<collided public="1">
			<x path="Bool"/>
			<haxe_doc>* Flag to check if the Body collided with something during the step.
   * Used for debug drawing.</haxe_doc>
		</collided>
		<frame public="1" set="null">
			<x path="hxmath.frames.Frame2"/>
			<haxe_doc>* Structure to help perform matrix calculations for the Body's position and rotation.</haxe_doc>
		</frame>
		<dirty public="1">
			<x path="Bool"/>
			<haxe_doc>* Flag to check if the Body has changed its position, rotation, or shape colliders.
   * Used for Collision optimization.</haxe_doc>
		</dirty>
		<on_move public="1">
			<x path="Null"><f a=":">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></x>
			<haxe_doc>* If set, this method is called whenever the Body's X or Y changes.</haxe_doc>
		</on_move>
		<on_rotate public="1">
			<x path="Null"><f a="">
	<x path="Float"/>
	<x path="Void"/>
</f></x>
			<haxe_doc>* If set, this method is called whenever the Body's rotation changes.</haxe_doc>
		</on_rotate>
		<last_x public="1" set="null">
			<x path="Float"/>
			<meta><m n=":allow"><e>echo.Physics.step</e></m></meta>
		</last_x>
		<last_y public="1" set="null">
			<x path="Float"/>
			<meta><m n=":allow"><e>echo.Physics.step</e></m></meta>
		</last_y>
		<last_rotation public="1" set="null">
			<x path="Float"/>
			<meta><m n=":allow"><e>echo.Physics.step</e></m></meta>
		</last_rotation>
		<sync_locked public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>*</haxe_doc>
		</sync_locked>
		<quadtree_data>
			<c path="echo.data.QuadTreeData"/>
			<meta>
				<m n=":dox"><e>hide</e></m>
				<m n=":allow">
					<e>echo.World</e>
					<e>echo.Collisions</e>
					<e>echo.util.Debug</e>
				</m>
			</meta>
		</quadtree_data>
		<parent_frame>
			<x path="hxmath.frames.Frame2"/>
			<meta>
				<m n=":dox"><e>hide</e></m>
				<m n=":noCompletion"/>
			</meta>
		</parent_frame>
		<load_options public="1" set="method" line="218">
			<f a="?options">
				<t path="echo.data.BodyOptions"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Sets a Body's values from a `BodyOptions` object.
   * @param options</haxe_doc>
		</load_options>
		<clone public="1" set="method" line="244"><f a=""><c path="echo.Body"/></f></clone>
		<sync get="inline" set="null" line="277">
			<f a=""><x path="Void"/></f>
			<meta>
				<m n=":dox"><e>hide</e></m>
				<m n=":noCompletion"/>
			</meta>
			<haxe_doc>* TODO - Child Body transforms</haxe_doc>
		</sync>
		<lock_sync public="1" get="inline" set="null" line="281"><f a=""><x path="Void"/></f></lock_sync>
		<unlock_sync public="1" get="inline" set="null" line="285"><f a=""><x path="Void"/></f></unlock_sync>
		<add_child get="inline" set="null" line="299">
			<f a="child">
				<c path="echo.Body"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":dox"><e>hide</e></m>
				<m n=":noCompletion"/>
			</meta>
			<haxe_doc>* TODO - Child Body transforms</haxe_doc>
		</add_child>
		<sync_children get="inline" set="null" line="311">
			<f a=""><x path="Void"/></f>
			<meta>
				<m n=":dox"><e>hide</e></m>
				<m n=":noCompletion"/>
			</meta>
			<haxe_doc>* TODO - Child Body transforms
   * Syncs the transforms of the Body's shapes. Generally this does not need to be called manually.</haxe_doc>
		</sync_children>
		<create_shape public="1" get="inline" set="null" line="318">
			<f a="options:?position" v=":-1">
				<t path="echo.data.ShapeOptions"/>
				<x path="Int"/>
				<c path="echo.Shape"/>
			</f>
			<meta><m n=":value"><e>{ position : -1 }</e></m></meta>
			<haxe_doc>* Adds a new `Shape` to the Body based on the `ShapeOptions` passed in.
   * @param options
   * @param position The position in the Body's `shapes` array the Shape will be added to. If set to -1, the Shape is pushed to the end.
   * @return The newly created `Shape`.</haxe_doc>
		</create_shape>
		<add_shape public="1" get="inline" set="null" line="328">
			<f a="shape:?position" v=":-1">
				<c path="echo.Shape"/>
				<x path="Int"/>
				<c path="echo.Shape"/>
			</f>
			<meta><m n=":value"><e>{ position : -1 }</e></m></meta>
			<haxe_doc>* Adds a `Shape` to the Body.
   * @param shape
   * @param position The position in the Body's `shapes` array the Shape will be added to. If set to -1, the Shape is pushed to the end.
   * @return The added `Shape`.</haxe_doc>
		</add_shape>
		<remove_shape public="1" get="inline" set="null" line="339"><f a="shape">
	<c path="echo.Shape"/>
	<c path="echo.Shape"/>
</f></remove_shape>
		<sync_shapes public="1" get="inline" set="null" line="350">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Syncs the transforms of the Body's shapes. Generally this does not need to be called manually.</haxe_doc>
		</sync_shapes>
		<clear_shapes public="1" get="inline" set="null" line="354">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Clears all Shapes from the Body, releasing them to their respective pools.</haxe_doc>
		</clear_shapes>
		<get_position public="1" set="method" line="361">
			<f a="?vec2">
				<x path="hxmath.math.Vector2"/>
				<x path="hxmath.math.Vector2"/>
			</f>
			<haxe_doc>* Gets the Body's position as a new `Vector2` (or sets the `Vector2`, if passed in).</haxe_doc>
		</get_position>
		<set_position public="1" set="method" line="363">
			<f a="?x:?y" v="0:0">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ y : 0, x : 0 }</e></m></meta>
		</set_position>
		<push public="1" set="method" line="372">
			<f a="?x:?y" v="0:0">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ y : 0, x : 0 }</e></m></meta>
			<haxe_doc>* Adds forces to a Body's acceleration.
   * @param x
   * @param y</haxe_doc>
		</push>
		<bounds public="1" set="method" line="381">
			<f a="?aabb">
				<c path="echo.util.AABB"/>
				<x path="Null"><c path="echo.util.AABB"/></x>
			</f>
			<haxe_doc><![CDATA[* If a Body has shapes, it will return an `AABB` representing the bounds of the Body's shapes relative to its position. If the Body does not have any shapes, this will return `null'.
   * @param aabb Optional `AABB` to set the values to. If the Body does not have any shapes, the AABB will not be set.
   * @return Null<AABB>]]></haxe_doc>
		</bounds>
		<remove public="1" get="inline" set="null" line="402">
			<f a=""><c path="echo.Body"/></f>
			<haxe_doc>* If the Body is attached to a World, it is removed.
   * @return The detached Body.</haxe_doc>
		</remove>
		<is_dynamic public="1" get="inline" set="null" line="411">
			<f a=""><x path="Bool"/></f>
			<haxe_doc><![CDATA[* Checks if the Body is Dynamic (if it's mass is greater than 0).
   * @return  body.mass > 0]]></haxe_doc>
		</is_dynamic>
		<is_static public="1" get="inline" set="null" line="416">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Checks if the Body is Static (if it's mass is equal to 0).
   * @return  body.mass == 0</haxe_doc>
		</is_static>
		<update_static_bounds public="1" get="inline" set="null" line="420">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* If the Body is Static, update it's Quadtree Bounds.</haxe_doc>
		</update_static_bounds>
		<moved public="1" get="inline" set="null" line="429">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Returns true if the Body has moved since the last `Physics.step()`.</haxe_doc>
		</moved>
		<dispose public="1" set="method" line="433">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Disposes the Body. DO NOT use the Body after disposing it, as it could lead to null reference errors.</haxe_doc>
		</dispose>
		<toString set="method" line="448"><f a=""><c path="String"/></f></toString>
		<get_x get="inline" set="null" line="450"><f a=""><x path="Float"/></f></get_x>
		<get_y get="inline" set="null" line="452"><f a=""><x path="Float"/></f></get_y>
		<get_rotation get="inline" set="null" line="454"><f a=""><x path="Float"/></f></get_rotation>
		<get_shape get="inline" set="null" line="456"><f a=""><c path="echo.Shape"/></f></get_shape>
		<set_x get="inline" set="null" line="459"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_x>
		<set_y get="inline" set="null" line="476"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_y>
		<set_shape get="inline" set="null" line="492"><f a="value">
	<c path="echo.Shape"/>
	<c path="echo.Shape"/>
</f></set_shape>
		<set_rotation get="inline" set="null" line="501"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_rotation>
		<set_mass get="inline" set="null" line="518"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_mass>
		<new public="1" set="method" line="198">
			<f a="?options">
				<t path="echo.data.BodyOptions"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Creates a new Body.
   * @param options Optional values to configure the new Body</haxe_doc>
		</new>
		<haxe_doc>* A `Body` is an Object representing a Physical Body in a `World`.
 *
 * Bodies have position, velocity, mass, an optional collider shape, and many other properties that are used in a `World` simulation.</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":build"><e>echo.Macros.build_body()</e></m>
		</meta>
	</class>
	<class path="echo.Collisions" params="" file="/home/travis/build/AustinEast/echo/echo/Collisions.hx">
		<update_quadtree public="1" set="method" line="16" static="1">
			<f a="world">
				<c path="echo.World"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Updates the World's dynamic QuadTree with any Bodies that have moved.</haxe_doc>
		</update_quadtree>
		<query public="1" set="method" line="41" static="1">
			<f a="world:?listeners">
				<c path="echo.World"/>
				<c path="echo.Listeners"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Queries a World's Listeners for Collisions.
   * @param world The World to query.
   * @param listeners Optional collection of listeners to query. If this is set, the World's listeners will not be queried.</haxe_doc>
		</query>
		<notify public="1" set="method" line="130" static="1">
			<f a="world:?listeners">
				<c path="echo.World"/>
				<c path="echo.Listeners"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Enacts the Callbacks defined in a World's Listeners</haxe_doc>
		</notify>
		<bodies_and_bodies set="method" line="158" static="1"><f a="a:b:world:results:quadtree">
	<c path="Array"><c path="echo.Body"/></c>
	<c path="Array"><c path="echo.Body"/></c>
	<c path="echo.World"/>
	<c path="Array"><c path="echo.data.Collision"/></c>
	<c path="echo.util.QuadTree"/>
	<x path="Void"/>
</f></bodies_and_bodies>
		<qr expr="[]" line="163" static="1">
			<c path="Array"><c path="echo.data.QuadTreeData"/></c>
			<meta><m n=":value"><e>[]</e></m></meta>
		</qr>
		<sqr expr="[]" line="164" static="1">
			<c path="Array"><c path="echo.data.QuadTreeData"/></c>
			<meta><m n=":value"><e>[]</e></m></meta>
		</sqr>
		<body_and_bodies set="method" line="166" static="1"><f a="body:bodies:world:results:quadtree">
	<c path="echo.Body"/>
	<c path="Array"><c path="echo.Body"/></c>
	<c path="echo.World"/>
	<c path="Array"><c path="echo.data.Collision"/></c>
	<c path="echo.util.QuadTree"/>
	<x path="Void"/>
</f></body_and_bodies>
		<body_and_body set="method" line="182" static="1"><f a="a:b">
	<c path="echo.Body"/>
	<c path="echo.Body"/>
	<x path="Null"><c path="echo.data.Collision"/></x>
</f></body_and_body>
		<haxe_doc>* Class containing methods for performing Collisions on a World</haxe_doc>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="echo.Listeners" params="" file="/home/travis/build/AustinEast/echo/echo/Listener.hx" module="echo.Listener">
		<implements path="echo.util.IDisposable"/>
		<members public="1"><c path="Array"><c path="echo.Listener"/></c></members>
		<add public="1" set="method" line="89">
			<f a="a:b:?options">
				<x path="echo.util.BodyOrBodies"/>
				<x path="echo.util.BodyOrBodies"/>
				<t path="echo.data.ListenerOptions"/>
				<c path="echo.Listener"/>
			</f>
			<haxe_doc>* Add a new Listener to the collection.
   * @param a The first `Body` or Array of Bodies to collide against.
   * @param b The second `Body` or Array of Bodies to collide against.
   * @param options Options to define the Listener's behavior.
   * @return The new Listener.</haxe_doc>
		</add>
		<remove public="1" set="method" line="113">
			<f a="listener">
				<c path="echo.Listener"/>
				<c path="echo.Listener"/>
			</f>
			<haxe_doc>* Removes a Listener from the Container.
   * @param listener Listener to remove.
   * @return The removed Listener.</haxe_doc>
		</remove>
		<clear public="1" set="method" line="120">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Clears the collection of all Listeners.</haxe_doc>
		</clear>
		<dispose public="1" set="method" line="126">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Disposes of the collection. Do not use once disposed.</haxe_doc>
		</dispose>
		<iterator public="1" get="inline" set="null" line="130"><f a=""><t path="Iterator"><c path="echo.Listener"/></t></f></iterator>
		<new public="1" set="method" line="79"><f a="?members">
	<c path="Array"><c path="echo.Listener"/></c>
	<x path="Void"/>
</f></new>
		<haxe_doc>* Container used to store Listeners</haxe_doc>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="echo.Echo" params="" file="/home/travis/build/AustinEast/echo/echo/Echo.hx">
		<listeners expr="new Listeners()" line="27" static="1">
			<c path="echo.Listeners"/>
			<meta><m n=":value"><e>new Listeners()</e></m></meta>
			<haxe_doc>* Cache'd `Listeners` collection to help with memory management.</haxe_doc>
		</listeners>
		<start public="1" set="method" line="33" static="1">
			<f a="options">
				<t path="echo.data.WorldOptions"/>
				<c path="echo.World"/>
			</f>
			<haxe_doc>* Shortcut for creating a new `World`
   * @param options Options for the new `World`
   * @return World</haxe_doc>
		</start>
		<make public="1" set="method" line="40" static="1">
			<f a="world:options">
				<c path="echo.World"/>
				<t path="echo.data.BodyOptions"/>
				<c path="echo.Body"/>
			</f>
			<haxe_doc>* Shortcut for creating a new `Body` and adding it to the `World`
   * @param world the `World` to add the `Body` to
   * @param options Options for the new `Body`
   * @return Body</haxe_doc>
		</make>
		<listen public="1" set="method" line="49" static="1">
			<f a="world:?a:?b:?options">
				<c path="echo.World"/>
				<x path="echo.util.BodyOrBodies"/>
				<x path="echo.util.BodyOrBodies"/>
				<t path="echo.data.ListenerOptions"/>
				<c path="echo.Listener"/>
			</f>
			<haxe_doc>* Shortcut for creating a new `Listener` for a set of Bodies in the `World`.
   * @param world the `World` to add the `Listener` to
   * @param a The first `Body` or Array of Bodies to collide against
   * @param b The second `Body` or Array of Bodies to collide against
   * @param options Options to define the Listener's behavior
   * @return Listener</haxe_doc>
		</listen>
		<check public="1" set="method" line="61" static="1">
			<f a="world:?a:?b:?options">
				<c path="echo.World"/>
				<x path="echo.util.BodyOrBodies"/>
				<x path="echo.util.BodyOrBodies"/>
				<t path="echo.data.ListenerOptions"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Performs a one-time collision check.
   * @param world the `World` to check for collisions
   * @param a The first `Body` or Array of Bodies to collide against
   * @param b The second `Body` or Array of Bodies to collide against
   * @param options Options to define the Collision Check's behavior</haxe_doc>
		</check>
		<step public="1" set="method" line="78" static="1">
			<f a="world:dt">
				<c path="echo.World"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Steps a `World` forward.
   * @param world
   * @param dt</haxe_doc>
		</step>
		<linecast_floats public="1" get="inline" set="null" line="110" static="1">
			<f a="x:y:dx:dy:test">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="echo.util.BodyOrBodies"/>
				<x path="Null"><c path="echo.data.Intersection"/></x>
			</f>
			<haxe_doc><![CDATA[* Casts a Line Created from the supplied floats, returning the Intersection with the closest Body.
   * @param x The X position to start the cast.
   * @param y The Y position to start the cast.
   * @param dx The X position to end the cast.
   * @param dy The Y position to end the cast.
   * @param test The Body or Array of Bodies to Cast the Line at.
   * @return Null<Intersection> the Intersection with the closest Body, if any occured.]]></haxe_doc>
		</linecast_floats>
		<linecast_vector public="1" get="inline" set="null" line="124" static="1">
			<f a="start:angle:length:test">
				<x path="hxmath.math.Vector2"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="echo.util.BodyOrBodies"/>
				<x path="Null"><c path="echo.data.Intersection"/></x>
			</f>
			<haxe_doc><![CDATA[* Casts a Line Created from the supplied vector, angle, and length returning the Intersection with the closest Body.
   * @param start  The position to start the cast.
   * @param angle  The anglet of the casted Line.
   * @param length The lengh of the casted Line.
   * @param test The Body or Array of Bodies to Cast the Line at.
   * @return Null<Intersection> the Intersection with the closest Body, if any occured.]]></haxe_doc>
		</linecast_vector>
		<linecast_vectors public="1" get="inline" set="null" line="137" static="1">
			<f a="start:end:test">
				<x path="hxmath.math.Vector2"/>
				<x path="hxmath.math.Vector2"/>
				<x path="echo.util.BodyOrBodies"/>
				<x path="Null"><c path="echo.data.Intersection"/></x>
			</f>
			<haxe_doc><![CDATA[* Casts a Line Created from the supplied vectors, returning the Intersection with the closest Body.
   * @param start The position to start the cast.
   * @param end The position to end the cast.
   * @param test The Body or Array of Bodies to Cast the Line at.
   * @return Null<Intersection> the Intersection with the closest Body, if any occured.]]></haxe_doc>
		</linecast_vectors>
		<linecast public="1" get="inline" set="null" line="149" static="1">
			<f a="line:test">
				<c path="echo.Line"/>
				<x path="echo.util.BodyOrBodies"/>
				<x path="Null"><c path="echo.data.Intersection"/></x>
			</f>
			<haxe_doc><![CDATA[* Casts a Line, returning the Intersection with the closest Body.
   * @param line Line to Cast.
   * @param test The Body or Array of Bodies to Cast the Line at.
   * @return Null<Intersection> the Intersection with the closest Body, if any occured.]]></haxe_doc>
		</linecast>
		<linecast_all public="1" get="inline" set="null" line="195" static="1">
			<f a="line:test">
				<c path="echo.Line"/>
				<x path="echo.util.BodyOrBodies"/>
				<c path="Array"><c path="echo.data.Intersection"/></c>
			</f>
			<haxe_doc><![CDATA[* Casts a Line, returning all Intersections.
   * @param line Line to Cast.
   * @param test The Body or Array of Bodies to Cast the Line at.
   * @return Array<Intersection> All Intersections found. if none occured, the length will be 0.]]></haxe_doc>
		</linecast_all>
		<undo public="1" set="method" line="239" static="1">
			<f a="world">
				<c path="echo.World"/>
				<c path="echo.World"/>
			</f>
			<haxe_doc>* Undo the World's last step
   * @param world
   * @return World</haxe_doc>
		</undo>
		<redo public="1" set="method" line="263" static="1">
			<f a="world">
				<c path="echo.World"/>
				<c path="echo.World"/>
			</f>
			<haxe_doc>* Redo the World's last step
   * @param world
   * @return World</haxe_doc>
		</redo>
		<meta><m n=":expose"/></meta>
	</class>
	<class path="echo.util.IPooled" params="" file="/home/travis/build/AustinEast/echo/echo/util/Pool.hx" module="echo.util.Pool" interface="1">
		<put public="1" set="method"><f a=""><x path="Void"/></f></put>
		<pooled><x path="Bool"/></pooled>
	</class>
	<class path="echo.util.IProxy" params="" file="/home/travis/build/AustinEast/echo/echo/util/Proxy.hx" module="echo.util.Proxy" interface="1">
		<haxe_doc>*	Implementing this interface on a Class will run `Proxy.build`, then remove itself.</haxe_doc>
		<meta>
			<m n=":remove"/>
			<m n=":autoBuild"><e>echo.util.Proxy.build()</e></m>
		</meta>
	</class>
	<class path="echo.util.IPool" params="T" file="/home/travis/build/AustinEast/echo/echo/util/Pool.hx" module="echo.util.Pool" interface="1">
		<pre_allocate public="1" set="method"><f a="amount">
	<x path="Int"/>
	<x path="Void"/>
</f></pre_allocate>
		<clear public="1" set="method"><f a=""><c path="Array"><c path="echo.util.IPool.T"/></c></f></clear>
	</class>
	<class path="echo.util.Pool" params="T" file="/home/travis/build/AustinEast/echo/echo/util/Pool.hx">
		<implements path="echo.util.IPool"><c path="echo.util.Pool.T"/></implements>
		<length public="1" get="accessor" set="null"><x path="Int"/></length>
		<pool><c path="Array"><c path="echo.util.Pool.T"/></c></pool>
		<type><x path="Class"><c path="echo.util.Pool.T"/></x></type>
		<count><x path="Int"/></count>
		<get public="1" set="method" line="19"><f a=""><c path="echo.util.Pool.T"/></f></get>
		<put public="1" set="method" line="24"><f a="obj">
	<c path="echo.util.Pool.T"/>
	<x path="Void"/>
</f></put>
		<put_unsafe public="1" set="method" line="34"><f a="obj">
	<c path="echo.util.Pool.T"/>
	<x path="Void"/>
</f></put_unsafe>
		<pre_allocate public="1" set="method" line="40"><f a="amount">
	<x path="Int"/>
	<x path="Void"/>
</f></pre_allocate>
		<clear public="1" set="method" line="44"><f a=""><c path="Array"><c path="echo.util.Pool.T"/></c></f></clear>
		<get_length public="1" set="method" line="51"><f a=""><x path="Int"/></f></get_length>
		<new public="1" set="method" line="13"><f a="type">
	<x path="Class"><c path="echo.util.Pool.T"/></x>
	<x path="Void"/>
</f></new>
		<haxe_doc>* Generic Pooling container</haxe_doc>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="echo.Line" params="" file="/home/travis/build/AustinEast/echo/echo/Line.hx">
		<implements path="echo.util.IPooled"/>
		<pool public="1" get="accessor" set="null" static="1"><c path="echo.util.IPool"><c path="echo.Line"/></c></pool>
		<_pool expr="new Pool&lt;Line&gt;(Line)" line="14" static="1">
			<c path="echo.util.Pool"><c path="echo.Line"/></c>
			<meta><m n=":value"><e><![CDATA[new Pool<Line>(Line)]]></e></m></meta>
		</_pool>
		<get public="1" get="inline" set="null" line="31" static="1">
			<f a="?x:?y:?dx:?dy" v="0:0:1:1">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<c path="echo.Line"/>
			</f>
			<meta><m n=":value"><e>{ dy : 1, dx : 1, y : 0, x : 0 }</e></m></meta>
		</get>
		<get_from_vector public="1" get="inline" set="null" line="38" static="1"><f a="start:angle:length">
	<x path="hxmath.math.Vector2"/>
	<x path="Float"/>
	<x path="Float"/>
	<c path="echo.Line"/>
</f></get_from_vector>
		<get_from_vectors public="1" get="inline" set="null" line="45" static="1"><f a="start:end">
	<x path="hxmath.math.Vector2"/>
	<x path="hxmath.math.Vector2"/>
	<c path="echo.Line"/>
</f></get_from_vectors>
		<get_pool set="method" line="125" static="1"><f a=""><c path="echo.util.IPool"><c path="echo.Line"/></c></f></get_pool>
		<x public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<meta><m n=":alias"><e>start.x</e></m></meta>
		</x>
		<y public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<meta><m n=":alias"><e>start.y</e></m></meta>
		</y>
		<start public="1"><x path="hxmath.math.Vector2"/></start>
		<dx public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<meta><m n=":alias"><e>end.x</e></m></meta>
		</dx>
		<dy public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<meta><m n=":alias"><e>end.y</e></m></meta>
		</dy>
		<end public="1"><x path="hxmath.math.Vector2"/></end>
		<length public="1" get="accessor" set="null">
			<x path="Float"/>
			<meta><m n=":alias"><e>start.distanceTo(end)</e></m></meta>
		</length>
		<radians public="1" get="accessor" set="null"><x path="Float"/></radians>
		<pooled public="1"><x path="Bool"/></pooled>
		<set public="1" get="inline" set="null" line="54">
			<f a="?x:?y:?dx:?dy" v="0:0:1:1">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<c path="echo.Line"/>
			</f>
			<meta><m n=":value"><e>{ dy : 1, dx : 1, y : 0, x : 0 }</e></m></meta>
		</set>
		<set_from_vector public="1" set="method" line="60"><f a="start:angle:length">
	<x path="hxmath.math.Vector2"/>
	<x path="Float"/>
	<x path="Float"/>
	<c path="echo.Line"/>
</f></set_from_vector>
		<set_from_vectors public="1" get="inline" set="null" line="66"><f a="start:end">
	<x path="hxmath.math.Vector2"/>
	<x path="hxmath.math.Vector2"/>
	<c path="echo.Line"/>
</f></set_from_vectors>
		<put public="1" get="inline" set="null" line="70"><f a=""><x path="Void"/></f></put>
		<contains public="1" set="method" line="77"><f a="v">
	<x path="hxmath.math.Vector2"/>
	<x path="Bool"/>
</f></contains>
		<intersect public="1" get="inline" set="null" line="84"><f a="shape">
	<c path="echo.Shape"/>
	<x path="Null"><c path="echo.data.IntersectionData"/></x>
</f></intersect>
		<point_along_ratio public="1" get="inline" set="null" line="88"><f a="ratio">
	<x path="Float"/>
	<x path="hxmath.math.Vector2"/>
</f></point_along_ratio>
		<side public="1" set="method" line="94">
			<f a="point:?set">
				<x path="hxmath.math.Vector2"/>
				<x path="hxmath.math.Vector2"/>
				<x path="hxmath.math.Vector2"/>
			</f>
			<haxe_doc>* Gets the normal on the side of the line the point is.</haxe_doc>
		</side>
		<get_length public="1" get="inline" set="null" line="104"><f a=""><x path="Float"/></f></get_length>
		<get_radians public="1" get="inline" set="null" line="106"><f a=""><x path="Float"/></f></get_radians>
		<set_length public="1" set="method" line="108"><f a="l">
	<x path="Float"/>
	<x path="Float"/>
</f></set_length>
		<set_radians public="1" set="method" line="116"><f a="r">
	<x path="Float"/>
	<x path="Float"/>
</f></set_radians>
		<toString set="method" line="123"><f a=""><c path="String"/></f></toString>
		<get_x set="method" line="12"><f a=""><x path="Float"/></f></get_x>
		<set_x set="method" line="12"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_x>
		<get_y set="method" line="12"><f a=""><x path="Float"/></f></get_y>
		<set_y set="method" line="12"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_y>
		<get_dx set="method" line="12"><f a=""><x path="Float"/></f></get_dx>
		<set_dx set="method" line="12"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_dx>
		<get_dy set="method" line="12"><f a=""><x path="Float"/></f></get_dy>
		<set_dy set="method" line="12"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_dy>
		<new get="inline" set="null" line="49">
			<f a="?x:?y:?dx:?dy" v="0:0:1:1">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ dy : 1, dx : 1, y : 0, x : 0 }</e></m></meta>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":build"><e>echo.util.Proxy.build()</e></m>
			<m n=":autoBuild"><e>echo.util.Proxy.build()</e></m>
			<m n=":using"><e>echo.Echo</e></m>
		</meta>
	</class>
	<class path="echo.Listener" params="" file="/home/travis/build/AustinEast/echo/echo/Listener.hx">
		<defaults public="1" get="accessor" set="null" static="1"><t path="echo.data.ListenerOptions"/></defaults>
		<get_defaults set="method" line="67" static="1"><f a=""><t path="echo.data.ListenerOptions"/></f></get_defaults>
		<a public="1">
			<e path="haxe.ds.Either">
				<c path="echo.Body"/>
				<c path="Array"><c path="echo.Body"/></c>
			</e>
			<haxe_doc>* The first Body or Array of Bodies the listener checks each step.</haxe_doc>
		</a>
		<b public="1">
			<e path="haxe.ds.Either">
				<c path="echo.Body"/>
				<c path="Array"><c path="echo.Body"/></c>
			</e>
			<haxe_doc>* The second Body or Array of Bodies the listener checks each step.</haxe_doc>
		</b>
		<separate public="1">
			<x path="Bool"/>
			<haxe_doc>* Flag that determines if Collisions found by this listener should separate the Bodies. Defaults to `true`.</haxe_doc>
		</separate>
		<collisions public="1">
			<c path="Array"><c path="echo.data.Collision"/></c>
			<haxe_doc>* Store of the latest Collisions.</haxe_doc>
		</collisions>
		<last_collisions public="1">
			<c path="Array"><c path="echo.data.Collision"/></c>
			<haxe_doc>* Store of the Collisions from the Prior Frame.</haxe_doc>
		</last_collisions>
		<enter public="1">
			<f a="::">
				<c path="echo.Body"/>
				<c path="echo.Body"/>
				<c path="Array"><c path="echo.data.CollisionData"/></c>
				<x path="Void"/>
			</f>
			<meta><m n=":optional"/></meta>
			<haxe_doc>* A callback function that is called on the first frame that a collision starts.</haxe_doc>
		</enter>
		<stay public="1">
			<f a="::">
				<c path="echo.Body"/>
				<c path="echo.Body"/>
				<c path="Array"><c path="echo.data.CollisionData"/></c>
				<x path="Void"/>
			</f>
			<meta><m n=":optional"/></meta>
			<haxe_doc>* A callback function that is called on frames when two Bodies are continuing to collide.</haxe_doc>
		</stay>
		<exit public="1">
			<f a=":">
				<c path="echo.Body"/>
				<c path="echo.Body"/>
				<x path="Void"/>
			</f>
			<meta><m n=":optional"/></meta>
			<haxe_doc>* A callback function that is called when a collision between two Bodies ends.</haxe_doc>
		</exit>
		<condition public="1">
			<f a="::">
				<c path="echo.Body"/>
				<c path="echo.Body"/>
				<c path="Array"><c path="echo.data.CollisionData"/></c>
				<x path="Bool"/>
			</f>
			<meta><m n=":optional"/></meta>
			<haxe_doc>* A callback function that allows extra logic to be run on a potential collision.
   *
   * If it returns true, the collision is valid. Otherwise the collision is discarded and no physics resolution/collision callbacks occur</haxe_doc>
		</condition>
		<quadtree_results public="1">
			<c path="Array"><c path="echo.data.Collision"/></c>
			<meta><m n=":optional"/></meta>
			<haxe_doc>* Store of the latest quadtree query results</haxe_doc>
		</quadtree_results>
		<percent_correction public="1">
			<x path="Float"/>
			<haxe_doc>* Percentage of correction along the collision normal to be applied to seperating bodies. Helps prevent objects sinking into each other.</haxe_doc>
		</percent_correction>
		<correction_threshold public="1">
			<x path="Float"/>
			<haxe_doc>* Threshold determining how close two separating bodies must be before position correction occurs. Helps reduce jitter.</haxe_doc>
		</correction_threshold>
		<new public="1" set="method" line="14">
			<f a="a:b:separate:collisions:last_collisions:?enter:?stay:?exit:?condition:?quadtree_results:percent_correction:correction_threshold">
				<e path="haxe.ds.Either">
					<c path="echo.Body"/>
					<c path="Array"><c path="echo.Body"/></c>
				</e>
				<e path="haxe.ds.Either">
					<c path="echo.Body"/>
					<c path="Array"><c path="echo.Body"/></c>
				</e>
				<x path="Bool"/>
				<c path="Array"><c path="echo.data.Collision"/></c>
				<c path="Array"><c path="echo.data.Collision"/></c>
				<f a="::">
					<c path="echo.Body"/>
					<c path="echo.Body"/>
					<c path="Array"><c path="echo.data.CollisionData"/></c>
					<x path="Void"/>
				</f>
				<f a="::">
					<c path="echo.Body"/>
					<c path="echo.Body"/>
					<c path="Array"><c path="echo.data.CollisionData"/></c>
					<x path="Void"/>
				</f>
				<f a=":">
					<c path="echo.Body"/>
					<c path="echo.Body"/>
					<x path="Void"/>
				</f>
				<f a="::">
					<c path="echo.Body"/>
					<c path="echo.Body"/>
					<c path="Array"><c path="echo.data.CollisionData"/></c>
					<x path="Bool"/>
				</f>
				<c path="Array"><c path="echo.data.Collision"/></c>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":compilerGenerated"/></meta>
		</new>
		<haxe_doc>* Data Structure used to listen for Collisions between Bodies.</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":structInit"/>
		</meta>
	</class>
	<class path="hxmath.math.Vector2Default" params="" file="/home/travis/haxe/lib/hxmath/git/hxmath/math/Vector2.hx" module="hxmath.math.Vector2">
		<x public="1"><x path="Float"/></x>
		<y public="1"><x path="Float"/></y>
		<toString public="1" set="method" line="25"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method" line="19"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>* The default underlying type.</haxe_doc>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="echo.Physics" params="" file="/home/travis/build/AustinEast/echo/echo/Physics.hx">
		<zero final="1" set="null" expr="Vector2.zero" line="13" static="1">
			<x path="hxmath.math.Vector2"/>
			<meta><m n=":value"><e>Vector2.zero</e></m></meta>
		</zero>
		<step public="1" set="method" line="19" static="1">
			<f a="world:dt">
				<c path="echo.World"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Applies movement forces to a World's Bodies
   * @param world World to step forward
   * @param dt elapsed time since the last step</haxe_doc>
		</step>
		<separate public="1" set="method" line="69" static="1">
			<f a="world:?listeners">
				<c path="echo.World"/>
				<c path="echo.Listeners"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Loops through all of a World's Listeners, separating all collided Bodies in the World. Use `Collisions.query()` before calling this to query the World's Listeners for collisions.
   * @param world
   * @param dt</haxe_doc>
		</separate>
		<resolve public="1" set="method" line="83" static="1">
			<f a="a:b:cd:?correction_threshold:?percent_correction" v=":::0.013:0.9">
				<c path="echo.Body"/>
				<c path="echo.Body"/>
				<c path="echo.data.CollisionData"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ percent_correction : 0.9, correction_threshold : 0.013 }</e></m></meta>
			<haxe_doc>* Resolves a Collision between two Bodies, separating them if the conditions are correct.
   * @param a the first `Body` in the Collision
   * @param b the second `Body` in the Collision
   * @param cd Data related to the Collision</haxe_doc>
		</resolve>
		<compute_velocity public="1" get="inline" set="null" line="138" static="1"><f a="v:a:d:m:dt">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></compute_velocity>
		<haxe_doc>* Class containing methods for performing Physics simulations on a World</haxe_doc>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="echo.Shape" params="" file="/home/travis/build/AustinEast/echo/echo/Shape.hx">
		<defaults public="1" get="accessor" set="null" static="1">
			<t path="echo.data.ShapeOptions"/>
			<haxe_doc>* Default Shape Options</haxe_doc>
		</defaults>
		<get public="1" set="method" line="23" static="1">
			<f a="options">
				<t path="echo.data.ShapeOptions"/>
				<c path="echo.Shape"/>
			</f>
			<haxe_doc>* Gets a Shape. If one is available, it will be grabbed from the Object Pool. Otherwise a new Shape will be created.
   * @param options
   * @return Shape</haxe_doc>
		</get>
		<rect public="1" get="inline" set="null" line="46" static="1">
			<f a="?x:?y:?width:?height">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<c path="echo.shape.Rect"/>
			</f>
			<haxe_doc>* Gets a `Rect` from the Rect Classes' Object Pool. Shortcut for `Rect.get()`.
   * @param x The X position of the Rect
   * @param y The Y position of the Rect
   * @param width The width of the Rect
   * @param height The height of the Rect
   * @return Rect</haxe_doc>
		</rect>
		<square public="1" get="inline" set="null" line="54" static="1">
			<f a="?x:?y:?width">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<c path="echo.shape.Rect"/>
			</f>
			<haxe_doc>* Gets a `Rect` with uniform width/height from the Rect Classes' Object Pool. Shortcut for `Rect.get()`.
   * @param x The X position of the Rect
   * @param y The Y position of the Rect
   * @param width The width of the Rect
   * @return Rect</haxe_doc>
		</square>
		<circle public="1" get="inline" set="null" line="62" static="1">
			<f a="?x:?y:?radius">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<c path="echo.shape.Circle"/>
			</f>
			<haxe_doc>* Gets a `Circle` from the Circle Classes' Object Pool. Shortcut for `Circle.get()`.
   * @param x The X position of the Circle
   * @param y The Y position of the Circle
   * @param radius The radius of the Circle
   * @return Rect</haxe_doc>
		</circle>
		<get_defaults set="method" line="283" static="1"><f a=""><t path="echo.data.ShapeOptions"/></f></get_defaults>
		<type public="1">
			<x path="echo.data.ShapeType"/>
			<haxe_doc>* Enum value determining what shape this Object is (Rect, Circle, Polygon).</haxe_doc>
		</type>
		<x public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<haxe_doc>* The Shape's position on the X axis. For Rects, Circles, and simple Polygons, this position is based on the center of the Shape.
   *
   * If added to a `Body`, this value is treated as an offset to the Body's X position.</haxe_doc>
		</x>
		<y public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<haxe_doc>* The Shape's position on the Y axis. For Rects, Circles, and simple Polygons, this position is based on the center of the Shape.
   *
   * If added to a `Body`, this value is treated as an offset to the Body's Y position.</haxe_doc>
		</y>
		<rotation public="1" get="accessor" set="accessor"><x path="Float"/></rotation>
		<local_x public="1" set="accessor"><x path="Float"/></local_x>
		<local_y public="1" set="accessor"><x path="Float"/></local_y>
		<local_rotation public="1" set="accessor"><x path="Float"/></local_rotation>
		<solid public="1">
			<x path="Bool"/>
			<haxe_doc>* Flag to set whether the Shape collides with other Shapes.
   *
   * If false, this Shape's Body will not have its position or velocity affected by other Bodies, but it will still call collision callbacks</haxe_doc>
		</solid>
		<top public="1" get="accessor" set="null">
			<x path="Float"/>
			<haxe_doc>* The Upper Bounds of the Shape.</haxe_doc>
		</top>
		<bottom public="1" get="accessor" set="null">
			<x path="Float"/>
			<haxe_doc>* The Lower Bounds of the Shape.</haxe_doc>
		</bottom>
		<left public="1" get="accessor" set="null">
			<x path="Float"/>
			<haxe_doc>* The Left Bounds of the Shape.</haxe_doc>
		</left>
		<right public="1" get="accessor" set="null">
			<x path="Float"/>
			<haxe_doc>* The Right Bounds of the Shape.</haxe_doc>
		</right>
		<collided public="1">
			<x path="Bool"/>
			<haxe_doc>* Flag to determine if the Shape has collided in the last `World` step. Used Internally for Debugging.</haxe_doc>
		</collided>
		<sync_locked public="1" set="null"><x path="Bool"/></sync_locked>
		<parent_frame set="null"><x path="hxmath.frames.Frame2"/></parent_frame>
		<sync_pos>
			<x path="hxmath.math.Vector2"/>
			<haxe_doc>* A cached `Vector2` used to reduce allocations. Used Internally.</haxe_doc>
		</sync_pos>
		<_x><x path="Float"/></_x>
		<_y><x path="Float"/></_y>
		<_rotation><x path="Float"/></_rotation>
		<put public="1" set="method" line="139"><f a=""><x path="Void"/></f></put>
		<sync public="1" set="method" line="143"><f a=""><x path="Void"/></f></sync>
		<get_position public="1" get="inline" set="null" line="147">
			<f a=""><x path="hxmath.math.Vector2"/></f>
			<haxe_doc>* Gets the Shape's position on the X and Y axis as a `Vector2`.</haxe_doc>
		</get_position>
		<get_local_position public="1" get="inline" set="null" line="149"><f a=""><x path="hxmath.math.Vector2"/></f></get_local_position>
		<set_position public="1" get="inline" set="null" line="151"><f a="value">
	<x path="hxmath.math.Vector2"/>
	<x path="Void"/>
</f></set_position>
		<set_local_position public="1" get="inline" set="null" line="156"><f a="value">
	<x path="hxmath.math.Vector2"/>
	<x path="Void"/>
</f></set_local_position>
		<set_parent public="1" set="method" line="161"><f a="?frame">
	<x path="hxmath.frames.Frame2"/>
	<x path="Void"/>
</f></set_parent>
		<lock_sync public="1" set="method" line="167"><f a=""><x path="Void"/></f></lock_sync>
		<unlock_sync public="1" set="method" line="171"><f a=""><x path="Void"/></f></unlock_sync>
		<bounds public="1" set="method" line="180">
			<f a="?aabb">
				<c path="echo.util.AABB"/>
				<c path="echo.util.AABB"/>
			</f>
			<haxe_doc>* Returns an `AABB` representing the bounds of the `Shape`.
   * @param aabb Optional `AABB` to set the values to.
   * @return AABB</haxe_doc>
		</bounds>
		<clone public="1" set="method" line="185">
			<f a=""><c path="echo.Shape"/></f>
			<haxe_doc>* Clones the Shape into a new Shape
   * @return Shape return new Shape(x, y)</haxe_doc>
		</clone>
		<contains public="1" set="method" line="188"><f a="v">
	<x path="hxmath.math.Vector2"/>
	<x path="Bool"/>
</f></contains>
		<intersect public="1" set="method" line="190"><f a="l">
	<c path="echo.Line"/>
	<x path="Null"><c path="echo.data.IntersectionData"/></x>
</f></intersect>
		<overlaps public="1" set="method" line="192"><f a="s">
	<c path="echo.Shape"/>
	<x path="Bool"/>
</f></overlaps>
		<collides public="1" set="method" line="194"><f a="s">
	<c path="echo.Shape"/>
	<x path="Null"><c path="echo.data.CollisionData"/></x>
</f></collides>
		<collide_rect set="method" line="196"><f a="r">
	<c path="echo.shape.Rect"/>
	<x path="Null"><c path="echo.data.CollisionData"/></x>
</f></collide_rect>
		<collide_circle set="method" line="198"><f a="c">
	<c path="echo.shape.Circle"/>
	<x path="Null"><c path="echo.data.CollisionData"/></x>
</f></collide_circle>
		<collide_polygon set="method" line="200"><f a="p">
	<c path="echo.shape.Polygon"/>
	<x path="Null"><c path="echo.data.CollisionData"/></x>
</f></collide_polygon>
		<toString set="method" line="202"><f a=""><c path="String"/></f></toString>
		<get_x get="inline" set="null" line="212"><f a=""><x path="Float"/></f></get_x>
		<get_y get="inline" set="null" line="214"><f a=""><x path="Float"/></f></get_y>
		<get_rotation get="inline" set="null" line="216"><f a=""><x path="Float"/></f></get_rotation>
		<get_top set="method" line="218"><f a=""><x path="Float"/></f></get_top>
		<get_bottom set="method" line="220"><f a=""><x path="Float"/></f></get_bottom>
		<get_left set="method" line="222"><f a=""><x path="Float"/></f></get_left>
		<get_right set="method" line="224"><f a=""><x path="Float"/></f></get_right>
		<set_x get="inline" set="null" line="227"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_x>
		<set_y get="inline" set="null" line="235"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_y>
		<set_rotation get="inline" set="null" line="243"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_rotation>
		<set_local_x get="inline" set="null" line="250"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_local_x>
		<set_local_y get="inline" set="null" line="261"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_local_y>
		<set_local_rotation get="inline" set="null" line="272"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_local_rotation>
		<new get="inline" set="null" line="68">
			<f a="?x:?y:?rotation" v="0:0:0">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ rotation : 0, y : 0, x : 0 }</e></m></meta>
			<haxe_doc>* Creates a new Shape
   * @param x
   * @param y</haxe_doc>
		</new>
		<haxe_doc>* Base Shape Class. Acts as a Body's collider. Check out `echo.shapes` for all available shapes</haxe_doc>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="echo.World" params="" file="/home/travis/build/AustinEast/echo/echo/World.hx">
		<implements path="echo.util.IDisposable"/>
		<width public="1" set="accessor">
			<x path="Float"/>
			<haxe_doc>* Width of the World, extending right from the World's X position.</haxe_doc>
		</width>
		<height public="1" set="accessor">
			<x path="Float"/>
			<haxe_doc>* Height of the World, extending down from the World's Y position.</haxe_doc>
		</height>
		<x public="1" set="accessor">
			<x path="Float"/>
			<haxe_doc>* The World's position on the X axis.</haxe_doc>
		</x>
		<y public="1" set="accessor">
			<x path="Float"/>
			<haxe_doc>* The World's position on the Y axis.</haxe_doc>
		</y>
		<gravity public="1" set="null">
			<x path="hxmath.math.Vector2"/>
			<haxe_doc>* The amount of acceleration applied to each `Body` member every Step.</haxe_doc>
		</gravity>
		<quadtree public="1">
			<c path="echo.util.QuadTree"/>
			<haxe_doc>* The World's QuadTree for dynamic Bodies. Generally doesn't need to be touched.</haxe_doc>
		</quadtree>
		<static_quadtree public="1">
			<c path="echo.util.QuadTree"/>
			<haxe_doc>* The World's QuadTree for static Bodies. Generally doesn't need to be touched.</haxe_doc>
		</static_quadtree>
		<listeners public="1"><c path="echo.Listeners"/></listeners>
		<members public="1"><c path="Array"><c path="echo.Body"/></c></members>
		<count public="1" get="accessor" set="null"><x path="Int"/></count>
		<iterations public="1">
			<x path="Int"/>
			<haxe_doc>* The amount of iterations that occur each time the World is stepped. The higher the number, the more stable the Physics Simulation will be, at the cost of performance.</haxe_doc>
		</iterations>
		<history public="1"><x path="Null"><c path="echo.util.History_Array_echo_data_BodyState"/></x></history>
		<init><x path="Bool"/></init>
		<set_from_shape public="1" get="inline" set="null" line="69"><f a="s">
	<c path="echo.Shape"/>
	<x path="Void"/>
</f></set_from_shape>
		<center public="1" get="inline" set="null" line="76"><f a="?rect">
	<c path="echo.shape.Rect"/>
	<c path="echo.shape.Rect"/>
</f></center>
		<add public="1" set="method" line="80"><f a="body">
	<c path="echo.Body"/>
	<c path="echo.Body"/>
</f></add>
		<remove public="1" set="method" line="90"><f a="body">
	<c path="echo.Body"/>
	<c path="echo.Body"/>
</f></remove>
		<iterator public="1" get="inline" set="null" line="98"><f a=""><t path="Iterator"><c path="echo.Body"/></t></f></iterator>
		<dynamics public="1" get="inline" set="null" line="102">
			<f a=""><c path="Array"><c path="echo.Body"/></c></f>
			<haxe_doc>* Returns a new Array containing every dynamic `Body` in the World.</haxe_doc>
		</dynamics>
		<statics public="1" get="inline" set="null" line="106">
			<f a=""><c path="Array"><c path="echo.Body"/></c></f>
			<haxe_doc>* Returns a new Array containing every static `Body` in the World.</haxe_doc>
		</statics>
		<for_each public="1" get="inline" set="null" line="112">
			<f a="f:?recursive" v=":true">
				<f a="">
					<c path="echo.Body"/>
					<x path="Void"/>
				</f>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ recursive : true }</e></m></meta>
			<haxe_doc>* Runs a function on every `Body` in the World
   * @param f Function to perform on each `Body`.
   * @param recursive Currently not supported.</haxe_doc>
		</for_each>
		<for_each_dynamic public="1" get="inline" set="null" line="118">
			<f a="f:?recursive" v=":true">
				<f a="">
					<c path="echo.Body"/>
					<x path="Void"/>
				</f>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ recursive : true }</e></m></meta>
			<haxe_doc>* Runs a function on every dynamic `Body` in the World
   * @param f Function to perform on each dynamic `Body`.
   * @param recursive Currently not supported.</haxe_doc>
		</for_each_dynamic>
		<for_each_static public="1" get="inline" set="null" line="124">
			<f a="f:?recursive" v=":true">
				<f a="">
					<c path="echo.Body"/>
					<x path="Void"/>
				</f>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ recursive : true }</e></m></meta>
			<haxe_doc>* Runs a function on every static `Body` in the World
   * @param f Function to perform on each static `Body`.
   * @param recursive Currently not supported.</haxe_doc>
		</for_each_static>
		<clear public="1" set="method" line="128">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Clears the World's members and listeners.</haxe_doc>
		</clear>
		<dispose public="1" set="method" line="136">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Disposes the World. DO NOT use the World after disposing it, as it could lead to null reference errors.</haxe_doc>
		</dispose>
		<reset_quadtrees public="1" set="method" line="148">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Resets the World's dynamic and static Quadtrees.</haxe_doc>
		</reset_quadtrees>
		<get_count get="inline" set="null" line="167"><f a=""><x path="Int"/></f></get_count>
		<set_x get="inline" set="null" line="169"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_x>
		<set_y get="inline" set="null" line="175"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_y>
		<set_width get="inline" set="null" line="181"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_width>
		<set_height get="inline" set="null" line="187"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_height>
		<new public="1" set="method" line="54"><f a="options">
	<t path="echo.data.WorldOptions"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>* A `World` is an Object representing the state of a Physics simulation and it configurations.</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":using"><e>echo.Echo</e></m>
		</meta>
	</class>
	<class path="echo.data.BodyState" params="" file="/home/travis/build/AustinEast/echo/echo/data/Data.hx" module="echo.data.Data">
		<id final="1" public="1"><x path="Int"/></id>
		<x final="1" public="1"><x path="Float"/></x>
		<y final="1" public="1"><x path="Float"/></y>
		<rotation final="1" public="1"><x path="Float"/></rotation>
		<velocity final="1" public="1"><x path="hxmath.math.Vector2"/></velocity>
		<acceleration final="1" public="1"><x path="hxmath.math.Vector2"/></acceleration>
		<rotational_velocity final="1" public="1"><x path="Float"/></rotational_velocity>
		<new public="1" set="method" line="18"><f a="id:x:y:rotation:velocity:acceleration:rotational_velocity">
	<x path="Int"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="hxmath.math.Vector2"/>
	<x path="hxmath.math.Vector2"/>
	<x path="Float"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":structInit"/>
		</meta>
	</class>
	<class path="echo.data.Collision" params="" file="/home/travis/build/AustinEast/echo/echo/data/Data.hx" module="echo.data.Data">
		<implements path="echo.util.IPooled"/>
		<pool public="1" get="accessor" set="null" static="1"><c path="echo.util.IPool"><c path="echo.data.Collision"/></c></pool>
		<_pool expr="new Pool&lt;Collision&gt;(Collision)" line="33" static="1">
			<c path="echo.util.Pool"><c path="echo.data.Collision"/></c>
			<meta><m n=":value"><e><![CDATA[new Pool<Collision>(Collision)]]></e></m></meta>
		</_pool>
		<get public="1" get="inline" set="null" line="49" static="1"><f a="a:b">
	<c path="echo.Body"/>
	<c path="echo.Body"/>
	<c path="echo.data.Collision"/>
</f></get>
		<get_pool set="method" line="68" static="1"><f a=""><c path="echo.util.IPool"><c path="echo.data.Collision"/></c></f></get_pool>
		<a public="1">
			<c path="echo.Body"/>
			<haxe_doc>* Body A.</haxe_doc>
		</a>
		<b public="1">
			<c path="echo.Body"/>
			<haxe_doc>* Body B.</haxe_doc>
		</b>
		<data public="1">
			<c path="Array"><c path="echo.data.CollisionData"/></c>
			<haxe_doc>* Array containing Data from Each Collision found between the two Bodies' Shapes.</haxe_doc>
		</data>
		<pooled public="1"><x path="Bool"/></pooled>
		<put public="1" set="method" line="58"><f a=""><x path="Void"/></f></put>
		<new get="inline" set="null" line="66"><f a=""><x path="Void"/></f></new>
		<haxe_doc>* Class containing data describing any Collisions between two Bodies.</haxe_doc>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="echo.data.CollisionData" params="" file="/home/travis/build/AustinEast/echo/echo/data/Data.hx" module="echo.data.Data">
		<implements path="echo.util.IPooled"/>
		<pool public="1" get="accessor" set="null" static="1"><c path="echo.util.IPool"><c path="echo.data.CollisionData"/></c></pool>
		<_pool expr="new Pool&lt;CollisionData&gt;(CollisionData)" line="75" static="1">
			<c path="echo.util.Pool"><c path="echo.data.CollisionData"/></c>
			<meta><m n=":value"><e><![CDATA[new Pool<CollisionData>(CollisionData)]]></e></m></meta>
		</_pool>
		<get public="1" get="inline" set="null" line="95" static="1"><f a="overlap:x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<c path="echo.data.CollisionData"/>
</f></get>
		<get_pool set="method" line="118" static="1"><f a=""><c path="echo.util.IPool"><c path="echo.data.CollisionData"/></c></f></get_pool>
		<sa public="1">
			<c path="echo.Shape"/>
			<haxe_doc>* Shape A.</haxe_doc>
		</sa>
		<sb public="1">
			<c path="echo.Shape"/>
			<haxe_doc>* Shape B.</haxe_doc>
		</sb>
		<overlap public="1">
			<x path="Float"/>
			<haxe_doc>* The length of Shape A's penetration into Shape B.</haxe_doc>
		</overlap>
		<normal public="1">
			<x path="hxmath.math.Vector2"/>
			<haxe_doc>* The normal vector (direction) of Shape A's penetration into Shape B.</haxe_doc>
		</normal>
		<pooled public="1"><x path="Bool"/></pooled>
		<set public="1" get="inline" set="null" line="106"><f a="overlap:x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></set>
		<put public="1" set="method" line="111"><f a=""><x path="Void"/></f></put>
		<new get="inline" set="null" line="104"><f a=""><x path="Void"/></f></new>
		<haxe_doc>* Class containing data describing a Collision between two Shapes.</haxe_doc>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="echo.data.Intersection" params="" file="/home/travis/build/AustinEast/echo/echo/data/Data.hx" module="echo.data.Data">
		<implements path="echo.util.IPooled"/>
		<pool public="1" get="accessor" set="null" static="1"><c path="echo.util.IPool"><c path="echo.data.Intersection"/></c></pool>
		<_pool expr="new Pool&lt;Intersection&gt;(Intersection)" line="125" static="1">
			<c path="echo.util.Pool"><c path="echo.data.Intersection"/></c>
			<meta><m n=":value"><e><![CDATA[new Pool<Intersection>(Intersection)]]></e></m></meta>
		</_pool>
		<get public="1" get="inline" set="null" line="145" static="1"><f a="line:body">
	<c path="echo.Line"/>
	<c path="echo.Body"/>
	<c path="echo.data.Intersection"/>
</f></get>
		<get_pool set="method" line="173" static="1"><f a=""><c path="echo.util.IPool"><c path="echo.data.Intersection"/></c></f></get_pool>
		<line public="1">
			<c path="echo.Line"/>
			<haxe_doc>* Line.</haxe_doc>
		</line>
		<body public="1">
			<c path="echo.Body"/>
			<haxe_doc>* Body.</haxe_doc>
		</body>
		<data public="1">
			<c path="Array"><c path="echo.data.IntersectionData"/></c>
			<haxe_doc>* Array containing Data from Each Intersection found between the Line and each Shape in the Body.</haxe_doc>
		</data>
		<closest public="1" get="accessor" set="null">
			<x path="Null"><c path="echo.data.IntersectionData"/></x>
			<haxe_doc>* Gets the IntersectionData that has the closest hit distance from the beginning of the Line.</haxe_doc>
		</closest>
		<pooled public="1"><x path="Bool"/></pooled>
		<put public="1" set="method" line="154"><f a=""><x path="Void"/></f></put>
		<get_closest get="inline" set="null" line="164"><f a=""><x path="Null"><c path="echo.data.IntersectionData"/></x></f></get_closest>
		<new get="inline" set="null" line="162"><f a=""><x path="Void"/></f></new>
		<haxe_doc>* Class containing data describing any Intersections between a Line and a Body.</haxe_doc>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="echo.data.IntersectionData" params="" file="/home/travis/build/AustinEast/echo/echo/data/Data.hx" module="echo.data.Data">
		<implements path="echo.util.IPooled"/>
		<pool public="1" get="accessor" set="null" static="1"><c path="echo.util.IPool"><c path="echo.data.IntersectionData"/></c></pool>
		<_pool expr="new Pool&lt;IntersectionData&gt;(IntersectionData)" line="180" static="1">
			<c path="echo.util.Pool"><c path="echo.data.IntersectionData"/></c>
			<meta><m n=":value"><e><![CDATA[new Pool<IntersectionData>(IntersectionData)]]></e></m></meta>
		</_pool>
		<get public="1" get="inline" set="null" line="203" static="1"><f a="distance:overlap:x:y:normal_x:normal_y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<c path="echo.data.IntersectionData"/>
</f></get>
		<get_pool set="method" line="231" static="1"><f a=""><c path="echo.util.IPool"><c path="echo.data.IntersectionData"/></c></f></get_pool>
		<line public="1"><c path="echo.Line"/></line>
		<shape public="1"><c path="echo.Shape"/></shape>
		<hit public="1">
			<x path="hxmath.math.Vector2"/>
			<haxe_doc>* The position along the line where the line hit the shape.</haxe_doc>
		</hit>
		<distance public="1">
			<x path="Float"/>
			<haxe_doc>* The distance between the start of the line and the hit position.</haxe_doc>
		</distance>
		<overlap public="1">
			<x path="Float"/>
			<haxe_doc>* The length of the line that has overlapped the shape.</haxe_doc>
		</overlap>
		<normal public="1">
			<x path="hxmath.math.Vector2"/>
			<haxe_doc>* The normal vector (direction) of the Line's penetration into the Shape.</haxe_doc>
		</normal>
		<pooled public="1"><x path="Bool"/></pooled>
		<set public="1" get="inline" set="null" line="217"><f a="distance:overlap:x:y:normal_x:normal_y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></set>
		<put public="1" set="method" line="224"><f a=""><x path="Void"/></f></put>
		<new get="inline" set="null" line="212"><f a=""><x path="Void"/></f></new>
		<haxe_doc>* Class containing data describing an Intersection between a Line and a Shape.</haxe_doc>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="echo.data.QuadTreeData" params="" file="/home/travis/build/AustinEast/echo/echo/data/Data.hx" module="echo.data.Data">
		<id public="1">
			<x path="Int"/>
			<haxe_doc>* Id of the Data.</haxe_doc>
		</id>
		<bounds public="1">
			<c path="echo.util.AABB"/>
			<meta><m n=":optional"/></meta>
			<haxe_doc>* Bounds of the Data.</haxe_doc>
		</bounds>
		<flag public="1">
			<x path="Bool"/>
			<haxe_doc>* Helper flag to check if this Data has been counted during queries.</haxe_doc>
		</flag>
		<new public="1" set="method" line="235">
			<f a="id:?bounds:flag">
				<x path="Int"/>
				<c path="echo.util.AABB"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":compilerGenerated"/></meta>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":structInit"/>
		</meta>
	</class>
	<abstract path="echo.data.Direction" params="" file="/home/travis/build/AustinEast/echo/echo/data/Data.hx" module="echo.data.Data">
		<from><icast><x path="Int"/></icast></from>
		<this><x path="Int"/></this>
		<to><icast><x path="Int"/></icast></to>
		<meta><m n=":enum"/></meta>
		<impl><class path="echo.data._Data.Direction_Impl_" params="" file="/home/travis/build/AustinEast/echo/echo/data/Data.hx" private="1" module="echo.data.Data" extern="1">
	<TOP public="1" get="inline" set="null" expr="cast 0" line="252" static="1">
		<x path="echo.data.Direction"/>
		<meta>
			<m n=":value"><e>cast 0</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</TOP>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="echo.data._Data.Direction_Impl_" params="" file="/home/travis/build/AustinEast/echo/echo/data/Data.hx" private="1" module="echo.data.Data" extern="1">
		<TOP public="1" get="inline" set="null" expr="cast 0" line="252" static="1">
			<x path="echo.data.Direction"/>
			<meta>
				<m n=":value"><e>cast 0</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</TOP>
		<meta><m n=":enum"/></meta>
	</class>
	<typedef path="echo.data.BodyOptions" params="" file="/home/travis/build/AustinEast/echo/echo/data/Options.hx" module="echo.data.Options"><a>
	<y>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>* The Body's position on the Y axis.</haxe_doc>
	</y>
	<x>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>* The Body's position on the X axis.</haxe_doc>
	</x>
	<velocity_y>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>* The units/second that a `Body` moves on the Y axis.</haxe_doc>
	</velocity_y>
	<velocity_x>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>* The units/second that a `Body` moves on the X axis.</haxe_doc>
	</velocity_x>
	<shapes>
		<x path="Null"><c path="Array"><t path="echo.data.ShapeOptions"/></c></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>* Defines an array of Shapes that the Body will use as colliders</haxe_doc>
	</shapes>
	<shape_instances>
		<x path="Null"><c path="Array"><c path="echo.Shape"/></c></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>* An array of Shape instances that the Body will use as colliders</haxe_doc>
	</shape_instances>
	<shape_instance>
		<x path="Null"><c path="echo.Shape"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>* A Shape instance that the Body will use as a collider</haxe_doc>
	</shape_instance>
	<shape>
		<x path="Null"><t path="echo.data.ShapeOptions"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>* Defines a Shape that the Body will use as a collider</haxe_doc>
	</shape>
	<rotational_velocity>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>* The units/second that a `Body` will rotate. Currently is not Implemented.</haxe_doc>
	</rotational_velocity>
	<rotational_drag>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>* A measure of how fast a Body will move its `rotational_velocity` towards 0.</haxe_doc>
	</rotational_drag>
	<rotation>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>* The Body's rotation.</haxe_doc>
	</rotation>
	<max_velocity_y>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>* The maximum velocity range that a `Body` can have on the Y axis. If set to 0, the Body has no restrictions on how fast it can move.
   *
   * Note: this is calculated separately from a Body's `max_velocity_length`, so be careful when applying both.</haxe_doc>
	</max_velocity_y>
	<max_velocity_x>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>* The maximum velocity range that a `Body` can have on the X axis. If set to 0, the Body has no restrictions on how fast it can move.
   *
   * Note: this is calculated separately from a Body's `max_velocity_length`, so be careful when applying both.</haxe_doc>
	</max_velocity_x>
	<max_velocity_length>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>* The maximum velocity that a `Body` can have along the velocity's length. If set to 0, the Body has no restrictions on how fast it can move.
   *
   * Note: this is calculated separately from a Body's `max_velocity_x` or 'max_velocity_y', so be careful when applying both.</haxe_doc>
	</max_velocity_length>
	<max_rotational_velocity>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>* The maximum rotational velocity range that a `Body` can have. Currently not Implemented.
   *
   * If set to 0, the Body has no restrictions on how fast it can rotate.</haxe_doc>
	</max_rotational_velocity>
	<mass>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>* Body's mass. Affects how the Body reacts to Collisions and Velocity.
   *
   * The higher a Body's mass, the more resistant it is to those forces.
   * If a Body's mass is set to `0`, it becomes static - unmovable by forces and collisions.</haxe_doc>
	</mass>
	<kinematic>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>* Flag to set how a Body is affected by Collisions.
   *
   * If set to true, the Body will still Collide and move through the world, but it will not be moved by external collision forces.
   * This is useful for things like moving platforms.</haxe_doc>
	</kinematic>
	<gravity_scale>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>* Percentage value that represents how much a World's gravity affects the Body.</haxe_doc>
	</gravity_scale>
	<elasticity>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>* Value to determine how much of a Body's `velocity` should be retained during collisions (or how much should the `Body` "bounce" in other words).</haxe_doc>
	</elasticity>
	<drag_y>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>* A measure of how fast a Body will move its velocity towards 0 on the Y axis when there is no acceleration.
   *
   * Note: this is calculated separately from a Body's `drag_length`, so be careful when applying both.</haxe_doc>
	</drag_y>
	<drag_x>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>* A measure of how fast a Body will move its velocity towards 0 on the X axis when there is no acceleration.
   *
   * Note: this is calculated separately from a Body's `drag_length`, so be careful when applying both.</haxe_doc>
	</drag_x>
	<drag_length>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>* A measure of how fast a Body will move its velocity towards 0 along the velocity's length, when there is no acceleration.
   *
   * Note: this is calculated separately from a Body's `drag`, so be careful when applying both.</haxe_doc>
	</drag_length>
</a></typedef>
	<typedef path="echo.data.WorldOptions" params="" file="/home/travis/build/AustinEast/echo/echo/data/Options.hx" module="echo.data.Options"><a>
	<y>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>* The World's position on the Y axis.</haxe_doc>
	</y>
	<x>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>* The World's position on the X axis.</haxe_doc>
	</x>
	<width>
		<x path="Float"/>
		<haxe_doc>* Width of the World, extending right from the World's X position.</haxe_doc>
	</width>
	<members>
		<x path="Null"><c path="Array"><c path="echo.Body"/></c></x>
		<meta><m n=":optional"/></meta>
	</members>
	<listeners>
		<x path="Null"><c path="Array"><c path="echo.Listener"/></c></x>
		<meta><m n=":optional"/></meta>
	</listeners>
	<iterations>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>* The amount of iterations that occur each time the World is stepped. The higher the number, the more stable the Physics Simulation will be, at the cost of performance.</haxe_doc>
	</iterations>
	<history>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>* The number of states to preserve in the World's history.</haxe_doc>
	</history>
	<height>
		<x path="Float"/>
		<haxe_doc>* Height of the World, extending down from the World's Y position.</haxe_doc>
	</height>
	<gravity_y>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>* The amount of acceleration on the Y axis applied to each `Body` member every Step.</haxe_doc>
	</gravity_y>
	<gravity_x>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>* The amount of acceleration on the X axis applied to each `Body` member every Step.</haxe_doc>
	</gravity_x>
</a></typedef>
	<typedef path="echo.data.ListenerOptions" params="" file="/home/travis/build/AustinEast/echo/echo/data/Options.hx" module="echo.data.Options"><a>
	<stay>
		<x path="Null"><f a="::">
	<c path="echo.Body"/>
	<c path="echo.Body"/>
	<c path="Array"><c path="echo.data.CollisionData"/></c>
	<x path="Void"/>
</f></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>* A callback function that is called on frames when two Bodies are continuing to collide.</haxe_doc>
	</stay>
	<separate>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>* Flag that determines if Collisions found by this listener should separate the Bodies. Defaults to `true`.</haxe_doc>
	</separate>
	<percent_correction>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>* Percentage of correction along the collision normal to be applied to seperating bodies. Helps prevent objects sinking into each other.</haxe_doc>
	</percent_correction>
	<exit>
		<x path="Null"><f a=":">
	<c path="echo.Body"/>
	<c path="echo.Body"/>
	<x path="Void"/>
</f></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>* A callback function that is called when a collision between two Bodies ends.</haxe_doc>
	</exit>
	<enter>
		<x path="Null"><f a="::">
	<c path="echo.Body"/>
	<c path="echo.Body"/>
	<c path="Array"><c path="echo.data.CollisionData"/></c>
	<x path="Void"/>
</f></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>* A callback function that is called on the first frame that a collision starts.</haxe_doc>
	</enter>
	<correction_threshold>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>* Threshold determining how close two separating bodies must be before position correction occurs. Helps reduce jitter.</haxe_doc>
	</correction_threshold>
	<condition>
		<x path="Null"><f a="::">
	<c path="echo.Body"/>
	<c path="echo.Body"/>
	<c path="Array"><c path="echo.data.CollisionData"/></c>
	<x path="Bool"/>
</f></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>* A callback function that allows extra logic to be run on a potential collision.
   *
   * If it returns true, the collision is valid. Otherwise the collision is discarded and no physics resolution/collision callbacks occur</haxe_doc>
	</condition>
</a></typedef>
	<typedef path="echo.data.ShapeOptions" params="" file="/home/travis/build/AustinEast/echo/echo/data/Options.hx" module="echo.data.Options"><a>
	<width>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>* If the Shape is a Rect, it's width will be taken from this value. Otherwise this is ignored.
   *
   * If this value is set and height isnt, the Rect will use this value for it's height.</haxe_doc>
	</width>
	<vertices>
		<x path="Null"><c path="Array"><x path="hxmath.math.Vector2"/></c></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>* If the Shape is a Polygon, this will create one in the shape of the vectors passed in. Otherwise this is ignored.</haxe_doc>
	</vertices>
	<type>
		<x path="Null"><x path="echo.data.ShapeType"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>* Enum describing the Shape to create. Currently supports RECT and CIRCLE.</haxe_doc>
	</type>
	<solid>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</solid>
	<sides>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>* If the Shape is a Polygon, this will determine how many faces the Polygon will generate. Otherwise this is ignored.
   *
   * If `vertices` is set, this will be overriden.</haxe_doc>
	</sides>
	<rotation>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>* The Shape's rotation.</haxe_doc>
	</rotation>
	<radius>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>* If the Shape is a Circle or Polygon, it's radius will be taken from this value. Otherwise this is ignored.
   *
   * For Polygon's, this value is ignored if `vertices` is set.</haxe_doc>
	</radius>
	<offset_y>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>* The Shape's offset from it's parent Body on the Y-Axis.</haxe_doc>
	</offset_y>
	<offset_x>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>* The Shape's offset from it's parent Body on the X-Axis.</haxe_doc>
	</offset_x>
	<height>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>* If the Shape is a Rect, it's height will be taken from this value. Otherwise this is ignored.
   *
   * If this value isnt set and width isnt, the Rect will use its width value for it's height.</haxe_doc>
	</height>
</a></typedef>
	<typedef path="echo.data.RectOptions" params="" file="/home/travis/build/AustinEast/echo/echo/data/Options.hx" module="echo.data.Options"><a>
	<y><x path="Float"/></y>
	<x><x path="Float"/></x>
	<width><x path="Float"/></width>
	<height><x path="Float"/></height>
</a></typedef>
	<typedef path="echo.data.CircleOptions" params="" file="/home/travis/build/AustinEast/echo/echo/data/Options.hx" module="echo.data.Options"><a>
	<y><x path="Float"/></y>
	<x><x path="Float"/></x>
	<radius><x path="Float"/></radius>
</a></typedef>
	<typedef path="echo.data.PolygonOptions" params="" file="/home/travis/build/AustinEast/echo/echo/data/Options.hx" module="echo.data.Options"><a>
	<y><x path="Float"/></y>
	<x><x path="Float"/></x>
	<vertices><c path="Array"><x path="hxmath.math.Vector2"/></c></vertices>
	<rotation><x path="Float"/></rotation>
</a></typedef>
	<typedef path="echo.data.RayOptions" params="" file="/home/travis/build/AustinEast/echo/echo/data/Options.hx" module="echo.data.Options"><a>
	<y><x path="Float"/></y>
	<x><x path="Float"/></x>
	<dy><x path="Float"/></dy>
	<dx><x path="Float"/></dx>
</a></typedef>
	<abstract path="echo.data.ShapeType" params="" file="/home/travis/build/AustinEast/echo/echo/data/Types.hx" module="echo.data.Types">
		<from><icast><x path="Int"/></icast></from>
		<this><x path="Int"/></this>
		<to><icast><x path="Int"/></icast></to>
		<meta><m n=":enum"/></meta>
		<impl><class path="echo.data._Types.ShapeType_Impl_" params="" file="/home/travis/build/AustinEast/echo/echo/data/Types.hx" private="1" module="echo.data.Types" extern="1">
	<RECT public="1" get="inline" set="null" expr="cast 0" line="1" static="1">
		<x path="echo.data.ShapeType"/>
		<meta>
			<m n=":value"><e>cast 0</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</RECT>
	<CIRCLE public="1" get="inline" set="null" expr="cast 1" line="1" static="1">
		<x path="echo.data.ShapeType"/>
		<meta>
			<m n=":value"><e>cast 1</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</CIRCLE>
	<POLYGON public="1" get="inline" set="null" expr="cast 2" line="1" static="1">
		<x path="echo.data.ShapeType"/>
		<meta>
			<m n=":value"><e>cast 2</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</POLYGON>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="echo.data._Types.ShapeType_Impl_" params="" file="/home/travis/build/AustinEast/echo/echo/data/Types.hx" private="1" module="echo.data.Types" extern="1">
		<RECT public="1" get="inline" set="null" expr="cast 0" line="1" static="1">
			<x path="echo.data.ShapeType"/>
			<meta>
				<m n=":value"><e>cast 0</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</RECT>
		<CIRCLE public="1" get="inline" set="null" expr="cast 1" line="1" static="1">
			<x path="echo.data.ShapeType"/>
			<meta>
				<m n=":value"><e>cast 1</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</CIRCLE>
		<POLYGON public="1" get="inline" set="null" expr="cast 2" line="1" static="1">
			<x path="echo.data.ShapeType"/>
			<meta>
				<m n=":value"><e>cast 2</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</POLYGON>
		<meta><m n=":enum"/></meta>
	</class>
	<class path="echo.shape.Circle" params="" file="/home/travis/build/AustinEast/echo/echo/shape/Circle.hx">
		<extends path="echo.Shape"/>
		<implements path="echo.util.IPooled"/>
		<pool public="1" get="accessor" set="null" static="1"><c path="echo.util.IPool"><c path="echo.shape.Circle"/></c></pool>
		<_pool expr="new Pool&lt;Circle&gt;(Circle)" line="14" static="1">
			<c path="echo.util.Pool"><c path="echo.shape.Circle"/></c>
			<meta><m n=":value"><e><![CDATA[new Pool<Circle>(Circle)]]></e></m></meta>
		</_pool>
		<get public="1" get="inline" set="null" line="27" static="1">
			<f a="?x:?y:?radius:?rotation" v="0:0:1:0">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<c path="echo.shape.Circle"/>
			</f>
			<meta><m n=":value"><e>{ rotation : 0, radius : 1, y : 0, x : 0 }</e></m></meta>
			<haxe_doc>* Gets a Cirlce from the pool, or creates a new one if none are available. Call `put()` on the Cirlce to place it back in the pool.
   * @param x
   * @param y
   * @param radius
   * @param rotation
   * @return Circle</haxe_doc>
		</get>
		<get_pool set="method" line="99" static="1"><f a=""><c path="echo.util.IPool"><c path="echo.shape.Circle"/></c></f></get_pool>
		<radius public="1"><x path="Float"/></radius>
		<diameter public="1" get="accessor" set="accessor"><x path="Float"/></diameter>
		<pooled public="1"><x path="Bool"/></pooled>
		<put public="1" get="inline" set="null" line="40" override="1"><f a=""><x path="Void"/></f></put>
		<set public="1" get="inline" set="null" line="48">
			<f a="?x:?y:?radius:?rotation" v="0:0:1:0">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<c path="echo.shape.Circle"/>
			</f>
			<meta><m n=":value"><e>{ rotation : 0, radius : 1, y : 0, x : 0 }</e></m></meta>
		</set>
		<load public="1" get="inline" set="null" line="56"><f a="circle">
	<c path="echo.shape.Circle"/>
	<c path="echo.shape.Circle"/>
</f></load>
		<bounds public="1" get="inline" set="null" line="58" override="1"><f a="?aabb">
	<c path="echo.util.AABB"/>
	<c path="echo.util.AABB"/>
</f></bounds>
		<clone public="1" set="method" line="60" override="1"><f a=""><c path="echo.shape.Circle"/></f></clone>
		<contains public="1" set="method" line="62" override="1"><f a="v">
	<x path="hxmath.math.Vector2"/>
	<x path="Bool"/>
</f></contains>
		<intersect public="1" set="method" line="64" override="1"><f a="l">
	<c path="echo.Line"/>
	<x path="Null"><c path="echo.data.IntersectionData"/></x>
</f></intersect>
		<overlaps public="1" get="inline" set="null" line="66" override="1"><f a="s">
	<c path="echo.Shape"/>
	<x path="Bool"/>
</f></overlaps>
		<collides public="1" get="inline" set="null" line="75" override="1"><f a="s">
	<c path="echo.Shape"/>
	<x path="Null"><c path="echo.data.CollisionData"/></x>
</f></collides>
		<collide_rect get="inline" set="null" line="77" override="1"><f a="r">
	<c path="echo.shape.Rect"/>
	<x path="Null"><c path="echo.data.CollisionData"/></x>
</f></collide_rect>
		<collide_circle get="inline" set="null" line="79" override="1"><f a="c">
	<c path="echo.shape.Circle"/>
	<x path="Null"><c path="echo.data.CollisionData"/></x>
</f></collide_circle>
		<collide_polygon get="inline" set="null" line="81" override="1"><f a="p">
	<c path="echo.shape.Polygon"/>
	<x path="Null"><c path="echo.data.CollisionData"/></x>
</f></collide_polygon>
		<sync public="1" get="inline" set="null" line="83" override="1"><f a=""><x path="Void"/></f></sync>
		<get_diameter get="inline" set="null" line="101"><f a=""><x path="Float"/></f></get_diameter>
		<get_top get="inline" set="null" line="103" override="1"><f a=""><x path="Float"/></f></get_top>
		<get_bottom get="inline" set="null" line="105" override="1"><f a=""><x path="Float"/></f></get_bottom>
		<get_left get="inline" set="null" line="107" override="1"><f a=""><x path="Float"/></f></get_left>
		<get_right get="inline" set="null" line="109" override="1"><f a=""><x path="Float"/></f></get_right>
		<set_diameter get="inline" set="null" line="112"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_diameter>
		<new get="inline" set="null" line="34"><f a=""><x path="Void"/></f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="echo.shape.Polygon" params="" file="/home/travis/build/AustinEast/echo/echo/shape/Polygon.hx">
		<extends path="echo.Shape"/>
		<implements path="echo.util.IPooled"/>
		<pool public="1" get="accessor" set="null" static="1"><c path="echo.util.IPool"><c path="echo.shape.Polygon"/></c></pool>
		<_pool expr="new Pool&lt;Polygon&gt;(Polygon)" line="16" static="1">
			<c path="echo.util.Pool"><c path="echo.shape.Polygon"/></c>
			<meta><m n=":value"><e><![CDATA[new Pool<Polygon>(Polygon)]]></e></m></meta>
		</_pool>
		<get public="1" get="inline" set="null" line="60" static="1">
			<f a="?x:?y:?sides:?radius:?rotation" v="0:0:3:1:0">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
				<c path="echo.shape.Polygon"/>
			</f>
			<meta><m n=":value"><e>{ rotation : 0, radius : 1, sides : 3, y : 0, x : 0 }</e></m></meta>
			<haxe_doc>* Gets a Polygon from the pool, or creates a new one if none are available. Call `put()` on the Polygon to place it back in the pool.
   * @param x
   * @param y
   * @param sides
   * @param radius
   * @param rotation
   * @return Polygon</haxe_doc>
		</get>
		<get_from_vertices public="1" get="inline" set="null" line="87" static="1">
			<f a="?x:?y:?rotation:?vertices" v="0:0:0:">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<c path="Array"><x path="hxmath.math.Vector2"/></c>
				<c path="echo.shape.Polygon"/>
			</f>
			<meta><m n=":value"><e>{ rotation : 0, y : 0, x : 0 }</e></m></meta>
			<haxe_doc>* Gets a Polygon from the pool, or creates a new one if none are available. Call `put()` on the Polygon to place it back in the pool.
   * @param x
   * @param y
   * @param rotation
   * @param vertices
   * @return Polygon</haxe_doc>
		</get_from_vertices>
		<get_from_rect public="1" get="inline" set="null" line="98" static="1">
			<f a="rect">
				<c path="echo.shape.Rect"/>
				<c path="echo.shape.Polygon"/>
			</f>
			<haxe_doc>* Gets a Polygon from the pool, or creates a new one if none are available. Call `put()` on the Polygon to place it back in the pool.
   * @param rect
   * @return Polygon return _pool.get().set_from_rect(rect)</haxe_doc>
		</get_from_rect>
		<get_pool set="method" line="312" static="1"><f a=""><c path="echo.util.IPool"><c path="echo.shape.Polygon"/></c></f></get_pool>
		<count public="1" set="null">
			<x path="Int"/>
			<haxe_doc>* The amount of vertices in the Polygon.</haxe_doc>
		</count>
		<vertices public="1" get="accessor" set="null">
			<c path="Array"><x path="hxmath.math.Vector2"/></c>
			<haxe_doc>* The Polygon's vertices adjusted for it's rotation.
   *
   * This Array represents a cache'd value, so changes to this Array will be overwritten.
   * Use `set_vertice()` or `set_vertices()` to edit this Polygon's vertices.</haxe_doc>
		</vertices>
		<normals public="1" get="accessor" set="null">
			<c path="Array"><x path="hxmath.math.Vector2"/></c>
			<haxe_doc>* The Polygon's computed normals.
   *
   * This Array represents a cache'd value, so changes to this Array will be overwritten.
   * Use `set_vertice()` or `set_vertices()` to edit this Polygon's normals.</haxe_doc>
		</normals>
		<pooled public="1"><x path="Bool"/></pooled>
		<local_frame><x path="hxmath.frames.Frame2"/></local_frame>
		<local_vertices><c path="Array"><x path="hxmath.math.Vector2"/></c></local_vertices>
		<_vertices><c path="Array"><x path="hxmath.math.Vector2"/></c></_vertices>
		<_normals><c path="Array"><x path="hxmath.math.Vector2"/></c></_normals>
		<_bounds><c path="echo.util.AABB"/></_bounds>
		<dirty_vertices><x path="Bool"/></dirty_vertices>
		<dirty_bounds><x path="Bool"/></dirty_bounds>
		<put public="1" get="inline" set="null" line="108" override="1"><f a=""><x path="Void"/></f></put>
		<set public="1" get="inline" set="null" line="116">
			<f a="?x:?y:?rotation:?vertices" v="0:0:0:">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<c path="Array"><x path="hxmath.math.Vector2"/></c>
				<c path="echo.shape.Polygon"/>
			</f>
			<meta><m n=":value"><e>{ rotation : 0, y : 0, x : 0 }</e></m></meta>
		</set>
		<set_from_rect public="1" get="inline" set="null" line="126"><f a="rect">
	<c path="echo.shape.Rect"/>
	<c path="echo.shape.Polygon"/>
</f></set_from_rect>
		<load public="1" get="inline" set="null" line="153"><f a="polygon">
	<c path="echo.shape.Polygon"/>
	<c path="echo.shape.Polygon"/>
</f></load>
		<bounds public="1" get="inline" set="null" line="155" override="1"><f a="?aabb">
	<c path="echo.util.AABB"/>
	<c path="echo.util.AABB"/>
</f></bounds>
		<clone public="1" set="method" line="179" override="1"><f a=""><c path="echo.shape.Polygon"/></f></clone>
		<contains public="1" set="method" line="181" override="1"><f a="v">
	<x path="hxmath.math.Vector2"/>
	<x path="Bool"/>
</f></contains>
		<intersect public="1" set="method" line="183" override="1"><f a="l">
	<c path="echo.Line"/>
	<x path="Null"><c path="echo.data.IntersectionData"/></x>
</f></intersect>
		<overlaps public="1" get="inline" set="null" line="185" override="1"><f a="s">
	<c path="echo.Shape"/>
	<x path="Bool"/>
</f></overlaps>
		<collides public="1" get="inline" set="null" line="194" override="1"><f a="s">
	<c path="echo.Shape"/>
	<x path="Null"><c path="echo.data.CollisionData"/></x>
</f></collides>
		<collide_rect get="inline" set="null" line="196" override="1"><f a="r">
	<c path="echo.shape.Rect"/>
	<x path="Null"><c path="echo.data.CollisionData"/></x>
</f></collide_rect>
		<collide_circle get="inline" set="null" line="198" override="1"><f a="c">
	<c path="echo.shape.Circle"/>
	<x path="Null"><c path="echo.data.CollisionData"/></x>
</f></collide_circle>
		<collide_polygon get="inline" set="null" line="200" override="1"><f a="p">
	<c path="echo.shape.Polygon"/>
	<x path="Null"><c path="echo.data.CollisionData"/></x>
</f></collide_polygon>
		<sync public="1" get="inline" set="null" line="202" override="1"><f a=""><x path="Void"/></f></sync>
		<get_top get="inline" set="null" line="220" override="1"><f a=""><x path="Float"/></f></get_top>
		<get_bottom get="inline" set="null" line="229" override="1"><f a=""><x path="Float"/></f></get_bottom>
		<get_left get="inline" set="null" line="238" override="1"><f a=""><x path="Float"/></f></get_left>
		<get_right get="inline" set="null" line="247" override="1"><f a=""><x path="Float"/></f></get_right>
		<to_rect public="1" get="inline" set="null" line="257"><f a=""><c path="echo.shape.Rect"/></f></to_rect>
		<set_vertice public="1" get="inline" set="null" line="264">
			<f a="index:?x:?y" v=":0:0">
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ y : 0, x : 0 }</e></m></meta>
			<haxe_doc>* Sets the vertice at the desired index.
   * @param index
   * @param x
   * @param y</haxe_doc>
		</set_vertice>
		<set_vertices public="1" get="inline" set="null" line="272"><f a="?vertices:?count">
	<c path="Array"><x path="hxmath.math.Vector2"/></c>
	<x path="Int"/>
	<x path="Void"/>
</f></set_vertices>
		<transform_vertices get="inline" set="null" line="281"><f a=""><x path="Void"/></f></transform_vertices>
		<compute_normals get="inline" set="null" line="299">
			<f a=""><x path="Void"/></f>
			<haxe_doc>*  Compute face normals</haxe_doc>
		</compute_normals>
		<get_vertices get="inline" set="null" line="314"><f a=""><c path="Array"><x path="hxmath.math.Vector2"/></c></f></get_vertices>
		<get_normals get="inline" set="null" line="324"><f a=""><c path="Array"><x path="hxmath.math.Vector2"/></c></f></get_normals>
		<new get="inline" set="null" line="143"><f a="?vertices">
	<c path="Array"><x path="hxmath.math.Vector2"/></c>
	<x path="Void"/>
</f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="echo.shape.Rect" params="" file="/home/travis/build/AustinEast/echo/echo/shape/Rect.hx">
		<extends path="echo.Shape"/>
		<implements path="echo.util.IPooled"/>
		<pool public="1" get="accessor" set="null" static="1"><c path="echo.util.IPool"><c path="echo.shape.Rect"/></c></pool>
		<_pool expr="new Pool&lt;Rect&gt;(Rect)" line="16" static="1">
			<c path="echo.util.Pool"><c path="echo.shape.Rect"/></c>
			<meta><m n=":value"><e><![CDATA[new Pool<Rect>(Rect)]]></e></m></meta>
		</_pool>
		<get public="1" get="inline" set="null" line="56" static="1">
			<f a="?x:?y:?width:?height:?rotation" v="0:0:1:0:0">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<c path="echo.shape.Rect"/>
			</f>
			<meta><m n=":value"><e>{ rotation : 0, height : 0, width : 1, y : 0, x : 0 }</e></m></meta>
			<haxe_doc>* Gets a Rect from the pool, or creates a new one if none are available. Call `put()` on the Rect to place it back in the pool.
   *
   * Note - The X and Y positions represent the center of the Rect. To set the Rect from its Top-Left origin, `Rect.get_from_min_max()` is available.
   * @param x The centered X position of the Rect.
   * @param y The centered Y position of the Rect.
   * @param width The width of the Rect.
   * @param height The height of the Rect.
   * @param rotation The rotation of the Rect.
   * @return Rect</haxe_doc>
		</get>
		<get_from_min_max public="1" get="inline" set="null" line="70" static="1">
			<f a="min_x:min_y:max_x:max_y">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<c path="echo.shape.Rect"/>
			</f>
			<haxe_doc>* Gets a Rect from the pool, or creates a new one if none are available. Call `put()` on the Rect to place it back in the pool.
   * @param min_x
   * @param min_y
   * @param max_x
   * @param max_y
   * @return Rect</haxe_doc>
		</get_from_min_max>
		<get_pool set="method" line="191" static="1"><f a=""><c path="echo.util.IPool"><c path="echo.shape.Rect"/></c></f></get_pool>
		<ex public="1" set="accessor">
			<x path="Float"/>
			<haxe_doc>* The half-width of the Rectangle.</haxe_doc>
		</ex>
		<ey public="1" set="accessor">
			<x path="Float"/>
			<haxe_doc>* The half-height of the Rectangle.</haxe_doc>
		</ey>
		<width public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<haxe_doc>* The width of the Rectangle.</haxe_doc>
		</width>
		<height public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<haxe_doc>* The height of the Rectangle.</haxe_doc>
		</height>
		<min public="1" get="accessor" set="null">
			<x path="hxmath.math.Vector2"/>
			<haxe_doc>* The top-left position of the Rectangle.</haxe_doc>
		</min>
		<max public="1" get="accessor" set="null">
			<x path="hxmath.math.Vector2"/>
			<haxe_doc>* The bottom-right position of the Rectangle.</haxe_doc>
		</max>
		<pooled public="1"><x path="Bool"/></pooled>
		<transformed_rect public="1" set="null"><x path="Null"><c path="echo.shape.Polygon"/></x></transformed_rect>
		<put public="1" set="method" line="84" override="1"><f a=""><x path="Void"/></f></put>
		<set public="1" get="inline" set="null" line="96">
			<f a="?x:?y:?width:?height:?rotation" v="0:0:1:0:0">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<c path="echo.shape.Rect"/>
			</f>
			<meta><m n=":value"><e>{ rotation : 0, height : 0, width : 1, y : 0, x : 0 }</e></m></meta>
		</set>
		<set_from_min_max public="1" get="inline" set="null" line="105"><f a="min_x:min_y:max_x:max_y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<c path="echo.shape.Rect"/>
</f></set_from_min_max>
		<load public="1" get="inline" set="null" line="109"><f a="rect">
	<c path="echo.shape.Rect"/>
	<c path="echo.shape.Rect"/>
</f></load>
		<to_aabb public="1" set="method" line="118">
			<f a="?put_self" v="false">
				<x path="Bool"/>
				<c path="echo.util.AABB"/>
			</f>
			<meta><m n=":value"><e>{ put_self : false }</e></m></meta>
		</to_aabb>
		<to_polygon public="1" set="method" line="127">
			<f a="?put_self" v="false">
				<x path="Bool"/>
				<c path="echo.shape.Polygon"/>
			</f>
			<meta><m n=":value"><e>{ put_self : false }</e></m></meta>
		</to_polygon>
		<bounds public="1" get="inline" set="null" line="136" override="1"><f a="?aabb">
	<c path="echo.util.AABB"/>
	<c path="echo.util.AABB"/>
</f></bounds>
		<clone public="1" get="inline" set="null" line="141" override="1"><f a=""><c path="echo.shape.Rect"/></f></clone>
		<contains public="1" get="inline" set="null" line="143" override="1"><f a="p">
	<x path="hxmath.math.Vector2"/>
	<x path="Bool"/>
</f></contains>
		<intersect public="1" get="inline" set="null" line="145" override="1"><f a="l">
	<c path="echo.Line"/>
	<x path="Null"><c path="echo.data.IntersectionData"/></x>
</f></intersect>
		<overlaps public="1" get="inline" set="null" line="147" override="1"><f a="s">
	<c path="echo.Shape"/>
	<x path="Bool"/>
</f></overlaps>
		<collides public="1" get="inline" set="null" line="156" override="1"><f a="s">
	<c path="echo.Shape"/>
	<x path="Null"><c path="echo.data.CollisionData"/></x>
</f></collides>
		<collide_rect get="inline" set="null" line="158" override="1"><f a="r">
	<c path="echo.shape.Rect"/>
	<x path="Null"><c path="echo.data.CollisionData"/></x>
</f></collide_rect>
		<collide_circle get="inline" set="null" line="160" override="1"><f a="c">
	<c path="echo.shape.Circle"/>
	<x path="Null"><c path="echo.data.CollisionData"/></x>
</f></collide_circle>
		<collide_polygon get="inline" set="null" line="162" override="1"><f a="p">
	<c path="echo.shape.Polygon"/>
	<x path="Null"><c path="echo.data.CollisionData"/></x>
</f></collide_polygon>
		<sync public="1" get="inline" set="null" line="164" override="1"><f a=""><x path="Void"/></f></sync>
		<set_parent public="1" set="method" line="185" override="1"><f a="?frame">
	<x path="hxmath.frames.Frame2"/>
	<x path="Void"/>
</f></set_parent>
		<get_width get="inline" set="null" line="193"><f a=""><x path="Float"/></f></get_width>
		<get_height get="inline" set="null" line="195"><f a=""><x path="Float"/></f></get_height>
		<get_min set="method" line="197"><f a=""><x path="hxmath.math.Vector2"/></f></get_min>
		<get_max set="method" line="199"><f a=""><x path="hxmath.math.Vector2"/></f></get_max>
		<get_top get="inline" set="null" line="201" override="1"><f a=""><x path="Float"/></f></get_top>
		<get_bottom get="inline" set="null" line="206" override="1"><f a=""><x path="Float"/></f></get_bottom>
		<get_left get="inline" set="null" line="211" override="1"><f a=""><x path="Float"/></f></get_left>
		<get_right get="inline" set="null" line="216" override="1"><f a=""><x path="Float"/></f></get_right>
		<set_ex get="inline" set="null" line="222"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_ex>
		<set_ey get="inline" set="null" line="228"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_ey>
		<set_width get="inline" set="null" line="234"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_width>
		<set_height get="inline" set="null" line="236"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_height>
		<new get="inline" set="null" line="77"><f a=""><x path="Void"/></f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="echo.util.AABB" params="" file="/home/travis/build/AustinEast/echo/echo/util/AABB.hx">
		<implements path="echo.util.IPooled"/>
		<pool public="1" get="accessor" set="null" static="1"><c path="echo.util.IPool"><c path="echo.util.AABB"/></c></pool>
		<_pool expr="new Pool&lt;AABB&gt;(AABB)" line="8" static="1">
			<c path="echo.util.Pool"><c path="echo.util.AABB"/></c>
			<meta><m n=":value"><e><![CDATA[new Pool<AABB>(AABB)]]></e></m></meta>
		</_pool>
		<get public="1" get="inline" set="null" line="29" static="1">
			<f a="?x:?y:?width:?height" v="0:0:1:0">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<c path="echo.util.AABB"/>
			</f>
			<meta><m n=":value"><e>{ height : 0, width : 1, y : 0, x : 0 }</e></m></meta>
			<haxe_doc>* Gets an AABB from the pool, or creates a new one if none are available. Call `put()` on the AABB to place it back in the pool.
   *
   * Note - The X and Y positions represent the center of the AABB. To set the AABB from its Top-Left origin, `AABB.get_from_min_max()` is available.
   * @param x The centered X position of the AABB.
   * @param y The centered Y position of the AABB.
   * @param width The width of the AABB.
   * @param height The height of the AABB.
   * @return AABB</haxe_doc>
		</get>
		<get_from_min_max public="1" get="inline" set="null" line="43" static="1">
			<f a="min_x:min_y:max_x:max_y">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<c path="echo.util.AABB"/>
			</f>
			<haxe_doc>* Gets an AABB from the pool, or creates a new one if none are available. Call `put()` on the AABB to place it back in the pool.
   * @param min_x
   * @param min_y
   * @param max_x
   * @param max_y
   * @return AABB</haxe_doc>
		</get_from_min_max>
		<get_pool set="method" line="123" static="1"><f a=""><c path="echo.util.IPool"><c path="echo.util.AABB"/></c></f></get_pool>
		<min_x public="1"><x path="Float"/></min_x>
		<max_x public="1"><x path="Float"/></max_x>
		<min_y public="1"><x path="Float"/></min_y>
		<max_y public="1"><x path="Float"/></max_y>
		<width public="1" get="accessor" set="null"><x path="Float"/></width>
		<height public="1" get="accessor" set="null"><x path="Float"/></height>
		<pooled public="1"><x path="Bool"/></pooled>
		<set public="1" get="inline" set="null" line="66">
			<f a="?x:?y:?width:?height" v="0:0:1:1">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<c path="echo.util.AABB"/>
			</f>
			<meta><m n=":value"><e>{ height : 1, width : 1, y : 0, x : 0 }</e></m></meta>
			<haxe_doc>* Sets the values on this AABB.
   *
   * Note - The X and Y positions represent the center of the AABB. To set the AABB from its Top-Left origin, `AABB.set_from_min_max()` is available.
   * @param x The centered X position of the AABB.
   * @param y The centered Y position of the AABB.
   * @param width The width of the AABB.
   * @param height The height of the AABB.
   * @return AABB</haxe_doc>
		</set>
		<set_from_min_max public="1" get="inline" set="null" line="76"><f a="min_x:min_y:max_x:max_y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<c path="echo.util.AABB"/>
</f></set_from_min_max>
		<to_rect public="1" get="inline" set="null" line="84">
			<f a="?put_self" v="false">
				<x path="Bool"/>
				<c path="echo.shape.Rect"/>
			</f>
			<meta><m n=":value"><e>{ put_self : false }</e></m></meta>
		</to_rect>
		<overlaps public="1" get="inline" set="null" line="89"><f a="other">
	<c path="echo.util.AABB"/>
	<x path="Bool"/>
</f></overlaps>
		<load public="1" get="inline" set="null" line="93"><f a="aabb">
	<c path="echo.util.AABB"/>
	<c path="echo.util.AABB"/>
</f></load>
		<add public="1" get="inline" set="null" line="104">
			<f a="aabb">
				<c path="echo.util.AABB"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Adds the bounds of an AABB into this AABB.
   * @param aabb</haxe_doc>
		</add>
		<clone public="1" get="inline" set="null" line="111"><f a=""><c path="echo.util.AABB"/></f></clone>
		<put public="1" set="method" line="115"><f a=""><x path="Void"/></f></put>
		<get_width get="inline" set="null" line="125"><f a=""><x path="Float"/></f></get_width>
		<get_height get="inline" set="null" line="127"><f a=""><x path="Float"/></f></get_height>
		<new get="inline" set="null" line="50"><f a=""><x path="Void"/></f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<abstract path="echo.util.BodyOrBodies" params="" file="/home/travis/build/AustinEast/echo/echo/util/BodyOrBodies.hx">
		<from>
			<icast><e path="haxe.ds.Either">
	<c path="echo.Body"/>
	<c path="Array"><c path="echo.Body"/></c>
</e></icast>
			<icast field="from_body"><c path="echo.Body"/></icast>
			<icast field="from_bodies"><c path="Array"><c path="echo.Body"/></c></icast>
		</from>
		<this><e path="haxe.ds.Either">
	<c path="echo.Body"/>
	<c path="Array"><c path="echo.Body"/></c>
</e></this>
		<to>
			<icast><e path="haxe.ds.Either">
	<c path="echo.Body"/>
	<c path="Array"><c path="echo.Body"/></c>
</e></icast>
			<icast field="to_body"><c path="echo.Body"/></icast>
			<icast field="to_bodies"><c path="Array"><c path="echo.Body"/></c></icast>
		</to>
		<haxe_doc>* Abstract representing a `Body` or and Array of Bodies.</haxe_doc>
		<impl><class path="echo.util._BodyOrBodies.BodyOrBodies_Impl_" params="" file="/home/travis/build/AustinEast/echo/echo/util/BodyOrBodies.hx" private="1" module="echo.util.BodyOrBodies">
	<from_body get="inline" set="null" line="8" static="1">
		<f a="a">
			<c path="echo.Body"/>
			<x path="echo.util.BodyOrBodies"/>
		</f>
		<meta><m n=":from"/></meta>
	</from_body>
	<from_bodies get="inline" set="null" line="12" static="1">
		<f a="b">
			<c path="Array"><c path="echo.Body"/></c>
			<x path="echo.util.BodyOrBodies"/>
		</f>
		<meta><m n=":from"/></meta>
	</from_bodies>
	<to_body get="inline" set="null" line="16" static="1">
		<f a="this">
			<e path="haxe.ds.Either">
				<c path="echo.Body"/>
				<c path="Array"><c path="echo.Body"/></c>
			</e>
			<x path="Null"><c path="echo.Body"/></x>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":to"/>
		</meta>
	</to_body>
	<to_bodies get="inline" set="null" line="21" static="1">
		<f a="this">
			<e path="haxe.ds.Either">
				<c path="echo.Body"/>
				<c path="Array"><c path="echo.Body"/></c>
			</e>
			<x path="Null"><c path="Array"><c path="echo.Body"/></c></x>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":to"/>
		</meta>
	</to_bodies>
</class></impl>
	</abstract>
	<class path="echo.util._BodyOrBodies.BodyOrBodies_Impl_" params="" file="/home/travis/build/AustinEast/echo/echo/util/BodyOrBodies.hx" private="1" module="echo.util.BodyOrBodies">
		<from_body get="inline" set="null" line="8" static="1">
			<f a="a">
				<c path="echo.Body"/>
				<x path="echo.util.BodyOrBodies"/>
			</f>
			<meta><m n=":from"/></meta>
		</from_body>
		<from_bodies get="inline" set="null" line="12" static="1">
			<f a="b">
				<c path="Array"><c path="echo.Body"/></c>
				<x path="echo.util.BodyOrBodies"/>
			</f>
			<meta><m n=":from"/></meta>
		</from_bodies>
		<to_body get="inline" set="null" line="16" static="1">
			<f a="this">
				<e path="haxe.ds.Either">
					<c path="echo.Body"/>
					<c path="Array"><c path="echo.Body"/></c>
				</e>
				<x path="Null"><c path="echo.Body"/></x>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":to"/>
			</meta>
		</to_body>
		<to_bodies get="inline" set="null" line="21" static="1">
			<f a="this">
				<e path="haxe.ds.Either">
					<c path="echo.Body"/>
					<c path="Array"><c path="echo.Body"/></c>
				</e>
				<x path="Null"><c path="Array"><c path="echo.Body"/></c></x>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":to"/>
			</meta>
		</to_bodies>
	</class>
	<class path="echo.util.Debug" params="" file="/home/travis/build/AustinEast/echo/echo/util/Debug.hx">
		<log public="1" set="method" line="26" static="1"><f a="world">
	<c path="echo.World"/>
	<x path="Void"/>
</f></log>
		<draw_bodies public="1" expr="true">
			<x path="Bool"/>
			<meta><m n=":value"><e>true</e></m></meta>
		</draw_bodies>
		<draw_body_centers public="1" expr="false">
			<x path="Bool"/>
			<meta><m n=":value"><e>false</e></m></meta>
		</draw_body_centers>
		<draw_bounds public="1" expr="false">
			<x path="Bool"/>
			<meta><m n=":value"><e>false</e></m></meta>
		</draw_bounds>
		<draw_shape_bounds public="1" expr="false">
			<x path="Bool"/>
			<meta><m n=":value"><e>false</e></m></meta>
		</draw_shape_bounds>
		<draw_quadtree public="1" expr="true">
			<x path="Bool"/>
			<meta><m n=":value"><e>true</e></m></meta>
		</draw_quadtree>
		<shape_outline_width public="1" expr="1">
			<x path="Float"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</shape_outline_width>
		<shape_fill_alpha public="1" expr="0">
			<x path="Float"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</shape_fill_alpha>
		<shape_color public="1"><x path="Int"/></shape_color>
		<shape_fill_color public="1"><x path="Int"/></shape_fill_color>
		<shape_collided_color public="1"><x path="Int"/></shape_collided_color>
		<intersection_color public="1"><x path="Int"/></intersection_color>
		<intersection_overlap_color public="1"><x path="Int"/></intersection_overlap_color>
		<quadtree_color public="1"><x path="Int"/></quadtree_color>
		<quadtree_fill_color public="1"><x path="Int"/></quadtree_fill_color>
		<draw_line public="1" set="method" line="32">
			<f a="from_x:from_y:to_x:to_y:color:?alpha" v=":::::1">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ alpha : 1 }</e></m></meta>
		</draw_line>
		<draw_rect public="1" set="method" line="35">
			<f a="x:y:width:height:color:?stroke:?alpha" v="::::::1">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ alpha : 1 }</e></m></meta>
		</draw_rect>
		<draw_circle public="1" set="method" line="38">
			<f a="x:y:radius:color:?stroke:?alpha" v=":::::1">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ alpha : 1 }</e></m></meta>
		</draw_circle>
		<clear public="1" set="method" line="41"><f a=""><x path="Void"/></f></clear>
		<draw public="1" set="method" line="43">
			<f a="world:?clear_canvas" v=":true">
				<c path="echo.World"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ clear_canvas : true }</e></m></meta>
		</draw>
		<draw_intersection public="1" set="method" line="95">
			<f a="intersection:?draw_overlap:?draw_normal" v=":true:true">
				<c path="echo.data.Intersection"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ draw_normal : true, draw_overlap : true }</e></m></meta>
		</draw_intersection>
		<draw_polygon public="1" set="method" line="109">
			<f a="count:vertices:color:?stroke:?alpha" v="::::1">
				<x path="Int"/>
				<c path="Array"><x path="hxmath.math.Vector2"/></c>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ alpha : 1 }</e></m></meta>
		</draw_polygon>
		<draw_qd set="method" line="116"><f a="tree">
	<c path="echo.util.QuadTree"/>
	<x path="Void"/>
</f></draw_qd>
		<new public="1" set="method" line="10">
			<f a=""><x path="Void"/></f>
			<meta><m n=":compilerGenerated"/></meta>
		</new>
	</class>
	<class path="echo.util.Disposable" params="" file="/home/travis/build/AustinEast/echo/echo/util/Disposable.hx">
		<dispose public="1" params="T" set="method" line="13" static="1">
			<f a="object">
				<x path="Null"><c path="echo.util.IDisposable"/></x>
				<c path="dispose.T"/>
			</f>
			<haxe_doc>* Checks if an object is not null before calling dispose(), always returns null.
   *
   * @param	object	An IDisposable object that will be disposed if it's not null.
   * @return	null</haxe_doc>
		</dispose>
		<disposeArray public="1" params="T" set="method" line="25" static="1">
			<f a="array">
				<c path="Array"><c path="disposeArray.T"/></c>
				<c path="Array"><c path="disposeArray.T"/></c>
			</f>
			<haxe_doc>* dispose every element of an array of IDisposables
   *
   * @param	array	An Array of IDisposable objects
   * @return	null</haxe_doc>
		</disposeArray>
		<haxe_doc>* This Class contains utility methods for Classes that implement `IDisposable`.</haxe_doc>
	</class>
	<class path="echo.util.Ext" params="" file="/home/travis/build/AustinEast/echo/echo/util/Ext.hx">
		<equals public="1" get="inline" set="null" line="15" static="1">
			<f a="a:b:?diff" v="::0.00001">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":value"><e>{ diff : 0.00001 }</e></m></meta>
			<haxe_doc>* Checks if two Floats are "equal" within the margin of error defined by the `diff` argument.
   * @param a The first Float to check for equality.
   * @param b The first Float to check for equality.
   * @param diff The margin of error to check by.
   * @return returns true if the floats are equal (within the defined margin of error)</haxe_doc>
		</equals>
		<square_normal public="1" set="method" line="23" static="1">
			<f a="normal">
				<x path="hxmath.math.Vector2"/>
				<x path="hxmath.math.Vector2"/>
			</f>
			<haxe_doc>* Normalizes a `Vector2` (in place) to represent the closest cardinal direction (Up, Down, Left, or Right).
   * @param normal The `Vector2` to modify.
   * @return the modified `Vector2`</haxe_doc>
		</square_normal>
		<dispose_bodies public="1" set="method" line="33" static="1"><f a="arr">
	<c path="Array"><c path="echo.Body"/></c>
	<c path="Array"><c path="echo.Body"/></c>
</f></dispose_bodies>
	</class>
	<class path="echo.util.History" params="T" file="/home/travis/build/AustinEast/echo/echo/util/History.hx">
		<re><c path="echo.util.Ring"><c path="echo.util.History.T"/></c></re>
		<un><c path="echo.util.Ring"><c path="echo.util.History.T"/></c></un>
		<redo public="1" set="method" line="15"><f a=""><x path="Null"><c path="echo.util.History.T"/></x></f></redo>
		<undo public="1" set="method" line="21"><f a=""><x path="Null"><c path="echo.util.History.T"/></x></f></undo>
		<add public="1" set="method" line="27"><f a="v">
	<c path="echo.util.History.T"/>
	<x path="Void"/>
</f></add>
		<new public="1" set="method" line="10"><f a="len">
	<x path="Int"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>* History implementation from: https://code.haxe.org/category/data-structures/ring-array.html</haxe_doc>
		<meta><m n=":generic"/></meta>
	</class>
	<class path="echo.util.Ring" params="T" file="/home/travis/build/AustinEast/echo/echo/util/History.hx" module="echo.util.History">
		<cap public="1" get="accessor" set="null"><x path="Int"/></cap>
		<get_cap get="inline" set="null" line="38"><f a=""><x path="Int"/></f></get_cap>
		<len public="1" get="accessor" set="null"><x path="Int"/></len>
		<get_len get="inline" set="null" line="42"><f a=""><x path="Int"/></f></get_len>
		<i><x path="Int"/></i>
		<start><x path="Int"/></start>
		<left><x path="Int"/></left>
		<a><x path="haxe.ds.Vector"><c path="echo.util.Ring.T"/></x></a>
		<pop public="1" set="method" line="54"><f a=""><x path="Null"><c path="echo.util.Ring.T"/></x></f></pop>
		<shift public="1" set="method" line="63"><f a=""><x path="Null"><c path="echo.util.Ring.T"/></x></f></shift>
		<push public="1" set="method" line="72"><f a="v">
	<c path="echo.util.Ring.T"/>
	<x path="Void"/>
</f></push>
		<reset public="1" set="method" line="82"><f a=""><x path="Void"/></f></reset>
		<remove public="1" set="method" line="88"><f a="v">
	<c path="echo.util.Ring.T"/>
	<x path="Void"/>
</f></remove>
		<toString public="1" get="inline" set="null" line="116"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method" line="49"><f a="len">
	<x path="Int"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>* Fixed Ring Array Data Structure from: https://code.haxe.org/category/data-structures/ring-array.html</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":generic"/>
		</meta>
	</class>
	<class path="echo.util.JSON" params="" file="/home/travis/build/AustinEast/echo/echo/util/JSON.hx">
		<copy_fields public="1" set="method" line="17" static="1">
			<f a="from:into">
				<d/>
				<d/>
				<d/>
			</f>
			<haxe_doc>* Copy an object's fields into target object. Overwrites the target object's fields.
   * Can work with Static Classes as well (as destination)
   *
   * Adapted from the DJFlixel Library: https://github.com/johndimi/djFlixel
   *
   * @param	from The Master object to copy fields from
   * @param	into The Target object to copy fields to
   * @return	The resulting object</haxe_doc>
		</copy_fields>
		<haxe_doc>* Class to provide different Utilities for dealing with Object Data</haxe_doc>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="echo.util.Proxy" params="" file="/home/travis/build/AustinEast/echo/echo/util/Proxy.hx"/>
	<class path="echo.util.QuadTree" params="" file="/home/travis/build/AustinEast/echo/echo/util/QuadTree.hx">
		<extends path="echo.util.AABB"/>
		<implements path="echo.util.IPooled"/>
		<pool public="1" get="accessor" set="null" static="1"><c path="echo.util.IPool"><c path="echo.util.QuadTree"/></c></pool>
		<_pool expr="new Pool&lt;QuadTree&gt;(QuadTree)" line="13" static="1">
			<c path="echo.util.Pool"><c path="echo.util.QuadTree"/></c>
			<meta><m n=":value"><e><![CDATA[new Pool<QuadTree>(QuadTree)]]></e></m></meta>
		</_pool>
		<get public="1" get="inline" set="null" line="57" static="1">
			<f a="?x:?y:?width:?height" v="0:0:0:0">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<c path="echo.util.QuadTree"/>
			</f>
			<meta><m n=":value"><e>{ height : 0, width : 0, y : 0, x : 0 }</e></m></meta>
			<haxe_doc>* Gets a QuadTree from the pool of available Quadtrees (or creates one if none are available), and sets it with the provided values.</haxe_doc>
		</get>
		<get_pool get="inline" set="null" line="248" static="1"><f a=""><c path="echo.util.IPool"><c path="echo.util.QuadTree"/></c></f></get_pool>
		<max_depth public="1" set="accessor" expr="5">
			<x path="Int"/>
			<meta><m n=":value"><e>5</e></m></meta>
			<haxe_doc>* The maximum branch depth for this QuadTree collection. Once the max depth is reached, the QuadTrees at the end of the collection will not spilt.</haxe_doc>
		</max_depth>
		<max_contents public="1" set="accessor" expr="10">
			<x path="Int"/>
			<meta><m n=":value"><e>10</e></m></meta>
			<haxe_doc>* The maximum amount of `QuadTreeData` contents that a QuadTree `leaf` can hold before becoming a branch and splitting it's contents between children Quadtrees.</haxe_doc>
		</max_contents>
		<children public="1">
			<c path="Array"><c path="echo.util.QuadTree"/></c>
			<haxe_doc>* The child QuadTrees contained in the Quadtree. If this Array is empty, the Quadtree is regarded as a `leaf`.</haxe_doc>
		</children>
		<contents public="1">
			<c path="Array"><c path="echo.data.QuadTreeData"/></c>
			<haxe_doc>* The QuadTreeData contained in the Quadtree. If the Quadtree is not a `leaf`, all of it's contents will be dispersed to it's children QuadTrees (leaving this aryar emyty).</haxe_doc>
		</contents>
		<count public="1" get="accessor" set="null">
			<x path="Int"/>
			<haxe_doc>* Gets the total amount of `QuadTreeData` contents in the Quadtree, recursively. To get the non-recursive amount, check `quadtree.contents.length`.</haxe_doc>
		</count>
		<leaf public="1" get="accessor" set="null">
			<x path="Bool"/>
			<haxe_doc>* A QuadTree is regarded as a `leaf` if it has **no** QuadTree children (ie `quadtree.children.length == 0`).</haxe_doc>
		</leaf>
		<depth public="1">
			<x path="Int"/>
			<haxe_doc>* The QuadTree's branch position in it's collection.</haxe_doc>
		</depth>
		<nodes_list expr="[]">
			<c path="Array"><c path="echo.util.QuadTree"/></c>
			<meta><m n=":value"><e>[]</e></m></meta>
			<haxe_doc>* Cache'd list of QuadTrees used to help with memory management.</haxe_doc>
		</nodes_list>
		<put public="1" get="inline" set="null" line="67" override="1">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Puts the QuadTree back in the pool of available QuadTrees.</haxe_doc>
		</put>
		<insert public="1" set="method" line="80">
			<f a="data">
				<c path="echo.data.QuadTreeData"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Attempts to insert the `QuadTreeData` into the QuadTree. If the `QuadTreeData` already exists in the QuadTree, use `quadtree.update(data)` instead.</haxe_doc>
		</insert>
		<remove public="1" set="method" line="94">
			<f a="data">
				<c path="echo.data.QuadTreeData"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>* Attempts to remove the `QuadTreeData` from the QuadTree.</haxe_doc>
		</remove>
		<update public="1" set="method" line="107">
			<f a="data">
				<c path="echo.data.QuadTreeData"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Updates the `QuadTreeData` in the QuadTree by first removing the `QuadTreeData` from the QuadTree, then inserting it.
   * @param data</haxe_doc>
		</update>
		<query public="1" set="method" line="116">
			<f a="aabb:result">
				<c path="echo.util.AABB"/>
				<c path="Array"><c path="echo.data.QuadTreeData"/></c>
				<x path="Void"/>
			</f>
			<haxe_doc>* Queries the QuadTree for any `QuadTreeData` that overlaps the `AABB`.
   * @param aabb The `AABB` to query.
   * @param result An Array containing all `QuadTreeData` that collides with the shape.</haxe_doc>
		</query>
		<shake public="1" set="method" line="133">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* If the QuadTree is a branch (_not_ a `leaf`), this will check if the amount of data from all the child Quadtrees can fit in the Quadtree without exceeding it's `max_contents`.
   * If all the data can fit, the Quadtree branch will "shake" its child Quadtrees, absorbing all the data and clearing the children (putting all the child Quadtrees back in the pool).
   *
   * Note - This works recursively.</haxe_doc>
		</shake>
		<split set="method" line="160">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Splits the Quadtree into 4 Quadtree children, and disperses it's `QuadTreeData` contents into them.</haxe_doc>
		</split>
		<clear public="1" get="inline" set="null" line="189">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Clears the Quadtree's `QuadTreeData` contents and all children Quadtrees.</haxe_doc>
		</clear>
		<clear_children get="inline" set="null" line="196">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Puts all of the Quadtree's children back in the pool and clears the `children` Array.</haxe_doc>
		</clear_children>
		<reset_data_flags get="inline" set="null" line="206">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Resets the `flag` value of the QuadTree's `QuadTreeData` contents.</haxe_doc>
		</reset_data_flags>
		<get_count set="method" line="213"><f a=""><x path="Int"/></f></get_count>
		<get_leaf get="inline" set="null" line="246"><f a=""><x path="Bool"/></f></get_leaf>
		<set_max_depth get="inline" set="null" line="252"><f a="value">
	<x path="Int"/>
	<x path="Int"/>
</f></set_max_depth>
		<set_max_contents get="inline" set="null" line="257"><f a="value">
	<x path="Int"/>
	<x path="Int"/>
</f></set_max_contents>
		<new set="method" line="47">
			<f a="?aabb:?depth" v=":0">
				<c path="echo.util.AABB"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ depth : 0 }</e></m></meta>
		</new>
		<haxe_doc>* Simple QuadTree implementation to assist with broad-phase 2D collisions.</haxe_doc>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="echo.util.SAT" params="" file="/home/travis/build/AustinEast/echo/echo/util/SAT.hx">
		<norm final="1" set="null" expr="new Vector2(0, 0)" line="14" static="1">
			<x path="hxmath.math.Vector2"/>
			<meta><m n=":value"><e>new Vector2(0, 0)</e></m></meta>
		</norm>
		<point_in_rect public="1" get="inline" set="null" line="16" static="1"><f a="p:r">
	<x path="hxmath.math.Vector2"/>
	<c path="echo.shape.Rect"/>
	<x path="Bool"/>
</f></point_in_rect>
		<point_in_circle public="1" get="inline" set="null" line="21" static="1"><f a="p:c">
	<x path="hxmath.math.Vector2"/>
	<c path="echo.shape.Circle"/>
	<x path="Bool"/>
</f></point_in_circle>
		<point_in_polygon public="1" get="inline" set="null" line="25" static="1"><f a="point:polygon">
	<x path="hxmath.math.Vector2"/>
	<c path="echo.shape.Polygon"/>
	<x path="Bool"/>
</f></point_in_polygon>
		<rect_contains public="1" get="inline" set="null" line="39" static="1"><f a="r:v">
	<c path="echo.shape.Rect"/>
	<x path="hxmath.math.Vector2"/>
	<x path="Bool"/>
</f></rect_contains>
		<circle_contains public="1" get="inline" set="null" line="43" static="1"><f a="c:v">
	<c path="echo.shape.Circle"/>
	<x path="hxmath.math.Vector2"/>
	<x path="Bool"/>
</f></circle_contains>
		<polygon_contains public="1" get="inline" set="null" line="47" static="1"><f a="p:v">
	<c path="echo.shape.Polygon"/>
	<x path="hxmath.math.Vector2"/>
	<x path="Bool"/>
</f></polygon_contains>
		<line_interects_line public="1" get="inline" set="null" line="51" static="1"><f a="line1:line2">
	<c path="echo.Line"/>
	<c path="echo.Line"/>
	<x path="Null"><c path="echo.data.IntersectionData"/></x>
</f></line_interects_line>
		<line_interects_rect public="1" set="method" line="69" static="1"><f a="l:r">
	<c path="echo.Line"/>
	<c path="echo.shape.Rect"/>
	<x path="Null"><c path="echo.data.IntersectionData"/></x>
</f></line_interects_rect>
		<line_intersects_circle public="1" set="method" line="102" static="1"><f a="l:c">
	<c path="echo.Line"/>
	<c path="echo.shape.Circle"/>
	<x path="Null"><c path="echo.data.IntersectionData"/></x>
</f></line_intersects_circle>
		<line_intersects_polygon public="1" set="method" line="146" static="1"><f a="l:p">
	<c path="echo.Line"/>
	<c path="echo.shape.Polygon"/>
	<x path="Null"><c path="echo.data.IntersectionData"/></x>
</f></line_intersects_polygon>
		<rect_intersects public="1" get="inline" set="null" line="164" static="1"><f a="r:l">
	<c path="echo.shape.Rect"/>
	<c path="echo.Line"/>
	<x path="Null"><c path="echo.data.IntersectionData"/></x>
</f></rect_intersects>
		<circle_intersects public="1" get="inline" set="null" line="168" static="1"><f a="c:l">
	<c path="echo.shape.Circle"/>
	<c path="echo.Line"/>
	<x path="Null"><c path="echo.data.IntersectionData"/></x>
</f></circle_intersects>
		<polygon_intersects public="1" get="inline" set="null" line="172" static="1"><f a="p:l">
	<c path="echo.shape.Polygon"/>
	<c path="echo.Line"/>
	<x path="Null"><c path="echo.data.IntersectionData"/></x>
</f></polygon_intersects>
		<rect_and_rect public="1" set="method" line="182" static="1">
			<f a="rect1:rect2:?flip" v="::false">
				<c path="echo.shape.Rect"/>
				<c path="echo.shape.Rect"/>
				<x path="Bool"/>
				<x path="Null"><c path="echo.data.CollisionData"/></x>
			</f>
			<meta><m n=":value"><e>{ flip : false }</e></m></meta>
			<haxe_doc><![CDATA[* Test two Rects for a Collision.
   * @param rect1
   * @param rect2
   * @param flip
   * @return Null<CollisionData>]]></haxe_doc>
		</rect_and_rect>
		<circle_and_circle public="1" set="method" line="232" static="1">
			<f a="circle1:circle2:?flip" v="::false">
				<c path="echo.shape.Circle"/>
				<c path="echo.shape.Circle"/>
				<x path="Bool"/>
				<x path="Null"><c path="echo.data.CollisionData"/></x>
			</f>
			<meta><m n=":value"><e>{ flip : false }</e></m></meta>
			<haxe_doc><![CDATA[* Test two Circles for a Collision.
   * @param circle1
   * @param circle2
   * @param flip
   * @return Null<CollisionData>]]></haxe_doc>
		</circle_and_circle>
		<polygon_and_polygon public="1" set="method" line="273" static="1">
			<f a="polygon1:polygon2:?flip" v="::false">
				<c path="echo.shape.Polygon"/>
				<c path="echo.shape.Polygon"/>
				<x path="Bool"/>
				<x path="Null"><c path="echo.data.CollisionData"/></x>
			</f>
			<meta><m n=":value"><e>{ flip : false }</e></m></meta>
			<haxe_doc><![CDATA[* Test two Polygons for a Collision. Implementation ported from the [differ](https://github.com/snowkit/differ/blob/master/differ/sat/SAT2D.hx#L191) library.
   * @param polygon1
   * @param polygon2
   * @param flip
   * @return Null<CollisionData>]]></haxe_doc>
		</polygon_and_polygon>
		<rect_and_circle public="1" set="method" line="307" static="1">
			<f a="r:c:?flip" v="::false">
				<c path="echo.shape.Rect"/>
				<c path="echo.shape.Circle"/>
				<x path="Bool"/>
				<x path="Null"><c path="echo.data.CollisionData"/></x>
			</f>
			<meta><m n=":value"><e>{ flip : false }</e></m></meta>
			<haxe_doc><![CDATA[* Test a Rect and a Circle for a Collision.
   * @param r
   * @param c
   * @param flip
   * @return Null<CollisionData>]]></haxe_doc>
		</rect_and_circle>
		<rect_and_polygon public="1" set="method" line="365" static="1">
			<f a="r:p:?flip" v="::false">
				<c path="echo.shape.Rect"/>
				<c path="echo.shape.Polygon"/>
				<x path="Bool"/>
				<x path="Null"><c path="echo.data.CollisionData"/></x>
			</f>
			<meta><m n=":value"><e>{ flip : false }</e></m></meta>
		</rect_and_polygon>
		<circle_and_polygon public="1" set="method" line="388" static="1">
			<f a="c:p:?flip" v="::false">
				<c path="echo.shape.Circle"/>
				<c path="echo.shape.Polygon"/>
				<x path="Bool"/>
				<x path="Null"><c path="echo.data.CollisionData"/></x>
			</f>
			<meta><m n=":value"><e>{ flip : false }</e></m></meta>
			<haxe_doc><![CDATA[* Test a Circle and a Polygon for a Collision. Implementation ported from the [differ](https://github.com/snowkit/differ/blob/master/differ/sat/SAT2D.hx#L13) library.
   * @param c
   * @param p
   * @param flip
   * @return Null<CollisionData>]]></haxe_doc>
		</circle_and_polygon>
		<check_polygons set="method" line="493" static="1">
			<f a="polygon1:polygon2:?flip" v="::false">
				<c path="echo.shape.Polygon"/>
				<c path="echo.shape.Polygon"/>
				<x path="Bool"/>
				<x path="Null"><c path="echo.data.CollisionData"/></x>
			</f>
			<meta><m n=":value"><e>{ flip : false }</e></m></meta>
		</check_polygons>
		<haxe_doc>* Class containing methods to perform collision checks using the Separating Axis Thereom</haxe_doc>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="echo.util.TileMap" params="" file="/home/travis/build/AustinEast/echo/echo/util/TileMap.hx">
		<generate public="1" set="method" line="16" static="1">
			<f a="data:tile_width:tile_height:width_in_tiles:height_in_tiles:?offset_x:?offset_y:?start_index" v=":::::0:0:0">
				<c path="Array"><x path="Int"/></c>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<c path="Array"><c path="echo.Body"/></c>
			</f>
			<meta><m n=":value"><e>{ start_index : 0, offset_y : 0, offset_x : 0 }</e></m></meta>
			<haxe_doc><![CDATA[* Generates an optimized Array of Bodies from an Array of `Int`s representing a TileMap.
   * @param data The Array of `Int`s that make up the TileMap
   * @param tile_width The Width of each Tile in the TileMap
   * @param tile_height The Height of each Tile in the TileMap
   * @param width_in_tiles The Width of the TileMap (Measured in Tiles)
   * @param height_in_tiles The Height of the TileMap (Measured in Tiles)
   * @param offset_x The Offset applied to the X Position of each generated Body
   * @param offset_y The Offset applied to the Y Position of each generated Body
   * @param start_index The Index that designates which tiles are collidable
   * @return Array<Body>]]></haxe_doc>
		</generate>
		<generate_grid public="1" set="method" line="97" static="1">
			<f a="data:tile_width:tile_height:width_in_tiles:height_in_tiles:?offset_x:?offset_y:?start_index" v=":::::0:0:0">
				<c path="Array"><x path="Int"/></c>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<c path="Array"><c path="echo.Body"/></c>
			</f>
			<meta><m n=":value"><e>{ start_index : 0, offset_y : 0, offset_x : 0 }</e></m></meta>
			<haxe_doc><![CDATA[* Generates an Array of Bodies from an Array of `Int`s representing a TileMap.
   * @param data The Array of `Int`s that make up the TileMap
   * @param tile_width The Width of each Tile in the TileMap
   * @param tile_height The Height of each Tile in the TileMap
   * @param width_in_tiles The Width of the TileMap (Measured in Tiles)
   * @param height_in_tiles The Height of the TileMap (Measured in Tiles)
   * @param offset_x The Offset applied to the X Position of each generated Body
   * @param offset_y The Offset applied to the Y Position of each generated Body
   * @param start_index The Index that designates which tiles are collidable
   * @return Array<Body>]]></haxe_doc>
		</generate_grid>
	</class>
	<abstract path="haxe.Function" params="" file="/home/travis/haxe/std/haxe/Constraints.hx" module="haxe.Constraints">
		<this><d/></this>
		<haxe_doc>This type unifies with any function type.

	It is intended to be used as a type parameter constraint. If used as a real
	type, the underlying type will be `Dynamic`.</haxe_doc>
		<meta><m n=":callable"/></meta>
		<impl><class path="haxe._Constraints.Function_Impl_" params="" file="/home/travis/haxe/std/haxe/Constraints.hx" private="1" module="haxe.Constraints"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<abstract path="haxe.FlatEnum" params="" file="/home/travis/haxe/std/haxe/Constraints.hx" module="haxe.Constraints">
		<this><d/></this>
		<haxe_doc>This type unifies with an enum instance if all constructors of the enum
	require no arguments.

	It is intended to be used as a type parameter constraint. If used as a real
	type, the underlying type will be `Dynamic`.</haxe_doc>
		<impl><class path="haxe._Constraints.FlatEnum_Impl_" params="" file="/home/travis/haxe/std/haxe/Constraints.hx" private="1" module="haxe.Constraints"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<abstract path="haxe.Constructible" params="T" file="/home/travis/haxe/std/haxe/Constraints.hx" module="haxe.Constraints">
		<this><d/></this>
		<haxe_doc><![CDATA[This type unifies with any instance of classes that have a constructor
	which

	  * is `public` and
	  * unifies with the type used for type parameter `T`.

	If a type parameter `A` is assigned to a type parameter `B` which is constrained
	to `Constructible<T>`, A must be explicitly constrained to
	`Constructible<T>` as well.

	It is intended to be used as a type parameter constraint. If used as a real
	type, the underlying type will be `Dynamic`.]]></haxe_doc>
		<impl><class path="haxe._Constraints.Constructible_Impl_" params="" file="/home/travis/haxe/std/haxe/Constraints.hx" private="1" module="haxe.Constraints"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<abstract path="haxe.DynamicAccess" params="T" file="/home/travis/haxe/std/haxe/DynamicAccess.hx">
		<from><icast><d><c path="haxe.DynamicAccess.T"/></d></icast></from>
		<this><d><c path="haxe.DynamicAccess.T"/></d></this>
		<to><icast><d><c path="haxe.DynamicAccess.T"/></d></icast></to>
		<haxe_doc>DynamicAccess is an abstract type for working with anonymous structures
	that are intended to hold collections of objects by the string key.

	For example, these types of structures are often created from JSON.

	Basically, it wraps `Reflect` calls in a `Map`-like interface.</haxe_doc>
		<impl><class path="haxe._DynamicAccess.DynamicAccess_Impl_" params="" file="/home/travis/haxe/std/haxe/DynamicAccess.hx" private="1" module="haxe.DynamicAccess"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<class path="haxe.EnumTools" params="" file="/home/travis/haxe/std/haxe/EnumTools.hx" extern="1">
		<getName public="1" params="T" get="inline" set="null" line="52" static="1">
			<f a="e">
				<x path="Enum"><c path="getName.T"/></x>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the name of enum `e`, including its path.

		If `e` is inside a package, the package structure is returned dot-
		separated, with another dot separating the enum name:
		
			pack1.pack2.(...).packN.EnumName

		If `e` is a sub-type of a Haxe module, that module is not part of the
		package structure.

		If `e` has no package, the enum name is returned.

		If `e` is `null`, the result is unspecified.

		The enum name does not include any type parameters.</haxe_doc>
		</getName>
		<createByName public="1" params="T" get="inline" set="null" line="65" static="1">
			<f a="e:constr:?params">
				<x path="Enum"><c path="createByName.T"/></x>
				<c path="String"/>
				<c path="Array"><d/></c>
				<c path="createByName.T"/>
			</f>
			<haxe_doc>Creates an instance of enum `e` by calling its constructor `constr` with
		arguments `params`.

		If `e` or `constr` is `null`, or if enum `e` has no constructor named
		`constr`, or if the number of elements in `params` does not match the
		expected number of constructor arguments, or if any argument has an
		invalid type, the result is unspecified.</haxe_doc>
		</createByName>
		<createByIndex public="1" params="T" get="inline" set="null" line="81" static="1">
			<f a="e:index:?params">
				<x path="Enum"><c path="createByIndex.T"/></x>
				<x path="Int"/>
				<c path="Array"><d/></c>
				<c path="createByIndex.T"/>
			</f>
			<haxe_doc>Creates an instance of enum `e` by calling its constructor number
		`index` with arguments `params`.

		The constructor indices are preserved from Haxe syntax, so the first
		declared is index 0, the next index 1 etc.

		If `e` or `index` is `null`, or if enum `e` has no constructor
		corresponding to index `index`, or if the number of elements in `params`
		does not match the expected number of constructor arguments, or if any
		argument has an invalid type, the result is unspecified.</haxe_doc>
		</createByIndex>
		<createAll public="1" params="T" get="inline" set="null" line="98" static="1">
			<f a="e">
				<x path="Enum"><c path="createAll.T"/></x>
				<c path="Array"><c path="createAll.T"/></c>
			</f>
			<haxe_doc>Returns a list of all constructors of enum `e` that require no
		arguments.

		This may return the empty Array `[]` if all constructors of `e` require
		arguments.

		Otherwise an instance of `e` constructed through each of its non-
		argument constructors is returned, in the order of the constructor
		declaration.

		If `e` is `null`, the result is unspecified.</haxe_doc>
		</createAll>
		<getConstructors public="1" params="T" get="inline" set="null" line="110" static="1">
			<f a="e">
				<x path="Enum"><c path="getConstructors.T"/></x>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Returns a list of the names of all constructors of enum `e`.

		The order of the constructor names in the returned Array is preserved
		from the original syntax.

		If `c` is `null`, the result is unspecified.</haxe_doc>
		</getConstructors>
		<haxe_doc>This class provides advanced methods on enums. It is ideally used with
	`using EnumTools` and then acts as an
	  [extension](https://haxe.org/manual/lf-static-extension.html) to the
	  `enum` types.

	If the first argument to any of the methods is `null`, the result is
	unspecified.</haxe_doc>
	</class>
	<class path="haxe.EnumValueTools" params="" file="/home/travis/haxe/std/haxe/EnumTools.hx" module="haxe.EnumTools" extern="1">
		<equals public="1" params="T" get="inline" set="null" line="133" static="1">
			<f a="a:b">
				<c path="equals.T"/>
				<c path="equals.T"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Recursively compares two enum instances `a` and `b` by value.

		Unlike `a == b`, this function performs a deep equality check on the
		arguments of the constructors (if there are any).

		If `a` or `b` are `null`, the result is unspecified.</haxe_doc>
		</equals>
		<getName public="1" get="inline" set="null" line="144" static="1">
			<f a="e">
				<x path="EnumValue"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the constructor name of enum instance `e`.

		The result String does not contain any constructor arguments.

		If `e` is `null`, the result is unspecified.</haxe_doc>
		</getName>
		<getParameters public="1" get="inline" set="null" line="158" static="1">
			<f a="e">
				<x path="EnumValue"/>
				<c path="Array"><d/></c>
			</f>
			<haxe_doc>Returns a list of the constructor arguments of enum instance `e`.

		If `e` has no arguments, the result is `[]`.

		Otherwise the result are the values that were used as arguments to `e`,
		in the order of their declaration.

		If `e` is `null`, the result is unspecified.</haxe_doc>
		</getParameters>
		<getIndex public="1" get="inline" set="null" line="170" static="1">
			<f a="e">
				<x path="EnumValue"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the index of enum instance `e`.

		This corresponds to the original syntactic position of `e`. The index of
		the first declared constructor is 0, the next one is 1 etc.

		If `e` is `null`, the result is unspecified.</haxe_doc>
		</getIndex>
		<haxe_doc>This class provides advanced methods on enum values. It is ideally used with
	`using EnumValueTools` and then acts as an
	  [extension](https://haxe.org/manual/lf-static-extension.html) to the
	  `EnumValue` types.

	If the first argument to any of the methods is `null`, the result is
	unspecified.</haxe_doc>
	</class>
	<enum path="haxe.ds.Either" params="L:R" file="/home/travis/haxe/std/haxe/ds/Either.hx">
		<Left a="v"><c path="haxe.ds.Either.L"/></Left>
		<Right a="v"><c path="haxe.ds.Either.R"/></Right>
		<haxe_doc>Either represents values which are either of type `L` (Left) or type `R`
	(Right).</haxe_doc>
		<meta><m n=":directlyUsed"/></meta>
	</enum>
	<abstract path="haxe.ds.HashMap" params="K:V" file="/home/travis/haxe/std/haxe/ds/HashMap.hx">
		<this><c path="haxe.ds._HashMap.HashMapData">
	<c path="haxe.ds.HashMap.K"/>
	<c path="haxe.ds.HashMap.V"/>
</c></this>
		<haxe_doc>HashMap allows mapping of hashable objects to arbitrary values.

	See `Map` for documentation details.

	@see https://haxe.org/manual/std-Map.html</haxe_doc>
		<impl><class path="haxe.ds._HashMap.HashMap_Impl_" params="" file="/home/travis/haxe/std/haxe/ds/HashMap.hx" private="1" module="haxe.ds.HashMap"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<abstract path="haxe.ds.Map" params="K:V" file="/home/travis/haxe/std/haxe/ds/Map.hx">
		<from>
			<icast field="fromStringMap"><c path="haxe.ds.StringMap"><c path="fromStringMap.V"/></c></icast>
			<icast field="fromIntMap"><c path="haxe.ds.IntMap"><c path="fromIntMap.V"/></c></icast>
			<icast field="fromObjectMap"><c path="haxe.ds.ObjectMap">
	<c path="fromObjectMap.K"/>
	<c path="fromObjectMap.V"/>
</c></icast>
		</from>
		<this><c path="haxe.IMap">
	<c path="haxe.ds.Map.K"/>
	<c path="haxe.ds.Map.V"/>
</c></this>
		<to>
			<icast field="toStringMap"><c path="haxe.ds.StringMap"><c path="toStringMap.V"/></c></icast>
			<icast field="toIntMap"><c path="haxe.ds.IntMap"><c path="toIntMap.V"/></c></icast>
			<icast field="toEnumValueMapMap"><c path="haxe.ds.EnumValueMap">
	<c path="toEnumValueMapMap.K"/>
	<c path="toEnumValueMapMap.V"/>
</c></icast>
			<icast field="toObjectMap"><c path="haxe.ds.ObjectMap">
	<c path="toObjectMap.K"/>
	<c path="toObjectMap.V"/>
</c></icast>
		</to>
		<haxe_doc><![CDATA[Map allows key to value mapping for arbitrary value types, and many key
	types.

	This is a multi-type abstract, it is instantiated as one of its
	specialization types depending on its type parameters.

	A Map can be instantiated without explicit type parameters. Type inference
	will then determine the type parameters from the usage.

	Maps can also be created with `[key1 => value1, key2 => value2]` syntax.

	Map is an abstract type, it is not available at runtime.

	@see https://haxe.org/manual/std-Map.html]]></haxe_doc>
		<meta><m n=":multiType"><e>@:followWithAbstracts K</e></m></meta>
		<impl><class path="haxe.ds._Map.Map_Impl_" params="" file="/home/travis/haxe/std/haxe/ds/Map.hx" private="1" module="haxe.ds.Map"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<typedef path="haxe.ds._Vector.VectorData" params="T" file="/home/travis/haxe/std/haxe/ds/Vector.hx" private="1" module="haxe.ds.Vector"><c path="Array"><c path="haxe.ds._Vector.VectorData.T"/></c></typedef>
	<abstract path="haxe.ds.Vector" params="T" file="/home/travis/haxe/std/haxe/ds/Vector.hx">
		<this><t path="haxe.ds._Vector.VectorData"><c path="haxe.ds.Vector.T"/></t></this>
		<haxe_doc>A Vector is a storage of fixed size. It can be faster than Array on some
	targets, and is never slower.

	@see https://haxe.org/manual/std-vector.html</haxe_doc>
		<impl><class path="haxe.ds._Vector.Vector_Impl_" params="" file="/home/travis/haxe/std/haxe/ds/Vector.hx" private="1" module="haxe.ds.Vector">
	<length public="1" get="accessor" set="null" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Returns the length of `this` Vector.</haxe_doc>
	</length>
	<meta><m n=":keep"/></meta>
</class></impl>
	</abstract>
	<abstract path="haxe.extern.Rest" params="T" file="/home/travis/haxe/std/haxe/extern/Rest.hx">
		<this><c path="Array"><c path="haxe.extern.Rest.T"/></c></this>
		<haxe_doc><![CDATA[A special abstract type that represents "rest" function argument.

	Should be used as a type for the last argument of an extern method,
	representing that arbitrary number of arguments of given type can be
	passed to that method.

	@see <https://haxe.org/manual/lf-externs.html>]]></haxe_doc>
		<impl><class path="haxe.extern._Rest.Rest_Impl_" params="" file="/home/travis/haxe/std/haxe/extern/Rest.hx" private="1" module="haxe.extern.Rest"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<typedef path="haxe.macro.Position" params="" file="/home/travis/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<a>
			<min>
				<x path="Int"/>
				<haxe_doc>Position of the first character.</haxe_doc>
			</min>
			<max>
				<x path="Int"/>
				<haxe_doc>Position of the last character.</haxe_doc>
			</max>
			<file>
				<c path="String"/>
				<haxe_doc>Reference to the filename.</haxe_doc>
			</file>
		</a>
		<haxe_doc>Represents a position in a file.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.Expr" params="" file="/home/travis/haxe/std/haxe/macro/Expr.hx">
		<a>
			<pos>
				<t path="haxe.macro.Position"/>
				<haxe_doc>The position of the expression.</haxe_doc>
			</pos>
			<expr>
				<e path="haxe.macro.ExprDef"/>
				<haxe_doc>The expression kind.</haxe_doc>
			</expr>
		</a>
		<haxe_doc>Represents a node in the AST.
	@see https://haxe.org/manual/macro-reification-expression.html</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.ExprOf" params="T" file="/home/travis/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<t path="haxe.macro.Expr"/>
		<haxe_doc>Represents a AST node identical to `Expr`, but it allows constraining the
	type of accepted expressions.
	@see https://haxe.org/manual/macro-ExprOf.html</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.Case" params="" file="/home/travis/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<a>
			<values>
				<c path="Array"><t path="haxe.macro.Expr"/></c>
				<haxe_doc>The value expressions of the case.</haxe_doc>
			</values>
			<guard>
				<x path="Null"><t path="haxe.macro.Expr"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The optional guard expressions of the case, if available.</haxe_doc>
			</guard>
			<expr>
				<x path="Null"><t path="haxe.macro.Expr"/></x>
				<haxe_doc>The expression of the case, if available.</haxe_doc>
			</expr>
		</a>
		<haxe_doc>Represents a switch case.
	@see https://haxe.org/manual/expression-switch.html</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.Var" params="" file="/home/travis/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<a>
			<type>
				<x path="Null"><e path="haxe.macro.ComplexType"/></x>
				<haxe_doc>The type-hint of the variable, if available.</haxe_doc>
			</type>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the variable.</haxe_doc>
			</name>
			<isFinal>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Whether or not the variable can be assigned to.</haxe_doc>
			</isFinal>
			<expr>
				<x path="Null"><t path="haxe.macro.Expr"/></x>
				<haxe_doc>The expression of the variable, if available.</haxe_doc>
			</expr>
		</a>
		<haxe_doc>Represents a variable in the AST.
	@see https://haxe.org/manual/expression-var.html</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.Catch" params="" file="/home/travis/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<a>
			<type>
				<e path="haxe.macro.ComplexType"/>
				<haxe_doc>The type of the catch.</haxe_doc>
			</type>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the catch variable.</haxe_doc>
			</name>
			<expr>
				<t path="haxe.macro.Expr"/>
				<haxe_doc>The expression of the catch.</haxe_doc>
			</expr>
		</a>
		<haxe_doc>Represents a catch in the AST.
	@https://haxe.org/manual/expression-try-catch.html</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.ObjectField" params="" file="/home/travis/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<a>
			<quotes>
				<x path="Null"><e path="haxe.macro.QuoteStatus"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>How the field name is quoted.</haxe_doc>
			</quotes>
			<field>
				<c path="String"/>
				<haxe_doc>The name of the field.</haxe_doc>
			</field>
			<expr>
				<t path="haxe.macro.Expr"/>
				<haxe_doc>The field expression.</haxe_doc>
			</expr>
		</a>
		<haxe_doc>Represents the field of an object declaration.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.TypePath" params="" file="/home/travis/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<a>
			<sub>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Sub is set on module sub-type access:
		`pack.Module.Type` has name = Module, sub = Type, if available.</haxe_doc>
			</sub>
			<params>
				<x path="Null"><c path="Array"><e path="haxe.macro.TypeParam"/></c></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Optional parameters of the type path.</haxe_doc>
			</params>
			<pack>
				<c path="Array"><c path="String"/></c>
				<haxe_doc>Represents the package of the type path.</haxe_doc>
			</pack>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the type path.</haxe_doc>
			</name>
		</a>
		<haxe_doc>Represents a type path in the AST.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.TypeParamDecl" params="" file="/home/travis/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<a>
			<params>
				<x path="Null"><c path="Array"><t path="haxe.macro.TypeParamDecl"/></c></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The optional parameters of the type parameter.</haxe_doc>
			</params>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the type parameter.</haxe_doc>
			</name>
			<meta>
				<x path="Null"><t path="haxe.macro.Metadata"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The metadata of the type parameter.</haxe_doc>
			</meta>
			<constraints>
				<x path="Null"><c path="Array"><e path="haxe.macro.ComplexType"/></c></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The optional constraints of the type parameter.</haxe_doc>
			</constraints>
		</a>
		<haxe_doc>Represents a type parameter declaration in the AST.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.Function" params="" file="/home/travis/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<a>
			<ret>
				<x path="Null"><e path="haxe.macro.ComplexType"/></x>
				<haxe_doc>The return type-hint of the function, if available.</haxe_doc>
			</ret>
			<params>
				<x path="Null"><c path="Array"><t path="haxe.macro.TypeParamDecl"/></c></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>An optional list of function parameter type declarations.</haxe_doc>
			</params>
			<expr>
				<x path="Null"><t path="haxe.macro.Expr"/></x>
				<haxe_doc>The expression of the function body, if available.</haxe_doc>
			</expr>
			<args>
				<c path="Array"><t path="haxe.macro.FunctionArg"/></c>
				<haxe_doc>A list of function arguments.</haxe_doc>
			</args>
		</a>
		<haxe_doc>Represents a function in the AST.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.FunctionArg" params="" file="/home/travis/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<a>
			<value>
				<x path="Null"><t path="haxe.macro.Expr"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The optional value of the function argument, if available.</haxe_doc>
			</value>
			<type>
				<x path="Null"><e path="haxe.macro.ComplexType"/></x>
				<haxe_doc>The type-hint of the function argument, if available.</haxe_doc>
			</type>
			<opt>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Whether or not the function argument is optional.</haxe_doc>
			</opt>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the function argument.</haxe_doc>
			</name>
			<meta>
				<x path="Null"><t path="haxe.macro.Metadata"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The metadata of the function argument.</haxe_doc>
			</meta>
		</a>
		<haxe_doc>Represents a function argument in the AST.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.MetadataEntry" params="" file="/home/travis/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<a>
			<pos>
				<t path="haxe.macro.Position"/>
				<haxe_doc>The position of the metadata entry.</haxe_doc>
			</pos>
			<params>
				<x path="Null"><c path="Array"><t path="haxe.macro.Expr"/></c></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The optional parameters of the metadata entry.</haxe_doc>
			</params>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the metadata entry.</haxe_doc>
			</name>
		</a>
		<haxe_doc>Represents a metadata entry in the AST.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.Metadata" params="" file="/home/travis/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<c path="Array"><t path="haxe.macro.MetadataEntry"/></c>
		<haxe_doc>Represents metadata in the AST.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.Field" params="" file="/home/travis/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<a>
			<pos>
				<t path="haxe.macro.Position"/>
				<haxe_doc>The position of the field.</haxe_doc>
			</pos>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the field.</haxe_doc>
			</name>
			<meta>
				<x path="Null"><t path="haxe.macro.Metadata"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The optional metadata of the field.</haxe_doc>
			</meta>
			<kind>
				<e path="haxe.macro.FieldType"/>
				<haxe_doc>The kind of the field.</haxe_doc>
			</kind>
			<doc>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The documentation of the field, if available. If the field has no
		documentation, the value is `null`.</haxe_doc>
			</doc>
			<access>
				<x path="Null"><c path="Array"><e path="haxe.macro.Access"/></c></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The access modifiers of the field. By default fields have private access.
		@see https://haxe.org/manual/class-field-access-modifier.html</haxe_doc>
			</access>
		</a>
		<haxe_doc>Represents a field in the AST.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.TypeDefinition" params="" file="/home/travis/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<a>
			<pos>
				<t path="haxe.macro.Position"/>
				<haxe_doc>The position to the type definition.</haxe_doc>
			</pos>
			<params>
				<x path="Null"><c path="Array"><t path="haxe.macro.TypeParamDecl"/></c></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The parameter type declarations of the type definition.</haxe_doc>
			</params>
			<pack>
				<c path="Array"><c path="String"/></c>
				<haxe_doc>The package of the type definition.</haxe_doc>
			</pack>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the type definition.</haxe_doc>
			</name>
			<meta>
				<x path="Null"><t path="haxe.macro.Metadata"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The optional metadata of the type definition.</haxe_doc>
			</meta>
			<kind>
				<e path="haxe.macro.TypeDefKind"/>
				<haxe_doc>The kind of the type definition.</haxe_doc>
			</kind>
			<isExtern>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Whether or not the type is extern.</haxe_doc>
			</isExtern>
			<fields>
				<c path="Array"><t path="haxe.macro.Field"/></c>
				<haxe_doc>The fields of the type definition.</haxe_doc>
			</fields>
			<doc>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The documentation of the type, if available. If the type has no
		documentation, the value is `null`.</haxe_doc>
			</doc>
		</a>
		<haxe_doc>Represents a type definition.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.ImportExpr" params="" file="/home/travis/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<a>
			<path>
				<c path="Array"><a>
	<pos><t path="haxe.macro.Position"/></pos>
	<name><c path="String"/></name>
</a></c>
				<haxe_doc>The path to the import expression.</haxe_doc>
			</path>
			<mode>
				<e path="haxe.macro.ImportMode"/>
				<haxe_doc>The mode of the import expression.</haxe_doc>
			</mode>
		</a>
		<haxe_doc>Represents the import expression.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.Ref" params="T" file="/home/travis/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<a>
			<toString set="method"><f a=""><c path="String"/></f></toString>
			<get set="method"><f a=""><c path="haxe.macro.Ref.T"/></f></get>
		</a>
		<haxe_doc>Represents a reference to internal compiler structure. It exists to avoid
	expensive encoding if it is not required and to ensure that physical
	equality remains intact.

	A structure is only encoded when user requests it through `ref.get()`.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.AnonType" params="" file="/home/travis/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<a>
			<status>
				<e path="haxe.macro.AnonStatus"/>
				<haxe_doc>The status/kind of the structure.</haxe_doc>
			</status>
			<fields>
				<c path="Array"><t path="haxe.macro.ClassField"/></c>
				<haxe_doc>The class fields of the structure.</haxe_doc>
			</fields>
		</a>
		<haxe_doc>Represents information for anonymous structure types.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.TypeParameter" params="" file="/home/travis/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<a>
			<t>
				<e path="haxe.macro.Type"/>
				<haxe_doc>The type of the type parameter. It is guaranteed to be a `TInst` with a
		`KTypeParameter` kind.</haxe_doc>
			</t>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the type parameter.</haxe_doc>
			</name>
		</a>
		<haxe_doc>Represents the declaration of type parameters.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.ClassField" params="" file="/home/travis/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<a>
			<type>
				<e path="haxe.macro.Type"/>
				<haxe_doc>The type of the class field.</haxe_doc>
			</type>
			<pos>
				<t path="haxe.macro.Position"/>
				<haxe_doc>The position of the class field.</haxe_doc>
			</pos>
			<params>
				<c path="Array"><t path="haxe.macro.TypeParameter"/></c>
				<haxe_doc>The type parameters of the class field.</haxe_doc>
			</params>
			<overloads>
				<t path="haxe.macro.Ref"><c path="Array"><t path="haxe.macro.ClassField"/></c></t>
				<haxe_doc>The overload fields of the class field.</haxe_doc>
			</overloads>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the class field.</haxe_doc>
			</name>
			<meta>
				<t path="haxe.macro.MetaAccess"/>
				<haxe_doc>The metadata of the class field.</haxe_doc>
			</meta>
			<kind>
				<e path="haxe.macro.FieldKind"/>
				<haxe_doc>The class field kind.</haxe_doc>
			</kind>
			<isPublic>
				<x path="Bool"/>
				<haxe_doc>Whether or not the class field is public.</haxe_doc>
			</isPublic>
			<isFinal>
				<x path="Bool"/>
				<haxe_doc>Whether or not the class field is final.</haxe_doc>
			</isFinal>
			<isExtern>
				<x path="Bool"/>
				<haxe_doc>Whether or not the class field is extern.</haxe_doc>
			</isExtern>
			<expr set="method">
				<f a=""><x path="Null"><t path="haxe.macro.TypedExpr"/></x></f>
				<haxe_doc>Returns the typed expression of the class field.</haxe_doc>
			</expr>
			<doc>
				<x path="Null"><c path="String"/></x>
				<haxe_doc>The associated documentation of the class field.</haxe_doc>
			</doc>
		</a>
		<haxe_doc>Represents a class field.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.EnumField" params="" file="/home/travis/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<a>
			<type>
				<e path="haxe.macro.Type"/>
				<haxe_doc>The type of the enum constructor.</haxe_doc>
			</type>
			<pos>
				<t path="haxe.macro.Position"/>
				<haxe_doc>The position of the enum constructor.</haxe_doc>
			</pos>
			<params>
				<c path="Array"><t path="haxe.macro.TypeParameter"/></c>
				<haxe_doc>The type parameters of the enum constructor.</haxe_doc>
			</params>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the enum constructor.</haxe_doc>
			</name>
			<meta>
				<t path="haxe.macro.MetaAccess"/>
				<haxe_doc>The metadata of the enum constructor.</haxe_doc>
			</meta>
			<index>
				<x path="Int"/>
				<haxe_doc>The index of the enum constructor, i.e. in which position it appears
		in the syntax.</haxe_doc>
			</index>
			<doc>
				<x path="Null"><c path="String"/></x>
				<haxe_doc>The associated documentation of the enum constructor.</haxe_doc>
			</doc>
		</a>
		<haxe_doc>Represents an enum constructor.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.BaseType" params="" file="/home/travis/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<a>
			<pos>
				<t path="haxe.macro.Position"/>
				<haxe_doc>The position of the type.</haxe_doc>
			</pos>
			<params>
				<c path="Array"><t path="haxe.macro.TypeParameter"/></c>
				<haxe_doc>The type parameters of the type.</haxe_doc>
			</params>
			<pack>
				<c path="Array"><c path="String"/></c>
				<haxe_doc>The package of the type.</haxe_doc>
			</pack>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the type.</haxe_doc>
			</name>
			<module>
				<c path="String"/>
				<haxe_doc>The module name of the type, which might be different.</haxe_doc>
			</module>
			<meta>
				<t path="haxe.macro.MetaAccess"/>
				<haxe_doc>The metadata of the type.</haxe_doc>
			</meta>
			<isPrivate>
				<x path="Bool"/>
				<haxe_doc>Whether or not the type is private.</haxe_doc>
			</isPrivate>
			<isExtern>
				<x path="Bool"/>
				<haxe_doc>Whether or not the type is extern.</haxe_doc>
			</isExtern>
			<exclude set="method">
				<f a=""><x path="Void"/></f>
				<haxe_doc>Allows excluding the type from compilation.</haxe_doc>
			</exclude>
			<doc>
				<x path="Null"><c path="String"/></x>
				<haxe_doc>The associated documentation of the class field.</haxe_doc>
			</doc>
		</a>
		<haxe_doc>The information that all types (`ClassType`, `EnumType`, `DefType`,
	`AbstractType`) have in common.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.ClassType" params="" file="/home/travis/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<a>
			<superClass>
				<x path="Null"><a>
	<t><t path="haxe.macro.Ref"><t path="haxe.macro.ClassType"/></t></t>
	<params><c path="Array"><e path="haxe.macro.Type"/></c></params>
</a></x>
				<haxe_doc>The parent class and its type parameters, if available.</haxe_doc>
			</superClass>
			<statics>
				<t path="haxe.macro.Ref"><c path="Array"><t path="haxe.macro.ClassField"/></c></t>
				<haxe_doc>The static fields of the class.</haxe_doc>
			</statics>
			<pos>
				<t path="haxe.macro.Position"/>
				<haxe_doc>The position of the type.</haxe_doc>
			</pos>
			<params>
				<c path="Array"><t path="haxe.macro.TypeParameter"/></c>
				<haxe_doc>The type parameters of the type.</haxe_doc>
			</params>
			<pack>
				<c path="Array"><c path="String"/></c>
				<haxe_doc>The package of the type.</haxe_doc>
			</pack>
			<overrides>
				<c path="Array"><t path="haxe.macro.Ref"><t path="haxe.macro.ClassField"/></t></c>
				<haxe_doc>The list of fields that have override status.</haxe_doc>
			</overrides>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the type.</haxe_doc>
			</name>
			<module>
				<c path="String"/>
				<haxe_doc>The module name of the type, which might be different.</haxe_doc>
			</module>
			<meta>
				<t path="haxe.macro.MetaAccess"/>
				<haxe_doc>The metadata of the type.</haxe_doc>
			</meta>
			<kind>
				<e path="haxe.macro.ClassKind"/>
				<haxe_doc>The kind of the class.</haxe_doc>
			</kind>
			<isPrivate>
				<x path="Bool"/>
				<haxe_doc>Whether or not the type is private.</haxe_doc>
			</isPrivate>
			<isInterface>
				<x path="Bool"/>
				<haxe_doc>If true the type is an interface, otherwise it is a class.</haxe_doc>
			</isInterface>
			<isFinal>
				<x path="Bool"/>
				<haxe_doc>If true the class is final and cannot be extended.</haxe_doc>
			</isFinal>
			<isExtern>
				<x path="Bool"/>
				<haxe_doc>Whether or not the type is extern.</haxe_doc>
			</isExtern>
			<interfaces>
				<c path="Array"><a>
	<t><t path="haxe.macro.Ref"><t path="haxe.macro.ClassType"/></t></t>
	<params><c path="Array"><e path="haxe.macro.Type"/></c></params>
</a></c>
				<haxe_doc>The implemented interfaces and their type parameters.</haxe_doc>
			</interfaces>
			<init>
				<x path="Null"><t path="haxe.macro.TypedExpr"/></x>
				<haxe_doc>The `__init__` expression of the class, if available.</haxe_doc>
			</init>
			<fields>
				<t path="haxe.macro.Ref"><c path="Array"><t path="haxe.macro.ClassField"/></c></t>
				<haxe_doc>The member fields of the class.</haxe_doc>
			</fields>
			<exclude set="method">
				<f a=""><x path="Void"/></f>
				<haxe_doc>Allows excluding the type from compilation.</haxe_doc>
			</exclude>
			<doc>
				<x path="Null"><c path="String"/></x>
				<haxe_doc>The associated documentation of the class field.</haxe_doc>
			</doc>
			<constructor>
				<x path="Null"><t path="haxe.macro.Ref"><t path="haxe.macro.ClassField"/></t></x>
				<haxe_doc>The constructor of the class, if available.</haxe_doc>
			</constructor>
		</a>
		<haxe_doc>Represents a class type.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.EnumType" params="" file="/home/travis/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<a>
			<pos>
				<t path="haxe.macro.Position"/>
				<haxe_doc>The position of the type.</haxe_doc>
			</pos>
			<params>
				<c path="Array"><t path="haxe.macro.TypeParameter"/></c>
				<haxe_doc>The type parameters of the type.</haxe_doc>
			</params>
			<pack>
				<c path="Array"><c path="String"/></c>
				<haxe_doc>The package of the type.</haxe_doc>
			</pack>
			<names>
				<c path="Array"><c path="String"/></c>
				<haxe_doc>An ordered list of enum constructor names.</haxe_doc>
			</names>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the type.</haxe_doc>
			</name>
			<module>
				<c path="String"/>
				<haxe_doc>The module name of the type, which might be different.</haxe_doc>
			</module>
			<meta>
				<t path="haxe.macro.MetaAccess"/>
				<haxe_doc>The metadata of the type.</haxe_doc>
			</meta>
			<isPrivate>
				<x path="Bool"/>
				<haxe_doc>Whether or not the type is private.</haxe_doc>
			</isPrivate>
			<isExtern>
				<x path="Bool"/>
				<haxe_doc>Whether or not the type is extern.</haxe_doc>
			</isExtern>
			<exclude set="method">
				<f a=""><x path="Void"/></f>
				<haxe_doc>Allows excluding the type from compilation.</haxe_doc>
			</exclude>
			<doc>
				<x path="Null"><c path="String"/></x>
				<haxe_doc>The associated documentation of the class field.</haxe_doc>
			</doc>
			<constructs>
				<t path="Map">
					<c path="String"/>
					<t path="haxe.macro.EnumField"/>
				</t>
				<haxe_doc>The available enum constructors.</haxe_doc>
			</constructs>
		</a>
		<haxe_doc>Represents an enum type.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.DefType" params="" file="/home/travis/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<a>
			<type>
				<e path="haxe.macro.Type"/>
				<haxe_doc>The target type of the typedef.</haxe_doc>
			</type>
			<pos>
				<t path="haxe.macro.Position"/>
				<haxe_doc>The position of the type.</haxe_doc>
			</pos>
			<params>
				<c path="Array"><t path="haxe.macro.TypeParameter"/></c>
				<haxe_doc>The type parameters of the type.</haxe_doc>
			</params>
			<pack>
				<c path="Array"><c path="String"/></c>
				<haxe_doc>The package of the type.</haxe_doc>
			</pack>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the type.</haxe_doc>
			</name>
			<module>
				<c path="String"/>
				<haxe_doc>The module name of the type, which might be different.</haxe_doc>
			</module>
			<meta>
				<t path="haxe.macro.MetaAccess"/>
				<haxe_doc>The metadata of the type.</haxe_doc>
			</meta>
			<isPrivate>
				<x path="Bool"/>
				<haxe_doc>Whether or not the type is private.</haxe_doc>
			</isPrivate>
			<isExtern>
				<x path="Bool"/>
				<haxe_doc>Whether or not the type is extern.</haxe_doc>
			</isExtern>
			<exclude set="method">
				<f a=""><x path="Void"/></f>
				<haxe_doc>Allows excluding the type from compilation.</haxe_doc>
			</exclude>
			<doc>
				<x path="Null"><c path="String"/></x>
				<haxe_doc>The associated documentation of the class field.</haxe_doc>
			</doc>
		</a>
		<haxe_doc>Represents a typedef.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.AbstractType" params="" file="/home/travis/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<a>
			<unops>
				<c path="Array"><a>
	<postFix><x path="Bool"/></postFix>
	<op><e path="haxe.macro.Unop"/></op>
	<field><t path="haxe.macro.ClassField"/></field>
</a></c>
				<haxe_doc>The defined unary operators of the abstract.</haxe_doc>
			</unops>
			<type>
				<e path="haxe.macro.Type"/>
				<haxe_doc>The underlying type of the abstract.</haxe_doc>
			</type>
			<to>
				<c path="Array"><a>
	<t><e path="haxe.macro.Type"/></t>
	<field><x path="Null"><t path="haxe.macro.ClassField"/></x></field>
</a></c>
				<haxe_doc>The available implicit to-casts of the abstract.

		@see https://haxe.org/manual/types-abstract-implicit-casts.html</haxe_doc>
			</to>
			<resolveWrite>
				<x path="Null"><t path="haxe.macro.ClassField"/></x>
				<haxe_doc>The method used for resolving unknown field access, if available.</haxe_doc>
			</resolveWrite>
			<resolve>
				<x path="Null"><t path="haxe.macro.ClassField"/></x>
				<haxe_doc>The method used for resolving unknown field access, if available.</haxe_doc>
			</resolve>
			<pos>
				<t path="haxe.macro.Position"/>
				<haxe_doc>The position of the type.</haxe_doc>
			</pos>
			<params>
				<c path="Array"><t path="haxe.macro.TypeParameter"/></c>
				<haxe_doc>The type parameters of the type.</haxe_doc>
			</params>
			<pack>
				<c path="Array"><c path="String"/></c>
				<haxe_doc>The package of the type.</haxe_doc>
			</pack>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the type.</haxe_doc>
			</name>
			<module>
				<c path="String"/>
				<haxe_doc>The module name of the type, which might be different.</haxe_doc>
			</module>
			<meta>
				<t path="haxe.macro.MetaAccess"/>
				<haxe_doc>The metadata of the type.</haxe_doc>
			</meta>
			<isPrivate>
				<x path="Bool"/>
				<haxe_doc>Whether or not the type is private.</haxe_doc>
			</isPrivate>
			<isExtern>
				<x path="Bool"/>
				<haxe_doc>Whether or not the type is extern.</haxe_doc>
			</isExtern>
			<impl>
				<x path="Null"><t path="haxe.macro.Ref"><t path="haxe.macro.ClassType"/></t></x>
				<haxe_doc>The implementation class of the abstract, if available.</haxe_doc>
			</impl>
			<from>
				<c path="Array"><a>
	<t><e path="haxe.macro.Type"/></t>
	<field><x path="Null"><t path="haxe.macro.ClassField"/></x></field>
</a></c>
				<haxe_doc>The available implicit from-casts of the abstract.

		@see https://haxe.org/manual/types-abstract-implicit-casts.html</haxe_doc>
			</from>
			<exclude set="method">
				<f a=""><x path="Void"/></f>
				<haxe_doc>Allows excluding the type from compilation.</haxe_doc>
			</exclude>
			<doc>
				<x path="Null"><c path="String"/></x>
				<haxe_doc>The associated documentation of the class field.</haxe_doc>
			</doc>
			<binops>
				<c path="Array"><a>
	<op><e path="haxe.macro.Binop"/></op>
	<field><t path="haxe.macro.ClassField"/></field>
</a></c>
				<haxe_doc>The defined binary operators of the abstract.</haxe_doc>
			</binops>
			<array>
				<c path="Array"><t path="haxe.macro.ClassField"/></c>
				<haxe_doc>The defined array-access fields of the abstract.</haxe_doc>
			</array>
		</a>
		<haxe_doc>Represents an abstract type.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.MetaAccess" params="" file="/home/travis/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<a>
			<remove set="method">
				<f a="name">
					<c path="String"/>
					<x path="Void"/>
				</f>
				<haxe_doc>Removes all `name` metadata entries from the origin of `this`
		MetaAccess.

		This method might clear several metadata entries of the same name.

		If a `Metadata` array is obtained through a call to `get`, a subsequent
		call to `remove` has no effect on that array.

		If `name` is null, compilation fails with an error.</haxe_doc>
			</remove>
			<has set="method">
				<f a="name">
					<c path="String"/>
					<x path="Bool"/>
				</f>
				<haxe_doc>Tells if the origin of `this` MetaAccess has a `name` metadata entry.

		If `name` is null, compilation fails with an error.</haxe_doc>
			</has>
			<get set="method">
				<f a=""><t path="haxe.macro.Metadata"/></f>
				<haxe_doc>Return the wrapped `Metadata` array.

		Modifying this array has no effect on the origin of `this` MetaAccess.
		The `add` and `remove` methods can be used for that.</haxe_doc>
			</get>
			<extract set="method">
				<f a="name">
					<c path="String"/>
					<c path="Array"><t path="haxe.macro.MetadataEntry"/></c>
				</f>
				<haxe_doc>Extract metadata entries by given `name`.

		If there's no metadata with such name, empty array `[]` is returned.

		If `name` is null, compilation fails with an error.</haxe_doc>
			</extract>
			<add set="method">
				<f a="name:params:pos">
					<c path="String"/>
					<c path="Array"><t path="haxe.macro.Expr"/></c>
					<t path="haxe.macro.Position"/>
					<x path="Void"/>
				</f>
				<haxe_doc>Adds the metadata specified by `name`, `params` and `pos` to the origin
		of `this` MetaAccess.

		Metadata names are not unique during compilation, so this method never
		overwrites a previous metadata.

		If a `Metadata` array is obtained through a call to `get`, a subsequent
		call to `add` has no effect on that array.

		If any argument is null, compilation fails with an error.</haxe_doc>
			</add>
		</a>
		<haxe_doc>MetaAccess is a wrapper for the `Metadata` array. It can be used to add
	metadata to and remove metadata from its origin.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.TVar" params="" file="/home/travis/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<a>
			<t set="null">
				<e path="haxe.macro.Type"/>
				<haxe_doc>The type of the variable.</haxe_doc>
			</t>
			<name set="null">
				<c path="String"/>
				<haxe_doc>The name of the variable.</haxe_doc>
			</name>
			<meta set="null">
				<x path="Null"><t path="haxe.macro.MetaAccess"/></x>
				<haxe_doc>The metadata of the variable.</haxe_doc>
			</meta>
			<id set="null">
				<x path="Int"/>
				<haxe_doc>The unique ID of the variable.</haxe_doc>
			</id>
			<extra set="null">
				<x path="Null"><a>
	<params><c path="Array"><t path="haxe.macro.TypeParameter"/></c></params>
	<expr><x path="Null"><t path="haxe.macro.TypedExpr"/></x></expr>
</a></x>
				<haxe_doc>Special information which is internally used to keep track of closure.
		information</haxe_doc>
			</extra>
			<capture set="null">
				<x path="Bool"/>
				<haxe_doc>Whether or not the variable has been captured by a closure.</haxe_doc>
			</capture>
		</a>
		<haxe_doc>Represents a variable in the typed AST.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.TFunc" params="" file="/home/travis/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<a>
			<t>
				<e path="haxe.macro.Type"/>
				<haxe_doc>The return type of the function.</haxe_doc>
			</t>
			<expr>
				<t path="haxe.macro.TypedExpr"/>
				<haxe_doc>The expression of the function body.</haxe_doc>
			</expr>
			<args>
				<c path="Array"><a>
	<value><x path="Null"><t path="haxe.macro.TypedExpr"/></x></value>
	<v><t path="haxe.macro.TVar"/></v>
</a></c>
				<haxe_doc>A list of function arguments identified by an argument variable `v` and
		an optional initialization `value`.</haxe_doc>
			</args>
		</a>
		<haxe_doc>Represents a function in the typed AST.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.TypedExpr" params="" file="/home/travis/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<a>
			<t>
				<e path="haxe.macro.Type"/>
				<haxe_doc>The type of the expression.</haxe_doc>
			</t>
			<pos>
				<t path="haxe.macro.Position"/>
				<haxe_doc>The position of the expression.</haxe_doc>
			</pos>
			<expr>
				<e path="haxe.macro.TypedExprDef"/>
				<haxe_doc>The expression kind.</haxe_doc>
			</expr>
		</a>
		<haxe_doc>Represents a typed AST node.</haxe_doc>
	</typedef>
	<abstract path="hxmath.frames.Frame2" params="" file="/home/travis/haxe/lib/hxmath/git/hxmath/frames/Frame2.hx">
		<from><icast><c path="hxmath.frames.IFrame2"/></icast></from>
		<this><c path="hxmath.frames.IFrame2"/></this>
		<haxe_doc>* A 2D affine frame with an offset and an angle. Frames allow you to transform between world/outer coordinates and
 * local/inner coordinates in a form that is more meaningful/less verbose compared to a matrix. Frames can be
 * concatenated, inverted, and converted to matrices.</haxe_doc>
		<meta><m n=":forward">
	<e>matrix</e>
	<e>offset</e>
	<e>angleDegrees</e>
</m></meta>
		<impl><class path="hxmath.frames._Frame2.Frame2_Impl_" params="" file="/home/travis/haxe/lib/hxmath/git/hxmath/frames/Frame2.hx" private="1" module="hxmath.frames.Frame2">
	<linearMatrix public="1" get="accessor" set="null" static="1">
		<x path="hxmath.math.Matrix2x2"/>
		<meta><m n=":impl"/></meta>
	</linearMatrix>
	<_new public="1" set="method" line="24" static="1">
		<f a="offset:angleDegrees">
			<x path="hxmath.math.Vector2"/>
			<x path="Float"/>
			<x path="hxmath.frames.Frame2"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
		<haxe_doc>* Constructor.
     * 
     * @param offset        The offset/translation of the origin of the frame.
     * @param angleDegrees  The angle/orientation of the frame.</haxe_doc>
	</_new>
	<calculateMatrix public="1" get="inline" set="null" line="37" static="1">
		<f a="matrix:offset:angleDegrees">
			<x path="hxmath.math.Matrix3x2"/>
			<x path="hxmath.math.Vector2"/>
			<x path="Float"/>
			<x path="hxmath.math.Matrix3x2"/>
		</f>
		<haxe_doc>* Set a matrix to the specified transformation in-place to avoid reallocation.
     * 
     * @param matrix        The matrix to set.    
     * @param offset        The offset/translation.
     * @param angleDegrees  The angle in degrees.
     * @return              The matrix that was passed in.</haxe_doc>
	</calculateMatrix>
	<lerp public="1" get="inline" set="null" line="53" static="1">
		<f a="frameA:frameB:t">
			<x path="hxmath.frames.Frame2"/>
			<x path="hxmath.frames.Frame2"/>
			<x path="Float"/>
			<x path="hxmath.frames.Frame2"/>
		</f>
		<haxe_doc>* Linearly interpolate between two frames.
     * 
     * @param frameA    The frame at t = 0
     * @param frameB    The frame at t = 1
     * @param t         A float in the range [0, 1]
     * @return          The interpolated frame</haxe_doc>
	</lerp>
	<concat public="1" get="inline" set="null" line="68" static="1">
		<f a="this:other">
			<c path="hxmath.frames.IFrame2"/>
			<x path="hxmath.frames.Frame2"/>
			<x path="hxmath.frames.Frame2"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>* Concat this frame with another frame to produce a new frame.
     * 
     * result = this * other
     * 
     * @param other     The transformation applied before this one.
     * @return          The combined result.</haxe_doc>
	</concat>
	<concatWith public="1" get="inline" set="null" line="83" static="1">
		<f a="this:other">
			<c path="hxmath.frames.IFrame2"/>
			<x path="hxmath.frames.Frame2"/>
			<x path="hxmath.frames.Frame2"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>* Concat this frame in place with another frame. The result (this') will transform like this followed by other.
     * 
     * this' = this * other
     * 
     * @param other     The transformation applied before this one.
     * @return          The combined result (this object).</haxe_doc>
	</concatWith>
	<transformFrom public="1" get="inline" set="null" line="98" static="1">
		<f a="this:p">
			<c path="hxmath.frames.IFrame2"/>
			<x path="hxmath.math.Vector2"/>
			<x path="hxmath.math.Vector2"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>* Transform a point from this frame into the outer frame (affine transformation).
     * 
     * @param p     The point to transform.
     * @return      The transformed point.</haxe_doc>
	</transformFrom>
	<transformTo public="1" get="inline" set="null" line="110" static="1">
		<f a="this:p">
			<c path="hxmath.frames.IFrame2"/>
			<x path="hxmath.math.Vector2"/>
			<x path="hxmath.math.Vector2"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>* Transform a point from the outer frame into this frame (affine transformation).
     * 
     * @param p     The point to transform.
     * @return      The transformed point.</haxe_doc>
	</transformTo>
	<linearTransformFrom public="1" get="inline" set="null" line="122" static="1">
		<f a="this:v">
			<c path="hxmath.frames.IFrame2"/>
			<x path="hxmath.math.Vector2"/>
			<x path="hxmath.math.Vector2"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>* Transform a vector from this frame into the outer frame (linear transformation).
     * 
     * @param v     The vector to transform.
     * @return      The transformed vector.</haxe_doc>
	</linearTransformFrom>
	<linearTransformTo public="1" get="inline" set="null" line="134" static="1">
		<f a="this:v">
			<c path="hxmath.frames.IFrame2"/>
			<x path="hxmath.math.Vector2"/>
			<x path="hxmath.math.Vector2"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>* Transform a vector from the outer frame into this frame (linear transformation).
     * 
     * @param v     The vector to transform.
     * @return      The transformed vector.</haxe_doc>
	</linearTransformTo>
	<inverse public="1" get="inline" set="null" line="145" static="1">
		<f a="this">
			<c path="hxmath.frames.IFrame2"/>
			<x path="hxmath.frames.Frame2"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>* Get the inverse frame (the effect of to/from will be swapped in the new frame).
     * 
     * @return      The inverse of this frame.</haxe_doc>
	</inverse>
	<clone public="1" get="inline" set="null" line="158" static="1">
		<f a="this">
			<c path="hxmath.frames.IFrame2"/>
			<x path="hxmath.frames.Frame2"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>* Clone.
     * 
     * @return  The clone.</haxe_doc>
	</clone>
	<get_linearMatrix get="inline" set="null" line="164" static="1">
		<f a="this">
			<c path="hxmath.frames.IFrame2"/>
			<x path="hxmath.math.Matrix2x2"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_linearMatrix>
	<meta><m n=":directlyUsed"/></meta>
</class></impl>
	</abstract>
	<class path="hxmath.frames._Frame2.Frame2_Impl_" params="" file="/home/travis/haxe/lib/hxmath/git/hxmath/frames/Frame2.hx" private="1" module="hxmath.frames.Frame2">
		<linearMatrix public="1" get="accessor" set="null" static="1">
			<x path="hxmath.math.Matrix2x2"/>
			<meta><m n=":impl"/></meta>
		</linearMatrix>
		<_new public="1" set="method" line="24" static="1">
			<f a="offset:angleDegrees">
				<x path="hxmath.math.Vector2"/>
				<x path="Float"/>
				<x path="hxmath.frames.Frame2"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
			<haxe_doc>* Constructor.
     * 
     * @param offset        The offset/translation of the origin of the frame.
     * @param angleDegrees  The angle/orientation of the frame.</haxe_doc>
		</_new>
		<calculateMatrix public="1" get="inline" set="null" line="37" static="1">
			<f a="matrix:offset:angleDegrees">
				<x path="hxmath.math.Matrix3x2"/>
				<x path="hxmath.math.Vector2"/>
				<x path="Float"/>
				<x path="hxmath.math.Matrix3x2"/>
			</f>
			<haxe_doc>* Set a matrix to the specified transformation in-place to avoid reallocation.
     * 
     * @param matrix        The matrix to set.    
     * @param offset        The offset/translation.
     * @param angleDegrees  The angle in degrees.
     * @return              The matrix that was passed in.</haxe_doc>
		</calculateMatrix>
		<lerp public="1" get="inline" set="null" line="53" static="1">
			<f a="frameA:frameB:t">
				<x path="hxmath.frames.Frame2"/>
				<x path="hxmath.frames.Frame2"/>
				<x path="Float"/>
				<x path="hxmath.frames.Frame2"/>
			</f>
			<haxe_doc>* Linearly interpolate between two frames.
     * 
     * @param frameA    The frame at t = 0
     * @param frameB    The frame at t = 1
     * @param t         A float in the range [0, 1]
     * @return          The interpolated frame</haxe_doc>
		</lerp>
		<concat public="1" get="inline" set="null" line="68" static="1">
			<f a="this:other">
				<c path="hxmath.frames.IFrame2"/>
				<x path="hxmath.frames.Frame2"/>
				<x path="hxmath.frames.Frame2"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>* Concat this frame with another frame to produce a new frame.
     * 
     * result = this * other
     * 
     * @param other     The transformation applied before this one.
     * @return          The combined result.</haxe_doc>
		</concat>
		<concatWith public="1" get="inline" set="null" line="83" static="1">
			<f a="this:other">
				<c path="hxmath.frames.IFrame2"/>
				<x path="hxmath.frames.Frame2"/>
				<x path="hxmath.frames.Frame2"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>* Concat this frame in place with another frame. The result (this') will transform like this followed by other.
     * 
     * this' = this * other
     * 
     * @param other     The transformation applied before this one.
     * @return          The combined result (this object).</haxe_doc>
		</concatWith>
		<transformFrom public="1" get="inline" set="null" line="98" static="1">
			<f a="this:p">
				<c path="hxmath.frames.IFrame2"/>
				<x path="hxmath.math.Vector2"/>
				<x path="hxmath.math.Vector2"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>* Transform a point from this frame into the outer frame (affine transformation).
     * 
     * @param p     The point to transform.
     * @return      The transformed point.</haxe_doc>
		</transformFrom>
		<transformTo public="1" get="inline" set="null" line="110" static="1">
			<f a="this:p">
				<c path="hxmath.frames.IFrame2"/>
				<x path="hxmath.math.Vector2"/>
				<x path="hxmath.math.Vector2"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>* Transform a point from the outer frame into this frame (affine transformation).
     * 
     * @param p     The point to transform.
     * @return      The transformed point.</haxe_doc>
		</transformTo>
		<linearTransformFrom public="1" get="inline" set="null" line="122" static="1">
			<f a="this:v">
				<c path="hxmath.frames.IFrame2"/>
				<x path="hxmath.math.Vector2"/>
				<x path="hxmath.math.Vector2"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>* Transform a vector from this frame into the outer frame (linear transformation).
     * 
     * @param v     The vector to transform.
     * @return      The transformed vector.</haxe_doc>
		</linearTransformFrom>
		<linearTransformTo public="1" get="inline" set="null" line="134" static="1">
			<f a="this:v">
				<c path="hxmath.frames.IFrame2"/>
				<x path="hxmath.math.Vector2"/>
				<x path="hxmath.math.Vector2"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>* Transform a vector from the outer frame into this frame (linear transformation).
     * 
     * @param v     The vector to transform.
     * @return      The transformed vector.</haxe_doc>
		</linearTransformTo>
		<inverse public="1" get="inline" set="null" line="145" static="1">
			<f a="this">
				<c path="hxmath.frames.IFrame2"/>
				<x path="hxmath.frames.Frame2"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>* Get the inverse frame (the effect of to/from will be swapped in the new frame).
     * 
     * @return      The inverse of this frame.</haxe_doc>
		</inverse>
		<clone public="1" get="inline" set="null" line="158" static="1">
			<f a="this">
				<c path="hxmath.frames.IFrame2"/>
				<x path="hxmath.frames.Frame2"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>* Clone.
     * 
     * @return  The clone.</haxe_doc>
		</clone>
		<get_linearMatrix get="inline" set="null" line="164" static="1">
			<f a="this">
				<c path="hxmath.frames.IFrame2"/>
				<x path="hxmath.math.Matrix2x2"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_linearMatrix>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="hxmath.frames.IFrame2" params="" file="/home/travis/haxe/lib/hxmath/git/hxmath/frames/IFrame2.hx" interface="1">
		<get_matrix public="1" set="method">
			<f a=""><x path="hxmath.math.Matrix3x2"/></f>
			<meta><m n=":compilerGenerated"/></meta>
		</get_matrix>
		<get_offset public="1" set="method">
			<f a=""><x path="hxmath.math.Vector2"/></f>
			<meta><m n=":compilerGenerated"/></meta>
		</get_offset>
		<set_offset public="1" set="method">
			<f a="value">
				<x path="hxmath.math.Vector2"/>
				<x path="hxmath.math.Vector2"/>
			</f>
			<meta><m n=":compilerGenerated"/></meta>
		</set_offset>
		<get_angleDegrees public="1" set="method">
			<f a=""><x path="Float"/></f>
			<meta><m n=":compilerGenerated"/></meta>
		</get_angleDegrees>
		<set_angleDegrees public="1" set="method">
			<f a="value">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":compilerGenerated"/></meta>
		</set_angleDegrees>
		<matrix public="1" get="accessor" set="null"><x path="hxmath.math.Matrix3x2"/></matrix>
		<offset public="1" get="accessor" set="accessor"><x path="hxmath.math.Vector2"/></offset>
		<angleDegrees public="1" get="accessor" set="accessor"><x path="Float"/></angleDegrees>
		<haxe_doc>* The shape over which all Frame2 operations are defined.</haxe_doc>
	</class>
	<class path="hxmath.frames.Frame2Default" params="" file="/home/travis/haxe/lib/hxmath/git/hxmath/frames/Frame2Default.hx">
		<implements path="hxmath.frames.IFrame2"/>
		<matrix public="1" get="accessor" set="null"><x path="hxmath.math.Matrix3x2"/></matrix>
		<offset public="1" get="accessor" set="accessor"><x path="hxmath.math.Vector2"/></offset>
		<angleDegrees public="1" get="accessor" set="accessor"><x path="Float"/></angleDegrees>
		<internalMatrix><x path="hxmath.math.Matrix3x2"/></internalMatrix>
		<internalOffset><x path="hxmath.math.Vector2"/></internalOffset>
		<internalAngleDegrees><x path="Float"/></internalAngleDegrees>
		<isCached expr="true">
			<x path="Bool"/>
			<meta><m n=":value"><e>true</e></m></meta>
		</isCached>
		<isDirty expr="true">
			<x path="Bool"/>
			<meta><m n=":value"><e>true</e></m></meta>
		</isDirty>
		<toString public="1" set="method" line="55"><f a=""><c path="String"/></f></toString>
		<get_matrix get="inline" set="null" line="60"><f a=""><x path="hxmath.math.Matrix3x2"/></f></get_matrix>
		<get_offset get="inline" set="null" line="72"><f a=""><x path="hxmath.math.Vector2"/></f></get_offset>
		<set_offset get="inline" set="null" line="77"><f a="offset">
	<x path="hxmath.math.Vector2"/>
	<x path="hxmath.math.Vector2"/>
</f></set_offset>
		<get_angleDegrees get="inline" set="null" line="84"><f a=""><x path="Float"/></f></get_angleDegrees>
		<set_angleDegrees get="inline" set="null" line="89"><f a="angleDegrees">
	<x path="Float"/>
	<x path="Float"/>
</f></set_angleDegrees>
		<new public="1" set="method" line="44">
			<f a="?offset:?angleDegrees:?isCached" v="null:0.0:true">
				<x path="hxmath.math.Vector2"/>
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ isCached : true, angleDegrees : 0.0, offset : null }</e></m></meta>
			<haxe_doc>* Constructor.
     * 
     * @param offset        The offset of the frame relative to the outer frame.
     * @param angleDegrees  The angle of the frame relative to the outer frame.
     * @param isCached      Cache the matrix if true.</haxe_doc>
		</new>
		<haxe_doc>* The default underlying type for Frame2.</haxe_doc>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="hxmath.math.IntVector2Default" params="" file="/home/travis/haxe/lib/hxmath/git/hxmath/math/IntVector2.hx" module="hxmath.math.IntVector2">
		<x public="1"><x path="Int"/></x>
		<y public="1"><x path="Int"/></y>
		<toString public="1" set="method" line="19"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method" line="13"><f a="x:y">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>* The default underlying type.</haxe_doc>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<abstract path="hxmath.math.IntVector2" params="" file="/home/travis/haxe/lib/hxmath/git/hxmath/math/IntVector2.hx">
		<from><icast><t path="hxmath.math.IntVector2Type"/></icast></from>
		<this><t path="hxmath.math.IntVector2Type"/></this>
		<to><icast><t path="hxmath.math.IntVector2Type"/></icast></to>
		<haxe_doc>* A 2D vector with integer values. Used primarily for indexing into 2D grids.</haxe_doc>
		<meta><m n=":forward">
	<e>x</e>
	<e>y</e>
</m></meta>
		<impl><class path="hxmath.math._IntVector2.IntVector2_Impl_" params="" file="/home/travis/haxe/lib/hxmath/git/hxmath/math/IntVector2.hx" private="1" module="hxmath.math.IntVector2">
	<elementCount public="1" get="inline" set="null" expr="2" line="32" static="1">
		<x path="Int"/>
		<meta><m n=":value"><e>2</e></m></meta>
	</elementCount>
	<zero public="1" get="accessor" set="null" static="1"><x path="hxmath.math.IntVector2"/></zero>
	<xAxis public="1" get="accessor" set="null" static="1"><x path="hxmath.math.IntVector2"/></xAxis>
	<yAxis public="1" get="accessor" set="null" static="1"><x path="hxmath.math.IntVector2"/></yAxis>
	<lengthSq public="1" get="accessor" set="null" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</lengthSq>
	<rotatedLeft public="1" get="accessor" set="null" static="1">
		<x path="hxmath.math.IntVector2"/>
		<meta><m n=":impl"/></meta>
	</rotatedLeft>
	<rotatedRight public="1" get="accessor" set="null" static="1">
		<x path="hxmath.math.IntVector2"/>
		<meta><m n=":impl"/></meta>
	</rotatedRight>
	<_new public="1" set="method" line="58" static="1">
		<f a="x:y">
			<x path="Int"/>
			<x path="Int"/>
			<x path="hxmath.math.IntVector2"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
		<haxe_doc>* Constructor.
     * 
     * @param x
     * @param y</haxe_doc>
	</_new>
	<fromArray public="1" get="inline" set="null" line="69" static="1">
		<f a="rawData">
			<c path="Array"><x path="Int"/></c>
			<x path="hxmath.math.IntVector2"/>
		</f>
		<haxe_doc>* Construct a IntVector2 from an array.
     * 
     * @param rawData   The input array.
     * @return          The constructed structure.</haxe_doc>
	</fromArray>
	<toVector2 public="1" get="inline" set="null" line="84" static="1">
		<f a="this">
			<t path="hxmath.math.IntVector2Type"/>
			<x path="hxmath.math.Vector2"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>* Convert to a IntVector2.
     * 
     * @return  The equivalent IntVector2.</haxe_doc>
	</toVector2>
	<dot public="1" get="inline" set="null" line="98" static="1">
		<f a="a:b">
			<x path="hxmath.math.IntVector2"/>
			<x path="hxmath.math.IntVector2"/>
			<x path="Int"/>
		</f>
		<meta><m n=":op"><e>A * B</e></m></meta>
		<haxe_doc>* Dot product.
     * 
     * @param a
     * @param b
     * @return      sum_i (a_i * b_i)</haxe_doc>
	</dot>
	<multiply public="1" get="inline" set="null" line="114" static="1">
		<f a="a:s">
			<x path="hxmath.math.IntVector2"/>
			<x path="Int"/>
			<x path="hxmath.math.IntVector2"/>
		</f>
		<meta>
			<m n=":op"><e>A * B</e></m>
			<m n=":commutative"/>
		</meta>
		<haxe_doc>* Multiply a scalar with a vector.
     * 
     * @param a
     * @param s
     * @return      s * a</haxe_doc>
	</multiply>
	<add public="1" get="inline" set="null" line="128" static="1">
		<f a="a:b">
			<x path="hxmath.math.IntVector2"/>
			<x path="hxmath.math.IntVector2"/>
			<x path="hxmath.math.IntVector2"/>
		</f>
		<meta><m n=":op"><e>A + B</e></m></meta>
		<haxe_doc>* Add two vectors.
     * 
     * @param a
     * @param b
     * @return      a + b</haxe_doc>
	</add>
	<subtract public="1" get="inline" set="null" line="142" static="1">
		<f a="a:b">
			<x path="hxmath.math.IntVector2"/>
			<x path="hxmath.math.IntVector2"/>
			<x path="hxmath.math.IntVector2"/>
		</f>
		<meta><m n=":op"><e>A - B</e></m></meta>
		<haxe_doc>* Subtract one vector from another.
     * 
     * @param a
     * @param b
     * @return      a - b</haxe_doc>
	</subtract>
	<negate public="1" get="inline" set="null" line="155" static="1">
		<f a="a">
			<x path="hxmath.math.IntVector2"/>
			<x path="hxmath.math.IntVector2"/>
		</f>
		<meta><m n=":op"><e>-A</e></m></meta>
		<haxe_doc>* Create a negated copy of a vector.
     * 
     * @param a
     * @return      -a</haxe_doc>
	</negate>
	<equals public="1" get="inline" set="null" line="171" static="1">
		<f a="a:b">
			<x path="hxmath.math.IntVector2"/>
			<x path="hxmath.math.IntVector2"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e>A == B</e></m></meta>
		<haxe_doc>* Test element-wise equality between two vectors.
     * False if one of the inputs is null and the other is not.
     * 
     * @param a
     * @param b
     * @return     a_i == b_i</haxe_doc>
	</equals>
	<max public="1" get="inline" set="null" line="187" static="1">
		<f a="a:b">
			<x path="hxmath.math.IntVector2"/>
			<x path="hxmath.math.IntVector2"/>
			<x path="hxmath.math.IntVector2"/>
		</f>
		<haxe_doc>* Returns a vector built from the componentwise max of the input vectors.
     * 
     * @param a
     * @param b
     * @return      max(a_i, b_i)</haxe_doc>
	</max>
	<min public="1" get="inline" set="null" line="200" static="1">
		<f a="a:b">
			<x path="hxmath.math.IntVector2"/>
			<x path="hxmath.math.IntVector2"/>
			<x path="hxmath.math.IntVector2"/>
		</f>
		<haxe_doc>* Returns a vector built from the componentwise min of the input vectors.
     * 
     * @param a
     * @param b
     * @return      min(a_i, b_i)</haxe_doc>
	</min>
	<set public="1" get="inline" set="null" line="213" static="1">
		<f a="this:x:y">
			<t path="hxmath.math.IntVector2Type"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="hxmath.math.IntVector2"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>* Sets all the fields of this structure without allocation.
     * 
     * @param x
     * @param y
     * @return self</haxe_doc>
	</set>
	<multiplyWith public="1" get="inline" set="null" line="230" static="1">
		<f a="this:s">
			<t path="hxmath.math.IntVector2Type"/>
			<x path="Int"/>
			<x path="hxmath.math.IntVector2"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>* Multiply a vector with a scalar in place.
     * Note: *= operator on Haxe abstracts does not behave this way (a new object is returned).
     * 
     * @param a
     * @return      self_i *= s</haxe_doc>
	</multiplyWith>
	<addWith public="1" get="inline" set="null" line="247" static="1">
		<f a="this:a">
			<t path="hxmath.math.IntVector2Type"/>
			<x path="hxmath.math.IntVector2"/>
			<x path="hxmath.math.IntVector2"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>* Add a vector in place.
     * Note: += operator on Haxe abstracts does not behave this way (a new object is returned).
     * 
     * @param a
     * @return      self_i += a_i</haxe_doc>
	</addWith>
	<subtractWith public="1" get="inline" set="null" line="264" static="1">
		<f a="this:a">
			<t path="hxmath.math.IntVector2Type"/>
			<x path="hxmath.math.IntVector2"/>
			<x path="hxmath.math.IntVector2"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>* Subtract a vector in place.
     * Note: -= operator on Haxe abstracts does not behave this way (a new object is returned).
     * 
     * @param a
     * @return      self_i -= a_i</haxe_doc>
	</subtractWith>
	<maxWith public="1" get="inline" set="null" line="281" static="1">
		<f a="this:a">
			<t path="hxmath.math.IntVector2Type"/>
			<x path="hxmath.math.IntVector2"/>
			<x path="hxmath.math.IntVector2"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>* Returns a vector built from the componentwise max of this vector and another.
     * 
     * @param a
     * @param b
     * @return      self_i = max(self_i, a_i)</haxe_doc>
	</maxWith>
	<minWith public="1" get="inline" set="null" line="298" static="1">
		<f a="this:a">
			<t path="hxmath.math.IntVector2Type"/>
			<x path="hxmath.math.IntVector2"/>
			<x path="hxmath.math.IntVector2"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>* Returns a vector built from the componentwise min of this vector and another.
     * 
     * @param a
     * @param b
     * @return      self_i = min(self_i, a_i)</haxe_doc>
	</minWith>
	<copyTo public="1" get="inline" set="null" line="314" static="1">
		<f a="this:target">
			<t path="hxmath.math.IntVector2Type"/>
			<x path="hxmath.math.IntVector2"/>
			<x path="Void"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>* Copy the contents of this structure to another.
     * Faster than copyToShape for static platforms (C++, etc) but requires the target to have the exact same inner type.
     * 
     * @param target    The target structure.</haxe_doc>
	</copyTo>
	<clone public="1" get="inline" set="null" line="329" static="1">
		<f a="this">
			<t path="hxmath.math.IntVector2Type"/>
			<x path="hxmath.math.IntVector2"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>* Clone.
     * 
     * @return  The cloned object.</haxe_doc>
	</clone>
	<getArrayElement public="1" get="inline" set="null" line="342" static="1">
		<f a="this:i">
			<t path="hxmath.math.IntVector2Type"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":arrayAccess"/>
		</meta>
		<haxe_doc>* Get an element by position.
     * 
     * @param i         The element index.
     * @return          The element.</haxe_doc>
	</getArrayElement>
	<setArrayElement public="1" get="inline" set="null" line="364" static="1">
		<f a="this:i:value">
			<t path="hxmath.math.IntVector2Type"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":arrayAccess"/>
		</meta>
		<haxe_doc>* Set an element by position.
     * 
     * @param i         The element index.
     * @param value     The new value.
     * @return          The updated element.</haxe_doc>
	</setArrayElement>
	<applyNegate public="1" get="inline" set="null" line="383" static="1">
		<f a="this">
			<t path="hxmath.math.IntVector2Type"/>
			<x path="hxmath.math.IntVector2"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>* Negate vector in-place.
     * 
     * @return  The modified object.</haxe_doc>
	</applyNegate>
	<applyScalarFunc public="1" get="inline" set="null" line="399" static="1">
		<f a="this:func">
			<t path="hxmath.math.IntVector2Type"/>
			<f a="">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<x path="hxmath.math.IntVector2"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>* Apply a scalar function to each element.
     * 
     * @param func  The function to apply.
     * @return      The modified object.</haxe_doc>
	</applyScalarFunc>
	<rotateLeft public="1" get="inline" set="null" line="416" static="1">
		<f a="this">
			<t path="hxmath.math.IntVector2Type"/>
			<x path="hxmath.math.IntVector2"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>* Rotate this vector by 90 degrees to the left/counterclockwise.
     * 
     * @return  The modified object. (-y, x)</haxe_doc>
	</rotateLeft>
	<rotateRight public="1" get="inline" set="null" line="432" static="1">
		<f a="this">
			<t path="hxmath.math.IntVector2Type"/>
			<x path="hxmath.math.IntVector2"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>* Rotate this vector by 90 degrees to the right/clockwise.
     * 
     * @return  The modified object. (y, -x)</haxe_doc>
	</rotateRight>
	<get_zero get="inline" set="null" line="443" static="1"><f a=""><x path="hxmath.math.IntVector2"/></f></get_zero>
	<get_xAxis get="inline" set="null" line="448" static="1"><f a=""><x path="hxmath.math.IntVector2"/></f></get_xAxis>
	<get_yAxis get="inline" set="null" line="453" static="1"><f a=""><x path="hxmath.math.IntVector2"/></f></get_yAxis>
	<get_lengthSq get="inline" set="null" line="458" static="1">
		<f a="this">
			<t path="hxmath.math.IntVector2Type"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_lengthSq>
	<get_rotatedLeft get="inline" set="null" line="466" static="1">
		<f a="this">
			<t path="hxmath.math.IntVector2Type"/>
			<x path="hxmath.math.IntVector2"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_rotatedLeft>
	<get_rotatedRight get="inline" set="null" line="473" static="1">
		<f a="this">
			<t path="hxmath.math.IntVector2Type"/>
			<x path="hxmath.math.IntVector2"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_rotatedRight>
	<meta><m n=":directlyUsed"/></meta>
</class></impl>
	</abstract>
	<class path="hxmath.math._IntVector2.IntVector2_Impl_" params="" file="/home/travis/haxe/lib/hxmath/git/hxmath/math/IntVector2.hx" private="1" module="hxmath.math.IntVector2">
		<elementCount public="1" get="inline" set="null" expr="2" line="32" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</elementCount>
		<zero public="1" get="accessor" set="null" static="1"><x path="hxmath.math.IntVector2"/></zero>
		<xAxis public="1" get="accessor" set="null" static="1"><x path="hxmath.math.IntVector2"/></xAxis>
		<yAxis public="1" get="accessor" set="null" static="1"><x path="hxmath.math.IntVector2"/></yAxis>
		<lengthSq public="1" get="accessor" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</lengthSq>
		<rotatedLeft public="1" get="accessor" set="null" static="1">
			<x path="hxmath.math.IntVector2"/>
			<meta><m n=":impl"/></meta>
		</rotatedLeft>
		<rotatedRight public="1" get="accessor" set="null" static="1">
			<x path="hxmath.math.IntVector2"/>
			<meta><m n=":impl"/></meta>
		</rotatedRight>
		<_new public="1" set="method" line="58" static="1">
			<f a="x:y">
				<x path="Int"/>
				<x path="Int"/>
				<x path="hxmath.math.IntVector2"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
			<haxe_doc>* Constructor.
     * 
     * @param x
     * @param y</haxe_doc>
		</_new>
		<fromArray public="1" get="inline" set="null" line="69" static="1">
			<f a="rawData">
				<c path="Array"><x path="Int"/></c>
				<x path="hxmath.math.IntVector2"/>
			</f>
			<haxe_doc>* Construct a IntVector2 from an array.
     * 
     * @param rawData   The input array.
     * @return          The constructed structure.</haxe_doc>
		</fromArray>
		<toVector2 public="1" get="inline" set="null" line="84" static="1">
			<f a="this">
				<t path="hxmath.math.IntVector2Type"/>
				<x path="hxmath.math.Vector2"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>* Convert to a IntVector2.
     * 
     * @return  The equivalent IntVector2.</haxe_doc>
		</toVector2>
		<dot public="1" get="inline" set="null" line="98" static="1">
			<f a="a:b">
				<x path="hxmath.math.IntVector2"/>
				<x path="hxmath.math.IntVector2"/>
				<x path="Int"/>
			</f>
			<meta><m n=":op"><e>A * B</e></m></meta>
			<haxe_doc>* Dot product.
     * 
     * @param a
     * @param b
     * @return      sum_i (a_i * b_i)</haxe_doc>
		</dot>
		<multiply public="1" get="inline" set="null" line="114" static="1">
			<f a="a:s">
				<x path="hxmath.math.IntVector2"/>
				<x path="Int"/>
				<x path="hxmath.math.IntVector2"/>
			</f>
			<meta>
				<m n=":op"><e>A * B</e></m>
				<m n=":commutative"/>
			</meta>
			<haxe_doc>* Multiply a scalar with a vector.
     * 
     * @param a
     * @param s
     * @return      s * a</haxe_doc>
		</multiply>
		<add public="1" get="inline" set="null" line="128" static="1">
			<f a="a:b">
				<x path="hxmath.math.IntVector2"/>
				<x path="hxmath.math.IntVector2"/>
				<x path="hxmath.math.IntVector2"/>
			</f>
			<meta><m n=":op"><e>A + B</e></m></meta>
			<haxe_doc>* Add two vectors.
     * 
     * @param a
     * @param b
     * @return      a + b</haxe_doc>
		</add>
		<subtract public="1" get="inline" set="null" line="142" static="1">
			<f a="a:b">
				<x path="hxmath.math.IntVector2"/>
				<x path="hxmath.math.IntVector2"/>
				<x path="hxmath.math.IntVector2"/>
			</f>
			<meta><m n=":op"><e>A - B</e></m></meta>
			<haxe_doc>* Subtract one vector from another.
     * 
     * @param a
     * @param b
     * @return      a - b</haxe_doc>
		</subtract>
		<negate public="1" get="inline" set="null" line="155" static="1">
			<f a="a">
				<x path="hxmath.math.IntVector2"/>
				<x path="hxmath.math.IntVector2"/>
			</f>
			<meta><m n=":op"><e>-A</e></m></meta>
			<haxe_doc>* Create a negated copy of a vector.
     * 
     * @param a
     * @return      -a</haxe_doc>
		</negate>
		<equals public="1" get="inline" set="null" line="171" static="1">
			<f a="a:b">
				<x path="hxmath.math.IntVector2"/>
				<x path="hxmath.math.IntVector2"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e>A == B</e></m></meta>
			<haxe_doc>* Test element-wise equality between two vectors.
     * False if one of the inputs is null and the other is not.
     * 
     * @param a
     * @param b
     * @return     a_i == b_i</haxe_doc>
		</equals>
		<max public="1" get="inline" set="null" line="187" static="1">
			<f a="a:b">
				<x path="hxmath.math.IntVector2"/>
				<x path="hxmath.math.IntVector2"/>
				<x path="hxmath.math.IntVector2"/>
			</f>
			<haxe_doc>* Returns a vector built from the componentwise max of the input vectors.
     * 
     * @param a
     * @param b
     * @return      max(a_i, b_i)</haxe_doc>
		</max>
		<min public="1" get="inline" set="null" line="200" static="1">
			<f a="a:b">
				<x path="hxmath.math.IntVector2"/>
				<x path="hxmath.math.IntVector2"/>
				<x path="hxmath.math.IntVector2"/>
			</f>
			<haxe_doc>* Returns a vector built from the componentwise min of the input vectors.
     * 
     * @param a
     * @param b
     * @return      min(a_i, b_i)</haxe_doc>
		</min>
		<set public="1" get="inline" set="null" line="213" static="1">
			<f a="this:x:y">
				<t path="hxmath.math.IntVector2Type"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="hxmath.math.IntVector2"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>* Sets all the fields of this structure without allocation.
     * 
     * @param x
     * @param y
     * @return self</haxe_doc>
		</set>
		<multiplyWith public="1" get="inline" set="null" line="230" static="1">
			<f a="this:s">
				<t path="hxmath.math.IntVector2Type"/>
				<x path="Int"/>
				<x path="hxmath.math.IntVector2"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>* Multiply a vector with a scalar in place.
     * Note: *= operator on Haxe abstracts does not behave this way (a new object is returned).
     * 
     * @param a
     * @return      self_i *= s</haxe_doc>
		</multiplyWith>
		<addWith public="1" get="inline" set="null" line="247" static="1">
			<f a="this:a">
				<t path="hxmath.math.IntVector2Type"/>
				<x path="hxmath.math.IntVector2"/>
				<x path="hxmath.math.IntVector2"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>* Add a vector in place.
     * Note: += operator on Haxe abstracts does not behave this way (a new object is returned).
     * 
     * @param a
     * @return      self_i += a_i</haxe_doc>
		</addWith>
		<subtractWith public="1" get="inline" set="null" line="264" static="1">
			<f a="this:a">
				<t path="hxmath.math.IntVector2Type"/>
				<x path="hxmath.math.IntVector2"/>
				<x path="hxmath.math.IntVector2"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>* Subtract a vector in place.
     * Note: -= operator on Haxe abstracts does not behave this way (a new object is returned).
     * 
     * @param a
     * @return      self_i -= a_i</haxe_doc>
		</subtractWith>
		<maxWith public="1" get="inline" set="null" line="281" static="1">
			<f a="this:a">
				<t path="hxmath.math.IntVector2Type"/>
				<x path="hxmath.math.IntVector2"/>
				<x path="hxmath.math.IntVector2"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>* Returns a vector built from the componentwise max of this vector and another.
     * 
     * @param a
     * @param b
     * @return      self_i = max(self_i, a_i)</haxe_doc>
		</maxWith>
		<minWith public="1" get="inline" set="null" line="298" static="1">
			<f a="this:a">
				<t path="hxmath.math.IntVector2Type"/>
				<x path="hxmath.math.IntVector2"/>
				<x path="hxmath.math.IntVector2"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>* Returns a vector built from the componentwise min of this vector and another.
     * 
     * @param a
     * @param b
     * @return      self_i = min(self_i, a_i)</haxe_doc>
		</minWith>
		<copyTo public="1" get="inline" set="null" line="314" static="1">
			<f a="this:target">
				<t path="hxmath.math.IntVector2Type"/>
				<x path="hxmath.math.IntVector2"/>
				<x path="Void"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>* Copy the contents of this structure to another.
     * Faster than copyToShape for static platforms (C++, etc) but requires the target to have the exact same inner type.
     * 
     * @param target    The target structure.</haxe_doc>
		</copyTo>
		<clone public="1" get="inline" set="null" line="329" static="1">
			<f a="this">
				<t path="hxmath.math.IntVector2Type"/>
				<x path="hxmath.math.IntVector2"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>* Clone.
     * 
     * @return  The cloned object.</haxe_doc>
		</clone>
		<getArrayElement public="1" get="inline" set="null" line="342" static="1">
			<f a="this:i">
				<t path="hxmath.math.IntVector2Type"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":arrayAccess"/>
			</meta>
			<haxe_doc>* Get an element by position.
     * 
     * @param i         The element index.
     * @return          The element.</haxe_doc>
		</getArrayElement>
		<setArrayElement public="1" get="inline" set="null" line="364" static="1">
			<f a="this:i:value">
				<t path="hxmath.math.IntVector2Type"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":arrayAccess"/>
			</meta>
			<haxe_doc>* Set an element by position.
     * 
     * @param i         The element index.
     * @param value     The new value.
     * @return          The updated element.</haxe_doc>
		</setArrayElement>
		<applyNegate public="1" get="inline" set="null" line="383" static="1">
			<f a="this">
				<t path="hxmath.math.IntVector2Type"/>
				<x path="hxmath.math.IntVector2"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>* Negate vector in-place.
     * 
     * @return  The modified object.</haxe_doc>
		</applyNegate>
		<applyScalarFunc public="1" get="inline" set="null" line="399" static="1">
			<f a="this:func">
				<t path="hxmath.math.IntVector2Type"/>
				<f a="">
					<x path="Int"/>
					<x path="Int"/>
				</f>
				<x path="hxmath.math.IntVector2"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>* Apply a scalar function to each element.
     * 
     * @param func  The function to apply.
     * @return      The modified object.</haxe_doc>
		</applyScalarFunc>
		<rotateLeft public="1" get="inline" set="null" line="416" static="1">
			<f a="this">
				<t path="hxmath.math.IntVector2Type"/>
				<x path="hxmath.math.IntVector2"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>* Rotate this vector by 90 degrees to the left/counterclockwise.
     * 
     * @return  The modified object. (-y, x)</haxe_doc>
		</rotateLeft>
		<rotateRight public="1" get="inline" set="null" line="432" static="1">
			<f a="this">
				<t path="hxmath.math.IntVector2Type"/>
				<x path="hxmath.math.IntVector2"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>* Rotate this vector by 90 degrees to the right/clockwise.
     * 
     * @return  The modified object. (y, -x)</haxe_doc>
		</rotateRight>
		<get_zero get="inline" set="null" line="443" static="1"><f a=""><x path="hxmath.math.IntVector2"/></f></get_zero>
		<get_xAxis get="inline" set="null" line="448" static="1"><f a=""><x path="hxmath.math.IntVector2"/></f></get_xAxis>
		<get_yAxis get="inline" set="null" line="453" static="1"><f a=""><x path="hxmath.math.IntVector2"/></f></get_yAxis>
		<get_lengthSq get="inline" set="null" line="458" static="1">
			<f a="this">
				<t path="hxmath.math.IntVector2Type"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_lengthSq>
		<get_rotatedLeft get="inline" set="null" line="466" static="1">
			<f a="this">
				<t path="hxmath.math.IntVector2Type"/>
				<x path="hxmath.math.IntVector2"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_rotatedLeft>
		<get_rotatedRight get="inline" set="null" line="473" static="1">
			<f a="this">
				<t path="hxmath.math.IntVector2Type"/>
				<x path="hxmath.math.IntVector2"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_rotatedRight>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<typedef path="hxmath.math.IntVector2Type" params="" file="/home/travis/haxe/lib/hxmath/git/hxmath/math/MathTypes.hx" module="hxmath.math.MathTypes">
		<c path="hxmath.math.IntVector2Default"/>
		<haxe_doc>* Default built-in types.</haxe_doc>
	</typedef>
	<typedef path="hxmath.math.Matrix2x2Type" params="" file="/home/travis/haxe/lib/hxmath/git/hxmath/math/MathTypes.hx" module="hxmath.math.MathTypes"><c path="hxmath.math.Matrix2x2Default"/></typedef>
	<typedef path="hxmath.math.Matrix3x2Type" params="" file="/home/travis/haxe/lib/hxmath/git/hxmath/math/MathTypes.hx" module="hxmath.math.MathTypes"><c path="hxmath.math.Matrix3x2Default"/></typedef>
	<typedef path="hxmath.math.Matrix3x3Type" params="" file="/home/travis/haxe/lib/hxmath/git/hxmath/math/MathTypes.hx" module="hxmath.math.MathTypes"><c path="hxmath.math.Matrix3x3Default"/></typedef>
	<typedef path="hxmath.math.Matrix4x4Type" params="" file="/home/travis/haxe/lib/hxmath/git/hxmath/math/MathTypes.hx" module="hxmath.math.MathTypes"><c path="hxmath.math.Matrix4x4Default"/></typedef>
	<typedef path="hxmath.math.QuaternionType" params="" file="/home/travis/haxe/lib/hxmath/git/hxmath/math/MathTypes.hx" module="hxmath.math.MathTypes"><c path="hxmath.math.QuaternionDefault"/></typedef>
	<typedef path="hxmath.math.Vector2Type" params="" file="/home/travis/haxe/lib/hxmath/git/hxmath/math/MathTypes.hx" module="hxmath.math.MathTypes"><c path="hxmath.math.Vector2Default"/></typedef>
	<typedef path="hxmath.math.Vector3Type" params="" file="/home/travis/haxe/lib/hxmath/git/hxmath/math/MathTypes.hx" module="hxmath.math.MathTypes"><c path="hxmath.math.Vector3Default"/></typedef>
	<typedef path="hxmath.math.Vector4Type" params="" file="/home/travis/haxe/lib/hxmath/git/hxmath/math/MathTypes.hx" module="hxmath.math.MathTypes"><c path="hxmath.math.Vector4Default"/></typedef>
	<abstract path="hxmath.math.Orient2DResult" params="" file="/home/travis/haxe/lib/hxmath/git/hxmath/math/MathUtil.hx" module="hxmath.math.MathUtil">
		<this><x path="Int"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="hxmath.math._MathUtil.Orient2DResult_Impl_" params="" file="/home/travis/haxe/lib/hxmath/git/hxmath/math/MathUtil.hx" private="1" module="hxmath.math.MathUtil" extern="1">
	<Left public="1" get="inline" set="null" expr="cast 1" line="6" static="1">
		<x path="hxmath.math.Orient2DResult"/>
		<meta>
			<m n=":value"><e>cast 1</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Left>
	<Colinear public="1" get="inline" set="null" expr="cast 0" line="7" static="1">
		<x path="hxmath.math.Orient2DResult"/>
		<meta>
			<m n=":value"><e>cast 0</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Colinear>
	<Right public="1" get="inline" set="null" expr="cast -1" line="8" static="1">
		<x path="hxmath.math.Orient2DResult"/>
		<meta>
			<m n=":value"><e>cast -1</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Right>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="hxmath.math._MathUtil.Orient2DResult_Impl_" params="" file="/home/travis/haxe/lib/hxmath/git/hxmath/math/MathUtil.hx" private="1" module="hxmath.math.MathUtil" extern="1">
		<Left public="1" get="inline" set="null" expr="cast 1" line="6" static="1">
			<x path="hxmath.math.Orient2DResult"/>
			<meta>
				<m n=":value"><e>cast 1</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Left>
		<Colinear public="1" get="inline" set="null" expr="cast 0" line="7" static="1">
			<x path="hxmath.math.Orient2DResult"/>
			<meta>
				<m n=":value"><e>cast 0</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Colinear>
		<Right public="1" get="inline" set="null" expr="cast -1" line="8" static="1">
			<x path="hxmath.math.Orient2DResult"/>
			<meta>
				<m n=":value"><e>cast -1</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Right>
		<meta><m n=":enum"/></meta>
	</class>
	<class path="hxmath.math.MathUtil" params="" file="/home/travis/haxe/lib/hxmath/git/hxmath/math/MathUtil.hx">
		<eps public="1" get="inline" set="null" expr="1e-6" line="14" static="1">
			<x path="Float"/>
			<meta><m n=":value"><e>1e-6</e></m></meta>
		</eps>
		<intMax public="1" get="inline" set="null" line="23" static="1">
			<f a="a:b">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>* Int max.
     * 
     * @param a
     * @param b
     * @return  max(a, b)</haxe_doc>
		</intMax>
		<intMin public="1" get="inline" set="null" line="35" static="1">
			<f a="a:b">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>* Int min.
     * 
     * @param a
     * @param b
     * @return  min(a, b)</haxe_doc>
		</intMin>
		<lerpCyclic public="1" get="inline" set="null" line="49" static="1">
			<f a="a:b:t:max">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>* Linear inteprolation for a cyclic coordinate.
     * 
     * @param a     The value at t = 0
     * @param b     The value at t = 1
     * @param t     A float in the range [0, 1]
     * @param max   a, b are numbers in a range [0, max) (e.g. for degrees: [0, 360))
     * @return      The interpolated value</haxe_doc>
		</lerpCyclic>
		<sign public="1" get="inline" set="null" line="75" static="1">
			<f a="x:?w" v=":0">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>{ w : 0 }</e></m></meta>
			<haxe_doc>* The sign function with a tolerance.
     * 
     * @param   x   The number to test.
     * @param   w   The width of the deadzone.
     * @return  Possible results: {-1, 0, +1}</haxe_doc>
		</sign>
		<rangeDistance public="1" get="inline" set="null" line="96" static="1">
			<f a="aStart:aWidth:bStart:bWidth">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>* Find the minimum distance between two ranges.
     * 
     * @param aStart
     * @param aWidth
     * @param bStart
     * @param bWidth
     * @return          The minimum distance between two ranges.</haxe_doc>
		</rangeDistance>
		<openRangeContains public="1" get="inline" set="null" line="120" static="1">
			<f a="aStart:aWidth:x">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>* Check to see if the open range (aStart, aStart + aWidth) contains the value x.
     * 
     * @param aStart
     * @param aWidth
     * @param x
     * @return          True if the range contains x.</haxe_doc>
		</openRangeContains>
		<openRangesIntersect public="1" get="inline" set="null" line="135" static="1">
			<f a="aStart:aWidth:bStart:bWidth">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>* Check to see if the open ranges (aStart, aStart + aWidth) and (bStart, bStart + bWidth) intersect.
     * 
     * @param    aStart
     * @param    aWidth
     * @param    bStart
     * @param    bWidth
     * @return              True if the ranges intersect.</haxe_doc>
		</openRangesIntersect>
		<closedRangeContains public="1" get="inline" set="null" line="149" static="1">
			<f a="aStart:aWidth:x">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>* Check to see if the closed range [aStart, aStart + aWidth] contains the value x.
     * 
     * @param aStart
     * @param aWidth
     * @param x
     * @return          True if the range contains x.</haxe_doc>
		</closedRangeContains>
		<radToDeg public="1" get="inline" set="null" line="159" static="1">
			<f a="rad">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>* Converts specified angle in radians to degrees.
    * @return angle in degrees (not normalized to 0...360)</haxe_doc>
		</radToDeg>
		<degToRad public="1" get="inline" set="null" line="167" static="1">
			<f a="deg">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>* Converts specified angle in degrees to radians.
    * @return angle in radians (not normalized to 0...Math.PI*2)</haxe_doc>
		</degToRad>
		<wrap public="1" get="inline" set="null" line="179" static="1">
			<f a="x:n">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>* Wrap a positive or negative number to between 0 and some exclusive positive bound.
     * 
     * @param    x    The number to wrap.
     * @param    n    The positive bound.
     * @return    The wrapped number in the range [0, n)</haxe_doc>
		</wrap>
		<clamp public="1" get="inline" set="null" line="200" static="1">
			<f a="value:min:max">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>* "Clamps" a value to boundaries [min, max].
    * Example:
    * clamp(2, 1, 5) == 2;
    * clamp(0, 1, 5) == 1;
    * clamp(6, 1, 5) == 5;</haxe_doc>
		</clamp>
		<orient2d public="1" get="inline" set="null" line="225" static="1">
			<f a="a:b:c">
				<x path="hxmath.math.Vector2"/>
				<x path="hxmath.math.Vector2"/>
				<x path="hxmath.math.Vector2"/>
				<x path="hxmath.math.Orient2DResult"/>
			</f>
			<haxe_doc>* 2D orientation predicate.
     * 
     * @param   a   The first point in the line ab.
     * @param   b   The second point in the line ab.
     * @param   c   The point to test against ab.
     * 
     * @return  The orientation of point c with regards to ab.</haxe_doc>
		</orient2d>
		<det2x2 public="1" get="inline" set="null" line="259" static="1">
			<f a="m00:m10:m01:m11">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>* Calculate the determinant of a 2x2 matrix in-place without creating a new matrix.
     * 
     * @param m00
     * @param m10
     * @param m01
     * @param m11
     * @return      The determinant.</haxe_doc>
		</det2x2>
		<det3x3 public="1" get="inline" set="null" line="280" static="1">
			<f a="m00:m10:m20:m01:m11:m21:m02:m12:m22">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>* Calculate the determinant of a 3x3 matrix in-place without creating a new matrix.
     * 
     * @param m00
     * @param m10
     * @param m20
     * @param m01
     * @param m11
     * @param m21
     * @param m02
     * @param m12
     * @param m22
     * @return      The determinant</haxe_doc>
		</det3x3>
		<det4x4 public="1" get="inline" set="null" line="318" static="1">
			<f a="m00:m10:m20:m30:m01:m11:m21:m31:m02:m12:m22:m32:m03:m13:m23:m33">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>* Calculate the determinant of a 4x4 matrix in-place without creating a new matrix.
     * 
     * @param m00
     * @param m10
     * @param m20
     * @param m30
     * @param m01
     * @param m11
     * @param m21
     * @param m31
     * @param m02
     * @param m12
     * @param m22
     * @param m32
     * @param m03
     * @param m13
     * @param m23
     * @param m33
     * @return      The determinant.</haxe_doc>
		</det4x4>
	</class>
	<typedef path="hxmath.math.Matrix2x2Shape" params="" file="/home/travis/haxe/lib/hxmath/git/hxmath/math/Matrix2x2.hx" module="hxmath.math.Matrix2x2"><a>
	<d><x path="Float"/></d>
	<c><x path="Float"/></c>
	<b><x path="Float"/></b>
	<a><x path="Float"/></a>
</a></typedef>
	<class path="hxmath.math.Matrix2x2Default" params="" file="/home/travis/haxe/lib/hxmath/git/hxmath/math/Matrix2x2.hx" module="hxmath.math.Matrix2x2">
		<a public="1"><x path="Float"/></a>
		<b public="1"><x path="Float"/></b>
		<c public="1"><x path="Float"/></c>
		<d public="1"><x path="Float"/></d>
		<toString public="1" set="method" line="39"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method" line="31"><f a="a:b:c:d">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>* The default underlying type.</haxe_doc>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<abstract path="hxmath.math.Matrix2x2" params="" file="/home/travis/haxe/lib/hxmath/git/hxmath/math/Matrix2x2.hx">
		<from>
			<icast><t path="hxmath.math.Matrix2x2Type"/></icast>
			<icast field="fromMatrix2x2Shape"><x path="hxmath.math.Matrix2x2"/></icast>
		</from>
		<this><t path="hxmath.math.Matrix2x2Type"/></this>
		<to><icast><t path="hxmath.math.Matrix2x2Type"/></icast></to>
		<haxe_doc>* 2x2 matrix for linear operations defined over a shape matching the 2x2 linear sub-matrix in flash.geom.Matrix.</haxe_doc>
		<meta><m n=":forward">
	<e>a</e>
	<e>b</e>
	<e>c</e>
	<e>d</e>
</m></meta>
		<impl><class path="hxmath.math._Matrix2x2.Matrix2x2_Impl_" params="" file="/home/travis/haxe/lib/hxmath/git/hxmath/math/Matrix2x2.hx" private="1" module="hxmath.math.Matrix2x2">
	<elementCount public="1" get="inline" set="null" expr="4" line="54" static="1">
		<x path="Int"/>
		<meta><m n=":value"><e>4</e></m></meta>
	</elementCount>
	<zero public="1" get="accessor" set="null" static="1"><x path="hxmath.math.Matrix2x2"/></zero>
	<identity public="1" get="accessor" set="null" static="1"><x path="hxmath.math.Matrix2x2"/></identity>
	<det public="1" get="accessor" set="null" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</det>
	<transpose public="1" get="accessor" set="null" static="1">
		<x path="hxmath.math.Matrix2x2"/>
		<meta><m n=":impl"/></meta>
	</transpose>
	<_new public="1" get="inline" set="null" line="78" static="1">
		<f a="a:b:c:d">
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="hxmath.math.Matrix2x2"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
		<haxe_doc>* Constructor.
     * 
     * Note: parameters are in row-major order for syntactic niceness.
     * 
     * @param a     m00
     * @param b     m01
     * @param c     m10
     * @param d     m11</haxe_doc>
	</_new>
	<fromArray public="1" get="inline" set="null" line="89" static="1">
		<f a="rawData">
			<c path="Array"><x path="Float"/></c>
			<x path="hxmath.math.Matrix2x2"/>
		</f>
		<haxe_doc>* Construct a Matrix2x2 from an array.
     * 
     * @param rawData   The input array.
     * @return          The constructed structure.</haxe_doc>
	</fromArray>
	<fromMatrix2x2Shape public="1" get="inline" set="null" line="106" static="1">
		<f a="other">
			<x path="hxmath.math.Matrix2x2"/>
			<x path="hxmath.math.Matrix2x2"/>
		</f>
		<meta><m n=":from"/></meta>
		<haxe_doc>* Convert a shape-similar matrix.
     * 
     * @param other     The matrix to convert.
     * @return          The hxmath equivalent.</haxe_doc>
	</fromMatrix2x2Shape>
	<multiplyScalar public="1" get="inline" set="null" line="119" static="1">
		<f a="s:m">
			<x path="Float"/>
			<x path="hxmath.math.Matrix2x2"/>
			<x path="hxmath.math.Matrix2x2"/>
		</f>
		<meta><m n=":op"><e>A * B</e></m></meta>
		<haxe_doc>* Multiply a scalar with a matrix.
     * 
     * @param s
     * @param m
     * @return      s * m</haxe_doc>
	</multiplyScalar>
	<multiplyVector public="1" get="inline" set="null" line="134" static="1">
		<f a="m:v">
			<x path="hxmath.math.Matrix2x2"/>
			<x path="hxmath.math.Vector2"/>
			<x path="hxmath.math.Vector2"/>
		</f>
		<meta><m n=":op"><e>A * B</e></m></meta>
		<haxe_doc>* Multiply a matrix with a vector.
     * 
     * @param m
     * @param v
     * @return      m * v</haxe_doc>
	</multiplyVector>
	<multiply public="1" get="inline" set="null" line="149" static="1">
		<f a="m:n">
			<x path="hxmath.math.Matrix2x2"/>
			<x path="hxmath.math.Matrix2x2"/>
			<x path="hxmath.math.Matrix2x2"/>
		</f>
		<meta><m n=":op"><e>A * B</e></m></meta>
		<haxe_doc>* Multiply two matrices.
     * 
     * @param m
     * @param n
     * @return      m * n</haxe_doc>
	</multiply>
	<add public="1" get="inline" set="null" line="166" static="1">
		<f a="m:n">
			<x path="hxmath.math.Matrix2x2"/>
			<x path="hxmath.math.Matrix2x2"/>
			<x path="hxmath.math.Matrix2x2"/>
		</f>
		<meta><m n=":op"><e>A + B</e></m></meta>
		<haxe_doc>* Add two matrices.
     * 
     * @param m
     * @param n
     * @return      m + n</haxe_doc>
	</add>
	<subtract public="1" get="inline" set="null" line="180" static="1">
		<f a="m:n">
			<x path="hxmath.math.Matrix2x2"/>
			<x path="hxmath.math.Matrix2x2"/>
			<x path="hxmath.math.Matrix2x2"/>
		</f>
		<meta><m n=":op"><e>A - B</e></m></meta>
		<haxe_doc>* Subtract one matrix from another.
     * 
     * @param m
     * @param n
     * @return      m - n</haxe_doc>
	</subtract>
	<negate public="1" get="inline" set="null" line="193" static="1">
		<f a="m">
			<x path="hxmath.math.Matrix2x2"/>
			<x path="hxmath.math.Matrix2x2"/>
		</f>
		<meta><m n=":op"><e>-A</e></m></meta>
		<haxe_doc>* Create a negated copy of a matrix.
     * 
     * @param m
     * @return      -m</haxe_doc>
	</negate>
	<equals public="1" get="inline" set="null" line="209" static="1">
		<f a="m:n">
			<x path="hxmath.math.Matrix2x2"/>
			<x path="hxmath.math.Matrix2x2"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e>A == B</e></m></meta>
		<haxe_doc>* Test element-wise equality between two matrices.
     * False if one of the inputs is null and the other is not.
     * 
     * @param m
     * @param n
     * @return      m_ij == n_ij</haxe_doc>
	</equals>
	<rotate public="1" get="inline" set="null" line="226" static="1">
		<f a="angle">
			<x path="Float"/>
			<x path="hxmath.math.Matrix2x2"/>
		</f>
		<haxe_doc>* Counter-clockwise rotation.
     * 
     * @param angle     The angle to rotate (in radians).
     * @return          The rotation matrix.</haxe_doc>
	</rotate>
	<scale public="1" get="inline" set="null" line="240" static="1">
		<f a="sx:sy">
			<x path="Float"/>
			<x path="Float"/>
			<x path="hxmath.math.Matrix2x2"/>
		</f>
		<haxe_doc>* Non-uniform scale matrix.
     * 
     * @param sx    The amount to scale along the X axis.
     * @param sy    The amount to scale along the Y axis.
     * @return      The scale matrix.</haxe_doc>
	</scale>
	<setRotate public="1" get="inline" set="null" line="253" static="1">
		<f a="this:angle">
			<t path="hxmath.math.Matrix2x2Type"/>
			<x path="Float"/>
			<x path="hxmath.math.Matrix2x2"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>* Set this matrix to a counter-clockwise rotation.
     * 
     * @param angle     The angle to rotate (in radians).
     * @return          This.</haxe_doc>
	</setRotate>
	<set public="1" get="inline" set="null" line="277" static="1">
		<f a="this:a:b:c:d">
			<t path="hxmath.math.Matrix2x2Type"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="hxmath.math.Matrix2x2"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>* Sets all the fields of this structure without allocation.
     * 
     * @param a
     * @param b
     * @param c
     * @param d
     * @return self</haxe_doc>
	</set>
	<addWith public="1" get="inline" set="null" line="296" static="1">
		<f a="this:m">
			<t path="hxmath.math.Matrix2x2Type"/>
			<x path="hxmath.math.Matrix2x2"/>
			<x path="hxmath.math.Matrix2x2"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>* Add a matrix in place.
     * Note: += operator on Haxe abstracts does not behave this way (a new object is returned).
     * 
     * @param m
     * @return      self_ij += m_ij</haxe_doc>
	</addWith>
	<subtractWith public="1" get="inline" set="null" line="315" static="1">
		<f a="this:m">
			<t path="hxmath.math.Matrix2x2Type"/>
			<x path="hxmath.math.Matrix2x2"/>
			<x path="hxmath.math.Matrix2x2"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>* Subtract a matrix in place.
     * Note: -= operator on Haxe abstracts does not behave this way (a new object is returned).
     * 
     * @param m
     * @return      self_ij -= m_ij</haxe_doc>
	</subtractWith>
	<copyTo public="1" get="inline" set="null" line="333" static="1">
		<f a="this:target">
			<t path="hxmath.math.Matrix2x2Type"/>
			<x path="hxmath.math.Matrix2x2"/>
			<x path="Void"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>* Copy the contents of this structure to another.
     * Faster than copyToShape for static platforms (C++, etc) but requires the target to have the exact same inner type.
     * 
     * @param target    The target structure.</haxe_doc>
	</copyTo>
	<copyToShape public="1" get="inline" set="null" line="348" static="1">
		<f a="this:target">
			<t path="hxmath.math.Matrix2x2Type"/>
			<t path="hxmath.math.Matrix2x2Shape"/>
			<x path="Void"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>* Copy the contents of this structure to another (shape-similar) instance.
     * 
     * @param target    The target structure.</haxe_doc>
	</copyToShape>
	<copyFromShape public="1" get="inline" set="null" line="363" static="1">
		<f a="this:source">
			<t path="hxmath.math.Matrix2x2Type"/>
			<t path="hxmath.math.Matrix2x2Shape"/>
			<x path="Void"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>* Copy the contents of another (shape-similar) instance to this structure.
     * 
     * @param source    The source structure.</haxe_doc>
	</copyFromShape>
	<clone public="1" get="inline" set="null" line="378" static="1">
		<f a="this">
			<t path="hxmath.math.Matrix2x2Type"/>
			<x path="hxmath.math.Matrix2x2"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>* Clone.
     * 
     * @return  The cloned object.</haxe_doc>
	</clone>
	<getArrayElement public="1" get="inline" set="null" line="395" static="1">
		<f a="this:i">
			<t path="hxmath.math.Matrix2x2Type"/>
			<x path="Int"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":arrayAccess"/>
		</meta>
		<haxe_doc>* Get an element by position.
     * The implicit array is row-major (e.g. element (column count) + 1 is the first element of the second row).
     * 
     * @param i         The element index.
     * @return          The element.</haxe_doc>
	</getArrayElement>
	<setArrayElement public="1" get="inline" set="null" line="423" static="1">
		<f a="this:i:value">
			<t path="hxmath.math.Matrix2x2Type"/>
			<x path="Int"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":arrayAccess"/>
		</meta>
		<haxe_doc>* Set an element by position.
     * The implicit array is row-major (e.g. element (column count) + 1 is the first element of the second row).
     * 
     * @param i         The element index.
     * @param value     The new value.
     * @return          The updated element.</haxe_doc>
	</setArrayElement>
	<getElement public="1" get="inline" set="null" line="450" static="1">
		<f a="this:column:row">
			<t path="hxmath.math.Matrix2x2Type"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>* Get an element by (column, row) indices.
     * Both column and row indices start at 0, e.g. the index of the first element of the first row is (0, 0).
     * 
     * @param column    The column index.
     * @param row       The row index.
     * @return          The element.</haxe_doc>
	</getElement>
	<setElement public="1" get="inline" set="null" line="465" static="1">
		<f a="this:column:row:value">
			<t path="hxmath.math.Matrix2x2Type"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>* Set an element by (column, row) indices.
     * Both column and row indices start at 0, e.g. the index of the first element of the first row is (0, 0).
     * 
     * @param column    The column index.
     * @param row       The row index.
     * @param value     The new value.
     * @return          The updated element.</haxe_doc>
	</setElement>
	<col public="1" get="inline" set="null" line="477" static="1">
		<f a="this:index">
			<t path="hxmath.math.Matrix2x2Type"/>
			<x path="Int"/>
			<x path="hxmath.math.Vector2"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>* Get a column vector by index.
     * 
     * @param index     The 0-based index of the column.
     * @return          The column as a vector.</haxe_doc>
	</col>
	<row public="1" get="inline" set="null" line="498" static="1">
		<f a="this:index">
			<t path="hxmath.math.Matrix2x2Type"/>
			<x path="Int"/>
			<x path="hxmath.math.Vector2"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>* Get a row vector by index.
     * 
     * @param index     The 0-based index of the row.
     * @return          The row as a vector.</haxe_doc>
	</row>
	<transposeMultiplyVector public="1" get="inline" set="null" line="519" static="1">
		<f a="this:v">
			<t path="hxmath.math.Matrix2x2Type"/>
			<x path="hxmath.math.Vector2"/>
			<x path="hxmath.math.Vector2"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>* Multiply the tranpose of the matrix with a vector. Useful for fast inverse rotations.
     * 
     * @param v     The vector to multiply with.
     * @return      this^T * v.</haxe_doc>
	</transposeMultiplyVector>
	<applyScalarFunc public="1" get="inline" set="null" line="534" static="1">
		<f a="this:func">
			<t path="hxmath.math.Matrix2x2Type"/>
			<f a="">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<x path="hxmath.math.Matrix2x2"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>* Apply a scalar function to each element.
     * 
     * @param func  The function to apply.
     * @return      The modified object.</haxe_doc>
	</applyScalarFunc>
	<get_zero get="inline" set="null" line="546" static="1"><f a=""><x path="hxmath.math.Matrix2x2"/></f></get_zero>
	<get_identity get="inline" set="null" line="553" static="1"><f a=""><x path="hxmath.math.Matrix2x2"/></f></get_identity>
	<get_det get="inline" set="null" line="560" static="1">
		<f a="this">
			<t path="hxmath.math.Matrix2x2Type"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_det>
	<get_transpose get="inline" set="null" line="568" static="1">
		<f a="this">
			<t path="hxmath.math.Matrix2x2Type"/>
			<x path="hxmath.math.Matrix2x2"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_transpose>
</class></impl>
	</abstract>
	<class path="hxmath.math._Matrix2x2.Matrix2x2_Impl_" params="" file="/home/travis/haxe/lib/hxmath/git/hxmath/math/Matrix2x2.hx" private="1" module="hxmath.math.Matrix2x2">
		<elementCount public="1" get="inline" set="null" expr="4" line="54" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>4</e></m></meta>
		</elementCount>
		<zero public="1" get="accessor" set="null" static="1"><x path="hxmath.math.Matrix2x2"/></zero>
		<identity public="1" get="accessor" set="null" static="1"><x path="hxmath.math.Matrix2x2"/></identity>
		<det public="1" get="accessor" set="null" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</det>
		<transpose public="1" get="accessor" set="null" static="1">
			<x path="hxmath.math.Matrix2x2"/>
			<meta><m n=":impl"/></meta>
		</transpose>
		<_new public="1" get="inline" set="null" line="78" static="1">
			<f a="a:b:c:d">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="hxmath.math.Matrix2x2"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
			<haxe_doc>* Constructor.
     * 
     * Note: parameters are in row-major order for syntactic niceness.
     * 
     * @param a     m00
     * @param b     m01
     * @param c     m10
     * @param d     m11</haxe_doc>
		</_new>
		<fromArray public="1" get="inline" set="null" line="89" static="1">
			<f a="rawData">
				<c path="Array"><x path="Float"/></c>
				<x path="hxmath.math.Matrix2x2"/>
			</f>
			<haxe_doc>* Construct a Matrix2x2 from an array.
     * 
     * @param rawData   The input array.
     * @return          The constructed structure.</haxe_doc>
		</fromArray>
		<fromMatrix2x2Shape public="1" get="inline" set="null" line="106" static="1">
			<f a="other">
				<x path="hxmath.math.Matrix2x2"/>
				<x path="hxmath.math.Matrix2x2"/>
			</f>
			<meta><m n=":from"/></meta>
			<haxe_doc>* Convert a shape-similar matrix.
     * 
     * @param other     The matrix to convert.
     * @return          The hxmath equivalent.</haxe_doc>
		</fromMatrix2x2Shape>
		<multiplyScalar public="1" get="inline" set="null" line="119" static="1">
			<f a="s:m">
				<x path="Float"/>
				<x path="hxmath.math.Matrix2x2"/>
				<x path="hxmath.math.Matrix2x2"/>
			</f>
			<meta><m n=":op"><e>A * B</e></m></meta>
			<haxe_doc>* Multiply a scalar with a matrix.
     * 
     * @param s
     * @param m
     * @return      s * m</haxe_doc>
		</multiplyScalar>
		<multiplyVector public="1" get="inline" set="null" line="134" static="1">
			<f a="m:v">
				<x path="hxmath.math.Matrix2x2"/>
				<x path="hxmath.math.Vector2"/>
				<x path="hxmath.math.Vector2"/>
			</f>
			<meta><m n=":op"><e>A * B</e></m></meta>
			<haxe_doc>* Multiply a matrix with a vector.
     * 
     * @param m
     * @param v
     * @return      m * v</haxe_doc>
		</multiplyVector>
		<multiply public="1" get="inline" set="null" line="149" static="1">
			<f a="m:n">
				<x path="hxmath.math.Matrix2x2"/>
				<x path="hxmath.math.Matrix2x2"/>
				<x path="hxmath.math.Matrix2x2"/>
			</f>
			<meta><m n=":op"><e>A * B</e></m></meta>
			<haxe_doc>* Multiply two matrices.
     * 
     * @param m
     * @param n
     * @return      m * n</haxe_doc>
		</multiply>
		<add public="1" get="inline" set="null" line="166" static="1">
			<f a="m:n">
				<x path="hxmath.math.Matrix2x2"/>
				<x path="hxmath.math.Matrix2x2"/>
				<x path="hxmath.math.Matrix2x2"/>
			</f>
			<meta><m n=":op"><e>A + B</e></m></meta>
			<haxe_doc>* Add two matrices.
     * 
     * @param m
     * @param n
     * @return      m + n</haxe_doc>
		</add>
		<subtract public="1" get="inline" set="null" line="180" static="1">
			<f a="m:n">
				<x path="hxmath.math.Matrix2x2"/>
				<x path="hxmath.math.Matrix2x2"/>
				<x path="hxmath.math.Matrix2x2"/>
			</f>
			<meta><m n=":op"><e>A - B</e></m></meta>
			<haxe_doc>* Subtract one matrix from another.
     * 
     * @param m
     * @param n
     * @return      m - n</haxe_doc>
		</subtract>
		<negate public="1" get="inline" set="null" line="193" static="1">
			<f a="m">
				<x path="hxmath.math.Matrix2x2"/>
				<x path="hxmath.math.Matrix2x2"/>
			</f>
			<meta><m n=":op"><e>-A</e></m></meta>
			<haxe_doc>* Create a negated copy of a matrix.
     * 
     * @param m
     * @return      -m</haxe_doc>
		</negate>
		<equals public="1" get="inline" set="null" line="209" static="1">
			<f a="m:n">
				<x path="hxmath.math.Matrix2x2"/>
				<x path="hxmath.math.Matrix2x2"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e>A == B</e></m></meta>
			<haxe_doc>* Test element-wise equality between two matrices.
     * False if one of the inputs is null and the other is not.
     * 
     * @param m
     * @param n
     * @return      m_ij == n_ij</haxe_doc>
		</equals>
		<rotate public="1" get="inline" set="null" line="226" static="1">
			<f a="angle">
				<x path="Float"/>
				<x path="hxmath.math.Matrix2x2"/>
			</f>
			<haxe_doc>* Counter-clockwise rotation.
     * 
     * @param angle     The angle to rotate (in radians).
     * @return          The rotation matrix.</haxe_doc>
		</rotate>
		<scale public="1" get="inline" set="null" line="240" static="1">
			<f a="sx:sy">
				<x path="Float"/>
				<x path="Float"/>
				<x path="hxmath.math.Matrix2x2"/>
			</f>
			<haxe_doc>* Non-uniform scale matrix.
     * 
     * @param sx    The amount to scale along the X axis.
     * @param sy    The amount to scale along the Y axis.
     * @return      The scale matrix.</haxe_doc>
		</scale>
		<setRotate public="1" get="inline" set="null" line="253" static="1">
			<f a="this:angle">
				<t path="hxmath.math.Matrix2x2Type"/>
				<x path="Float"/>
				<x path="hxmath.math.Matrix2x2"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>* Set this matrix to a counter-clockwise rotation.
     * 
     * @param angle     The angle to rotate (in radians).
     * @return          This.</haxe_doc>
		</setRotate>
		<set public="1" get="inline" set="null" line="277" static="1">
			<f a="this:a:b:c:d">
				<t path="hxmath.math.Matrix2x2Type"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="hxmath.math.Matrix2x2"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>* Sets all the fields of this structure without allocation.
     * 
     * @param a
     * @param b
     * @param c
     * @param d
     * @return self</haxe_doc>
		</set>
		<addWith public="1" get="inline" set="null" line="296" static="1">
			<f a="this:m">
				<t path="hxmath.math.Matrix2x2Type"/>
				<x path="hxmath.math.Matrix2x2"/>
				<x path="hxmath.math.Matrix2x2"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>* Add a matrix in place.
     * Note: += operator on Haxe abstracts does not behave this way (a new object is returned).
     * 
     * @param m
     * @return      self_ij += m_ij</haxe_doc>
		</addWith>
		<subtractWith public="1" get="inline" set="null" line="315" static="1">
			<f a="this:m">
				<t path="hxmath.math.Matrix2x2Type"/>
				<x path="hxmath.math.Matrix2x2"/>
				<x path="hxmath.math.Matrix2x2"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>* Subtract a matrix in place.
     * Note: -= operator on Haxe abstracts does not behave this way (a new object is returned).
     * 
     * @param m
     * @return      self_ij -= m_ij</haxe_doc>
		</subtractWith>
		<copyTo public="1" get="inline" set="null" line="333" static="1">
			<f a="this:target">
				<t path="hxmath.math.Matrix2x2Type"/>
				<x path="hxmath.math.Matrix2x2"/>
				<x path="Void"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>* Copy the contents of this structure to another.
     * Faster than copyToShape for static platforms (C++, etc) but requires the target to have the exact same inner type.
     * 
     * @param target    The target structure.</haxe_doc>
		</copyTo>
		<copyToShape public="1" get="inline" set="null" line="348" static="1">
			<f a="this:target">
				<t path="hxmath.math.Matrix2x2Type"/>
				<t path="hxmath.math.Matrix2x2Shape"/>
				<x path="Void"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>* Copy the contents of this structure to another (shape-similar) instance.
     * 
     * @param target    The target structure.</haxe_doc>
		</copyToShape>
		<copyFromShape public="1" get="inline" set="null" line="363" static="1">
			<f a="this:source">
				<t path="hxmath.math.Matrix2x2Type"/>
				<t path="hxmath.math.Matrix2x2Shape"/>
				<x path="Void"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>* Copy the contents of another (shape-similar) instance to this structure.
     * 
     * @param source    The source structure.</haxe_doc>
		</copyFromShape>
		<clone public="1" get="inline" set="null" line="378" static="1">
			<f a="this">
				<t path="hxmath.math.Matrix2x2Type"/>
				<x path="hxmath.math.Matrix2x2"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>* Clone.
     * 
     * @return  The cloned object.</haxe_doc>
		</clone>
		<getArrayElement public="1" get="inline" set="null" line="395" static="1">
			<f a="this:i">
				<t path="hxmath.math.Matrix2x2Type"/>
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":arrayAccess"/>
			</meta>
			<haxe_doc>* Get an element by position.
     * The implicit array is row-major (e.g. element (column count) + 1 is the first element of the second row).
     * 
     * @param i         The element index.
     * @return          The element.</haxe_doc>
		</getArrayElement>
		<setArrayElement public="1" get="inline" set="null" line="423" static="1">
			<f a="this:i:value">
				<t path="hxmath.math.Matrix2x2Type"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":arrayAccess"/>
			</meta>
			<haxe_doc>* Set an element by position.
     * The implicit array is row-major (e.g. element (column count) + 1 is the first element of the second row).
     * 
     * @param i         The element index.
     * @param value     The new value.
     * @return          The updated element.</haxe_doc>
		</setArrayElement>
		<getElement public="1" get="inline" set="null" line="450" static="1">
			<f a="this:column:row">
				<t path="hxmath.math.Matrix2x2Type"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>* Get an element by (column, row) indices.
     * Both column and row indices start at 0, e.g. the index of the first element of the first row is (0, 0).
     * 
     * @param column    The column index.
     * @param row       The row index.
     * @return          The element.</haxe_doc>
		</getElement>
		<setElement public="1" get="inline" set="null" line="465" static="1">
			<f a="this:column:row:value">
				<t path="hxmath.math.Matrix2x2Type"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>* Set an element by (column, row) indices.
     * Both column and row indices start at 0, e.g. the index of the first element of the first row is (0, 0).
     * 
     * @param column    The column index.
     * @param row       The row index.
     * @param value     The new value.
     * @return          The updated element.</haxe_doc>
		</setElement>
		<col public="1" get="inline" set="null" line="477" static="1">
			<f a="this:index">
				<t path="hxmath.math.Matrix2x2Type"/>
				<x path="Int"/>
				<x path="hxmath.math.Vector2"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>* Get a column vector by index.
     * 
     * @param index     The 0-based index of the column.
     * @return          The column as a vector.</haxe_doc>
		</col>
		<row public="1" get="inline" set="null" line="498" static="1">
			<f a="this:index">
				<t path="hxmath.math.Matrix2x2Type"/>
				<x path="Int"/>
				<x path="hxmath.math.Vector2"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>* Get a row vector by index.
     * 
     * @param index     The 0-based index of the row.
     * @return          The row as a vector.</haxe_doc>
		</row>
		<transposeMultiplyVector public="1" get="inline" set="null" line="519" static="1">
			<f a="this:v">
				<t path="hxmath.math.Matrix2x2Type"/>
				<x path="hxmath.math.Vector2"/>
				<x path="hxmath.math.Vector2"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>* Multiply the tranpose of the matrix with a vector. Useful for fast inverse rotations.
     * 
     * @param v     The vector to multiply with.
     * @return      this^T * v.</haxe_doc>
		</transposeMultiplyVector>
		<applyScalarFunc public="1" get="inline" set="null" line="534" static="1">
			<f a="this:func">
				<t path="hxmath.math.Matrix2x2Type"/>
				<f a="">
					<x path="Float"/>
					<x path="Float"/>
				</f>
				<x path="hxmath.math.Matrix2x2"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>* Apply a scalar function to each element.
     * 
     * @param func  The function to apply.
     * @return      The modified object.</haxe_doc>
		</applyScalarFunc>
		<get_zero get="inline" set="null" line="546" static="1"><f a=""><x path="hxmath.math.Matrix2x2"/></f></get_zero>
		<get_identity get="inline" set="null" line="553" static="1"><f a=""><x path="hxmath.math.Matrix2x2"/></f></get_identity>
		<get_det get="inline" set="null" line="560" static="1">
			<f a="this">
				<t path="hxmath.math.Matrix2x2Type"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_det>
		<get_transpose get="inline" set="null" line="568" static="1">
			<f a="this">
				<t path="hxmath.math.Matrix2x2Type"/>
				<x path="hxmath.math.Matrix2x2"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_transpose>
	</class>
	<typedef path="hxmath.math.Matrix3x2Shape" params="" file="/home/travis/haxe/lib/hxmath/git/hxmath/math/Matrix3x2.hx" module="hxmath.math.Matrix3x2"><a>
	<ty><x path="Float"/></ty>
	<tx><x path="Float"/></tx>
	<d><x path="Float"/></d>
	<c><x path="Float"/></c>
	<b><x path="Float"/></b>
	<a><x path="Float"/></a>
</a></typedef>
	<class path="hxmath.math.Matrix3x2Default" params="" file="/home/travis/haxe/lib/hxmath/git/hxmath/math/Matrix3x2.hx" module="hxmath.math.Matrix3x2">
		<a public="1"><x path="Float"/></a>
		<b public="1"><x path="Float"/></b>
		<c public="1"><x path="Float"/></c>
		<d public="1"><x path="Float"/></d>
		<tx public="1"><x path="Float"/></tx>
		<ty public="1"><x path="Float"/></ty>
		<toString public="1" set="method" line="48"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method" line="38"><f a="a:b:c:d:tx:ty">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>* The default underlying type.</haxe_doc>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<abstract path="hxmath.math.Matrix3x2" params="" file="/home/travis/haxe/lib/hxmath/git/hxmath/math/Matrix3x2.hx">
		<from>
			<icast><t path="hxmath.math.Matrix3x2Type"/></icast>
			<icast field="fromMatrix3x2Shape"><x path="hxmath.math.Matrix3x2"/></icast>
		</from>
		<this><t path="hxmath.math.Matrix3x2Type"/></this>
		<to><icast><t path="hxmath.math.Matrix3x2Type"/></icast></to>
		<haxe_doc>* 3x2 matrix for mixed affine/linear operations defined over a shape matching flash.geom.Matrix.</haxe_doc>
		<meta><m n=":forward">
	<e>a</e>
	<e>b</e>
	<e>c</e>
	<e>d</e>
	<e>tx</e>
	<e>ty</e>
</m></meta>
		<impl><class path="hxmath.math._Matrix3x2.Matrix3x2_Impl_" params="" file="/home/travis/haxe/lib/hxmath/git/hxmath/math/Matrix3x2.hx" private="1" module="hxmath.math.Matrix3x2">
	<elementCount public="1" get="inline" set="null" expr="6" line="64" static="1">
		<x path="Int"/>
		<meta><m n=":value"><e>6</e></m></meta>
	</elementCount>
	<zero public="1" get="accessor" set="null" static="1"><x path="hxmath.math.Matrix3x2"/></zero>
	<identity public="1" get="accessor" set="null" static="1"><x path="hxmath.math.Matrix3x2"/></identity>
	<t public="1" get="accessor" set="accessor" static="1">
		<x path="hxmath.math.Vector2"/>
		<meta><m n=":impl"/></meta>
	</t>
	<linearSubMatrix public="1" get="accessor" set="accessor" static="1">
		<x path="hxmath.math.Matrix2x2"/>
		<meta><m n=":impl"/></meta>
	</linearSubMatrix>
	<_new public="1" get="inline" set="null" line="90" static="1">
		<f a="a:b:c:d:tx:ty">
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="hxmath.math.Matrix3x2"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
		<haxe_doc>* Constructor.
     * 
     * Note: column-major ordering. (a, b) is the first column, (c, d) is the second, (tx, ty) is the third.
     * 
     * @param a     m00
     * @param b     m01
     * @param c     m10
     * @param d     m11
     * @param tx    m20
     * @param ty    m21</haxe_doc>
	</_new>
	<fromArray public="1" get="inline" set="null" line="101" static="1">
		<f a="rawData">
			<c path="Array"><x path="Float"/></c>
			<x path="hxmath.math.Matrix3x2"/>
		</f>
		<haxe_doc>* Construct a Matrix3x2 from an array.
     * 
     * @param rawData   The input array.
     * @return          The constructed structure.</haxe_doc>
	</fromArray>
	<fromMatrix3x2Shape public="1" get="inline" set="null" line="118" static="1">
		<f a="other">
			<x path="hxmath.math.Matrix3x2"/>
			<x path="hxmath.math.Matrix3x2"/>
		</f>
		<meta><m n=":from"/></meta>
		<haxe_doc>* Convert a shape-similar matrix.
     * 
     * @param other     The matrix to convert.
     * @return          The hxmath equivalent.</haxe_doc>
	</fromMatrix3x2Shape>
	<multiplyScalar public="1" get="inline" set="null" line="131" static="1">
		<f a="s:m">
			<x path="Float"/>
			<x path="hxmath.math.Matrix3x2"/>
			<x path="hxmath.math.Matrix3x2"/>
		</f>
		<meta><m n=":op"><e>A * B</e></m></meta>
		<haxe_doc>* Multiply a scalar with a matrix.
     * 
     * @param s
     * @param m
     * @return      s * m</haxe_doc>
	</multiplyScalar>
	<transform public="1" get="inline" set="null" line="148" static="1">
		<f a="m:v">
			<x path="hxmath.math.Matrix3x2"/>
			<x path="hxmath.math.Vector2"/>
			<x path="hxmath.math.Vector2"/>
		</f>
		<meta><m n=":op"><e>A * B</e></m></meta>
		<haxe_doc>* Homegenous matrix*vector product (treats the input vector as though it is a Vector3 with a 1 for the z element).
     * Allows translation and linear (e.g. rotation, scale) transformations to be stored in the same matrix.
     * 
     * @param m     The matrix holding the transformation.
     * @param v     The vector to transform
     * @return      The transformed vector.</haxe_doc>
	</transform>
	<concat public="1" get="inline" set="null" line="162" static="1">
		<f a="m:n">
			<x path="hxmath.math.Matrix3x2"/>
			<x path="hxmath.math.Matrix3x2"/>
			<x path="hxmath.math.Matrix3x2"/>
		</f>
		<meta><m n=":op"><e>A * B</e></m></meta>
		<haxe_doc>* Concatenate two transformations.
     * Treated as homogenous matrix multiplication, i.e. there is an implicit 3rd row [0, 0, 1] in both matrices
     * 
     * @param m     The first matrix (the second transformation in the order of application).
     * @param n     The second matrix (the first transformation in the order of application).
     * @return      The combined transformation matrix.</haxe_doc>
	</concat>
	<add public="1" get="inline" set="null" line="188" static="1">
		<f a="m:n">
			<x path="hxmath.math.Matrix3x2"/>
			<x path="hxmath.math.Matrix3x2"/>
			<x path="hxmath.math.Matrix3x2"/>
		</f>
		<meta><m n=":op"><e>A + B</e></m></meta>
		<haxe_doc>* Add two matrices.
     * 
     * @param m
     * @param n
     * @return      m + n</haxe_doc>
	</add>
	<subtract public="1" get="inline" set="null" line="202" static="1">
		<f a="m:n">
			<x path="hxmath.math.Matrix3x2"/>
			<x path="hxmath.math.Matrix3x2"/>
			<x path="hxmath.math.Matrix3x2"/>
		</f>
		<meta><m n=":op"><e>A - B</e></m></meta>
		<haxe_doc>* Subtract one matrix from another.
     * 
     * @param m
     * @param n
     * @return      m - n</haxe_doc>
	</subtract>
	<negate public="1" get="inline" set="null" line="215" static="1">
		<f a="m">
			<x path="hxmath.math.Matrix3x2"/>
			<x path="hxmath.math.Matrix3x2"/>
		</f>
		<meta><m n=":op"><e>-A</e></m></meta>
		<haxe_doc>* Create a negated copy of a matrix.
     * 
     * @param m
     * @return      -m</haxe_doc>
	</negate>
	<equals public="1" get="inline" set="null" line="233" static="1">
		<f a="m:n">
			<x path="hxmath.math.Matrix3x2"/>
			<x path="hxmath.math.Matrix3x2"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e>A == B</e></m></meta>
		<haxe_doc>* Test element-wise equality between two matrices.
     * False if one of the inputs is null and the other is not.
     * 
     * @param m
     * @param n
     * @return      m_ij == n_ij</haxe_doc>
	</equals>
	<rotate public="1" get="inline" set="null" line="252" static="1">
		<f a="angle">
			<x path="Float"/>
			<x path="hxmath.math.Matrix3x2"/>
		</f>
		<haxe_doc>* Rotate by a given angle.
     * 
     * @param angle     The angle to rotate by (ccw).
     * @return          The matrix.</haxe_doc>
	</rotate>
	<translate public="1" get="inline" set="null" line="265" static="1">
		<f a="v">
			<x path="hxmath.math.Vector2"/>
			<x path="hxmath.math.Matrix3x2"/>
		</f>
		<haxe_doc>* Translate by a given vector.
     * 
     * @param v     The vector to translate by.
     * @return      The matrix.</haxe_doc>
	</translate>
	<orbit public="1" get="inline" set="null" line="281" static="1">
		<f a="center:angle">
			<x path="hxmath.math.Vector2"/>
			<x path="Float"/>
			<x path="hxmath.math.Matrix3x2"/>
		</f>
		<haxe_doc>* Orbit around a given center point. The matrix is equivalent to the following composition:
     *
     * Matrix3x2.translate(center) * Matrix3x2.rotate(angle) * Matrix3x2.translate(-center)
     * 
     * @param center    The point to rotate around.
     * @param angle     The angle to rotate ccw around the center.
     * @return          The matrix.</haxe_doc>
	</orbit>
	<copyTo public="1" get="inline" set="null" line="295" static="1">
		<f a="this:target">
			<t path="hxmath.math.Matrix3x2Type"/>
			<x path="hxmath.math.Matrix3x2"/>
			<x path="Void"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>* Copy the contents of this structure to another.
     * Faster than copyToShape for static platforms (C++, etc) but requires the target to have the exact same inner type.
     * 
     * @param target    The target structure.</haxe_doc>
	</copyTo>
	<copyToShape public="1" get="inline" set="null" line="310" static="1">
		<f a="this:target">
			<t path="hxmath.math.Matrix3x2Type"/>
			<t path="hxmath.math.Matrix3x2Shape"/>
			<x path="Void"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>* Copy the contents of this structure to another (shape-similar) instance.
     * 
     * @param target    The target structure.</haxe_doc>
	</copyToShape>
	<copyFromShape public="1" get="inline" set="null" line="327" static="1">
		<f a="this:source">
			<t path="hxmath.math.Matrix3x2Type"/>
			<t path="hxmath.math.Matrix3x2Shape"/>
			<x path="Void"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>* Copy the contents of another (shape-similar) instance to this structure.
     * 
     * @param source    The source structure.</haxe_doc>
	</copyFromShape>
	<setRotate public="1" get="inline" set="null" line="345" static="1">
		<f a="this:angle">
			<t path="hxmath.math.Matrix3x2Type"/>
			<x path="Float"/>
			<x path="hxmath.math.Matrix3x2"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>* Set the upper-left 2x2 matrix to a counter-clockwise rotation.
     * 
     * @param angle     The angle to rotate (in radians).
     * @return          This.</haxe_doc>
	</setRotate>
	<setTranslate public="1" get="inline" set="null" line="367" static="1">
		<f a="this:x:y">
			<t path="hxmath.math.Matrix3x2Type"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="hxmath.math.Matrix3x2"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>* Set the right column to a translation
     * 
     * @param x
     * @param y
     * @return          This.</haxe_doc>
	</setTranslate>
	<set public="1" get="inline" set="null" line="388" static="1">
		<f a="this:a:b:c:d:tx:ty">
			<t path="hxmath.math.Matrix3x2Type"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="hxmath.math.Matrix3x2"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>* Sets all the fields of this structure without allocation.
     * 
     * @param a
     * @param b
     * @param c
     * @param d
     * @param tx
     * @param ty
     * @return self</haxe_doc>
	</set>
	<addWith public="1" get="inline" set="null" line="409" static="1">
		<f a="this:m">
			<t path="hxmath.math.Matrix3x2Type"/>
			<x path="hxmath.math.Matrix3x2"/>
			<x path="hxmath.math.Matrix3x2"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>* Add a matrix in place.
     * Note: += operator on Haxe abstracts does not behave this way (a new object is returned).
     * 
     * @param m
     * @return      self_ij += m_ij</haxe_doc>
	</addWith>
	<subtractWith public="1" get="inline" set="null" line="430" static="1">
		<f a="this:m">
			<t path="hxmath.math.Matrix3x2Type"/>
			<x path="hxmath.math.Matrix3x2"/>
			<x path="hxmath.math.Matrix3x2"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>* Subtract a matrix in place.
     * Note: -= operator on Haxe abstracts does not behave this way (a new object is returned).
     * 
     * @param m
     * @return      self_ij -= m_ij</haxe_doc>
	</subtractWith>
	<clone public="1" get="inline" set="null" line="449" static="1">
		<f a="this">
			<t path="hxmath.math.Matrix3x2Type"/>
			<x path="hxmath.math.Matrix3x2"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>* Clone.
     * 
     * @return  The cloned object.</haxe_doc>
	</clone>
	<getArrayElement public="1" get="inline" set="null" line="466" static="1">
		<f a="this:i">
			<t path="hxmath.math.Matrix3x2Type"/>
			<x path="Int"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":arrayAccess"/>
		</meta>
		<haxe_doc>* Get an element by position.
     * The implicit array is row-major (e.g. element (column count) + 1 is the first element of the second row).
     * 
     * @param i         The element index.
     * @return          The element.</haxe_doc>
	</getArrayElement>
	<setArrayElement public="1" get="inline" set="null" line="498" static="1">
		<f a="this:i:value">
			<t path="hxmath.math.Matrix3x2Type"/>
			<x path="Int"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":arrayAccess"/>
		</meta>
		<haxe_doc>* Set an element by position.
     * The implicit array is row-major (e.g. element (column count) + 1 is the first element of the second row).
     * 
     * @param i         The element index.
     * @param value     The new value.
     * @return          The updated element.</haxe_doc>
	</setArrayElement>
	<getElement public="1" get="inline" set="null" line="529" static="1">
		<f a="this:column:row">
			<t path="hxmath.math.Matrix3x2Type"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>* Get an element by (column, row) indices.
     * Both column and row indices start at 0, e.g. the index of the first element of the first row is (0, 0).
     * 
     * @param column    The column index.
     * @param row       The row index.
     * @return          The element.</haxe_doc>
	</getElement>
	<setElement public="1" get="inline" set="null" line="544" static="1">
		<f a="this:column:row:value">
			<t path="hxmath.math.Matrix3x2Type"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>* Set an element by (column, row) indices.
     * Both column and row indices start at 0, e.g. the index of the first element of the first row is (0, 0).
     * 
     * @param column    The column index.
     * @param row       The row index.
     * @param value     The new value.
     * @return          The updated element.</haxe_doc>
	</setElement>
	<col public="1" get="inline" set="null" line="556" static="1">
		<f a="this:index">
			<t path="hxmath.math.Matrix3x2Type"/>
			<x path="Int"/>
			<x path="hxmath.math.Vector2"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>* Get a column vector by index.
     * 
     * @param index     The 0-based index of the column.
     * @return          The column as a vector.</haxe_doc>
	</col>
	<row public="1" get="inline" set="null" line="579" static="1">
		<f a="this:index">
			<t path="hxmath.math.Matrix3x2Type"/>
			<x path="Int"/>
			<x path="hxmath.math.Vector3"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>* Get a row vector by index.
     * 
     * @param index     The 0-based index of the row.
     * @return          The row as a vector.</haxe_doc>
	</row>
	<applyScalarFunc public="1" get="inline" set="null" line="600" static="1">
		<f a="this:func">
			<t path="hxmath.math.Matrix3x2Type"/>
			<f a="">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<x path="hxmath.math.Matrix3x2"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>* Apply a scalar function to each element.
     * 
     * @param func  The function to apply.
     * @return      The modified object.</haxe_doc>
	</applyScalarFunc>
	<applySubMatrixTranspose public="1" get="inline" set="null" line="617" static="1">
		<f a="this">
			<t path="hxmath.math.Matrix3x2Type"/>
			<x path="hxmath.math.Matrix3x2"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>* Transpose the upper 2x2 block (the linear sub-matrix in a homogenous matrix).
     * 
     * @return  The modified object.</haxe_doc>
	</applySubMatrixTranspose>
	<applyInvertFrame public="1" get="inline" set="null" line="637" static="1">
		<f a="this">
			<t path="hxmath.math.Matrix3x2Type"/>
			<x path="hxmath.math.Matrix3x2"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>* Inverts the matrix assuming that it is a homogenous affine matrix (the last column gives
     * the translation) with a special orthogonal sub-matrix for the linear portion (a rotation
     * without any scaling/shearing/etc).
     * 
     * @return  The modified object.</haxe_doc>
	</applyInvertFrame>
	<get_zero get="inline" set="null" line="654" static="1"><f a=""><x path="hxmath.math.Matrix3x2"/></f></get_zero>
	<get_identity get="inline" set="null" line="662" static="1"><f a=""><x path="hxmath.math.Matrix3x2"/></f></get_identity>
	<get_t get="inline" set="null" line="670" static="1">
		<f a="this">
			<t path="hxmath.math.Matrix3x2Type"/>
			<x path="hxmath.math.Vector2"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_t>
	<set_t get="inline" set="null" line="676" static="1">
		<f a="this:t">
			<t path="hxmath.math.Matrix3x2Type"/>
			<x path="hxmath.math.Vector2"/>
			<x path="hxmath.math.Vector2"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_t>
	<get_linearSubMatrix get="inline" set="null" line="684" static="1">
		<f a="this">
			<t path="hxmath.math.Matrix3x2Type"/>
			<x path="hxmath.math.Matrix2x2"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_linearSubMatrix>
	<set_linearSubMatrix get="inline" set="null" line="690" static="1">
		<f a="this:value">
			<t path="hxmath.math.Matrix3x2Type"/>
			<x path="hxmath.math.Matrix2x2"/>
			<x path="hxmath.math.Matrix2x2"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_linearSubMatrix>
</class></impl>
	</abstract>
	<class path="hxmath.math._Matrix3x2.Matrix3x2_Impl_" params="" file="/home/travis/haxe/lib/hxmath/git/hxmath/math/Matrix3x2.hx" private="1" module="hxmath.math.Matrix3x2">
		<elementCount public="1" get="inline" set="null" expr="6" line="64" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>6</e></m></meta>
		</elementCount>
		<zero public="1" get="accessor" set="null" static="1"><x path="hxmath.math.Matrix3x2"/></zero>
		<identity public="1" get="accessor" set="null" static="1"><x path="hxmath.math.Matrix3x2"/></identity>
		<t public="1" get="accessor" set="accessor" static="1">
			<x path="hxmath.math.Vector2"/>
			<meta><m n=":impl"/></meta>
		</t>
		<linearSubMatrix public="1" get="accessor" set="accessor" static="1">
			<x path="hxmath.math.Matrix2x2"/>
			<meta><m n=":impl"/></meta>
		</linearSubMatrix>
		<_new public="1" get="inline" set="null" line="90" static="1">
			<f a="a:b:c:d:tx:ty">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="hxmath.math.Matrix3x2"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
			<haxe_doc>* Constructor.
     * 
     * Note: column-major ordering. (a, b) is the first column, (c, d) is the second, (tx, ty) is the third.
     * 
     * @param a     m00
     * @param b     m01
     * @param c     m10
     * @param d     m11
     * @param tx    m20
     * @param ty    m21</haxe_doc>
		</_new>
		<fromArray public="1" get="inline" set="null" line="101" static="1">
			<f a="rawData">
				<c path="Array"><x path="Float"/></c>
				<x path="hxmath.math.Matrix3x2"/>
			</f>
			<haxe_doc>* Construct a Matrix3x2 from an array.
     * 
     * @param rawData   The input array.
     * @return          The constructed structure.</haxe_doc>
		</fromArray>
		<fromMatrix3x2Shape public="1" get="inline" set="null" line="118" static="1">
			<f a="other">
				<x path="hxmath.math.Matrix3x2"/>
				<x path="hxmath.math.Matrix3x2"/>
			</f>
			<meta><m n=":from"/></meta>
			<haxe_doc>* Convert a shape-similar matrix.
     * 
     * @param other     The matrix to convert.
     * @return          The hxmath equivalent.</haxe_doc>
		</fromMatrix3x2Shape>
		<multiplyScalar public="1" get="inline" set="null" line="131" static="1">
			<f a="s:m">
				<x path="Float"/>
				<x path="hxmath.math.Matrix3x2"/>
				<x path="hxmath.math.Matrix3x2"/>
			</f>
			<meta><m n=":op"><e>A * B</e></m></meta>
			<haxe_doc>* Multiply a scalar with a matrix.
     * 
     * @param s
     * @param m
     * @return      s * m</haxe_doc>
		</multiplyScalar>
		<transform public="1" get="inline" set="null" line="148" static="1">
			<f a="m:v">
				<x path="hxmath.math.Matrix3x2"/>
				<x path="hxmath.math.Vector2"/>
				<x path="hxmath.math.Vector2"/>
			</f>
			<meta><m n=":op"><e>A * B</e></m></meta>
			<haxe_doc>* Homegenous matrix*vector product (treats the input vector as though it is a Vector3 with a 1 for the z element).
     * Allows translation and linear (e.g. rotation, scale) transformations to be stored in the same matrix.
     * 
     * @param m     The matrix holding the transformation.
     * @param v     The vector to transform
     * @return      The transformed vector.</haxe_doc>
		</transform>
		<concat public="1" get="inline" set="null" line="162" static="1">
			<f a="m:n">
				<x path="hxmath.math.Matrix3x2"/>
				<x path="hxmath.math.Matrix3x2"/>
				<x path="hxmath.math.Matrix3x2"/>
			</f>
			<meta><m n=":op"><e>A * B</e></m></meta>
			<haxe_doc>* Concatenate two transformations.
     * Treated as homogenous matrix multiplication, i.e. there is an implicit 3rd row [0, 0, 1] in both matrices
     * 
     * @param m     The first matrix (the second transformation in the order of application).
     * @param n     The second matrix (the first transformation in the order of application).
     * @return      The combined transformation matrix.</haxe_doc>
		</concat>
		<add public="1" get="inline" set="null" line="188" static="1">
			<f a="m:n">
				<x path="hxmath.math.Matrix3x2"/>
				<x path="hxmath.math.Matrix3x2"/>
				<x path="hxmath.math.Matrix3x2"/>
			</f>
			<meta><m n=":op"><e>A + B</e></m></meta>
			<haxe_doc>* Add two matrices.
     * 
     * @param m
     * @param n
     * @return      m + n</haxe_doc>
		</add>
		<subtract public="1" get="inline" set="null" line="202" static="1">
			<f a="m:n">
				<x path="hxmath.math.Matrix3x2"/>
				<x path="hxmath.math.Matrix3x2"/>
				<x path="hxmath.math.Matrix3x2"/>
			</f>
			<meta><m n=":op"><e>A - B</e></m></meta>
			<haxe_doc>* Subtract one matrix from another.
     * 
     * @param m
     * @param n
     * @return      m - n</haxe_doc>
		</subtract>
		<negate public="1" get="inline" set="null" line="215" static="1">
			<f a="m">
				<x path="hxmath.math.Matrix3x2"/>
				<x path="hxmath.math.Matrix3x2"/>
			</f>
			<meta><m n=":op"><e>-A</e></m></meta>
			<haxe_doc>* Create a negated copy of a matrix.
     * 
     * @param m
     * @return      -m</haxe_doc>
		</negate>
		<equals public="1" get="inline" set="null" line="233" static="1">
			<f a="m:n">
				<x path="hxmath.math.Matrix3x2"/>
				<x path="hxmath.math.Matrix3x2"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e>A == B</e></m></meta>
			<haxe_doc>* Test element-wise equality between two matrices.
     * False if one of the inputs is null and the other is not.
     * 
     * @param m
     * @param n
     * @return      m_ij == n_ij</haxe_doc>
		</equals>
		<rotate public="1" get="inline" set="null" line="252" static="1">
			<f a="angle">
				<x path="Float"/>
				<x path="hxmath.math.Matrix3x2"/>
			</f>
			<haxe_doc>* Rotate by a given angle.
     * 
     * @param angle     The angle to rotate by (ccw).
     * @return          The matrix.</haxe_doc>
		</rotate>
		<translate public="1" get="inline" set="null" line="265" static="1">
			<f a="v">
				<x path="hxmath.math.Vector2"/>
				<x path="hxmath.math.Matrix3x2"/>
			</f>
			<haxe_doc>* Translate by a given vector.
     * 
     * @param v     The vector to translate by.
     * @return      The matrix.</haxe_doc>
		</translate>
		<orbit public="1" get="inline" set="null" line="281" static="1">
			<f a="center:angle">
				<x path="hxmath.math.Vector2"/>
				<x path="Float"/>
				<x path="hxmath.math.Matrix3x2"/>
			</f>
			<haxe_doc>* Orbit around a given center point. The matrix is equivalent to the following composition:
     *
     * Matrix3x2.translate(center) * Matrix3x2.rotate(angle) * Matrix3x2.translate(-center)
     * 
     * @param center    The point to rotate around.
     * @param angle     The angle to rotate ccw around the center.
     * @return          The matrix.</haxe_doc>
		</orbit>
		<copyTo public="1" get="inline" set="null" line="295" static="1">
			<f a="this:target">
				<t path="hxmath.math.Matrix3x2Type"/>
				<x path="hxmath.math.Matrix3x2"/>
				<x path="Void"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>* Copy the contents of this structure to another.
     * Faster than copyToShape for static platforms (C++, etc) but requires the target to have the exact same inner type.
     * 
     * @param target    The target structure.</haxe_doc>
		</copyTo>
		<copyToShape public="1" get="inline" set="null" line="310" static="1">
			<f a="this:target">
				<t path="hxmath.math.Matrix3x2Type"/>
				<t path="hxmath.math.Matrix3x2Shape"/>
				<x path="Void"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>* Copy the contents of this structure to another (shape-similar) instance.
     * 
     * @param target    The target structure.</haxe_doc>
		</copyToShape>
		<copyFromShape public="1" get="inline" set="null" line="327" static="1">
			<f a="this:source">
				<t path="hxmath.math.Matrix3x2Type"/>
				<t path="hxmath.math.Matrix3x2Shape"/>
				<x path="Void"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>* Copy the contents of another (shape-similar) instance to this structure.
     * 
     * @param source    The source structure.</haxe_doc>
		</copyFromShape>
		<setRotate public="1" get="inline" set="null" line="345" static="1">
			<f a="this:angle">
				<t path="hxmath.math.Matrix3x2Type"/>
				<x path="Float"/>
				<x path="hxmath.math.Matrix3x2"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>* Set the upper-left 2x2 matrix to a counter-clockwise rotation.
     * 
     * @param angle     The angle to rotate (in radians).
     * @return          This.</haxe_doc>
		</setRotate>
		<setTranslate public="1" get="inline" set="null" line="367" static="1">
			<f a="this:x:y">
				<t path="hxmath.math.Matrix3x2Type"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="hxmath.math.Matrix3x2"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>* Set the right column to a translation
     * 
     * @param x
     * @param y
     * @return          This.</haxe_doc>
		</setTranslate>
		<set public="1" get="inline" set="null" line="388" static="1">
			<f a="this:a:b:c:d:tx:ty">
				<t path="hxmath.math.Matrix3x2Type"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="hxmath.math.Matrix3x2"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>* Sets all the fields of this structure without allocation.
     * 
     * @param a
     * @param b
     * @param c
     * @param d
     * @param tx
     * @param ty
     * @return self</haxe_doc>
		</set>
		<addWith public="1" get="inline" set="null" line="409" static="1">
			<f a="this:m">
				<t path="hxmath.math.Matrix3x2Type"/>
				<x path="hxmath.math.Matrix3x2"/>
				<x path="hxmath.math.Matrix3x2"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>* Add a matrix in place.
     * Note: += operator on Haxe abstracts does not behave this way (a new object is returned).
     * 
     * @param m
     * @return      self_ij += m_ij</haxe_doc>
		</addWith>
		<subtractWith public="1" get="inline" set="null" line="430" static="1">
			<f a="this:m">
				<t path="hxmath.math.Matrix3x2Type"/>
				<x path="hxmath.math.Matrix3x2"/>
				<x path="hxmath.math.Matrix3x2"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>* Subtract a matrix in place.
     * Note: -= operator on Haxe abstracts does not behave this way (a new object is returned).
     * 
     * @param m
     * @return      self_ij -= m_ij</haxe_doc>
		</subtractWith>
		<clone public="1" get="inline" set="null" line="449" static="1">
			<f a="this">
				<t path="hxmath.math.Matrix3x2Type"/>
				<x path="hxmath.math.Matrix3x2"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>* Clone.
     * 
     * @return  The cloned object.</haxe_doc>
		</clone>
		<getArrayElement public="1" get="inline" set="null" line="466" static="1">
			<f a="this:i">
				<t path="hxmath.math.Matrix3x2Type"/>
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":arrayAccess"/>
			</meta>
			<haxe_doc>* Get an element by position.
     * The implicit array is row-major (e.g. element (column count) + 1 is the first element of the second row).
     * 
     * @param i         The element index.
     * @return          The element.</haxe_doc>
		</getArrayElement>
		<setArrayElement public="1" get="inline" set="null" line="498" static="1">
			<f a="this:i:value">
				<t path="hxmath.math.Matrix3x2Type"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":arrayAccess"/>
			</meta>
			<haxe_doc>* Set an element by position.
     * The implicit array is row-major (e.g. element (column count) + 1 is the first element of the second row).
     * 
     * @param i         The element index.
     * @param value     The new value.
     * @return          The updated element.</haxe_doc>
		</setArrayElement>
		<getElement public="1" get="inline" set="null" line="529" static="1">
			<f a="this:column:row">
				<t path="hxmath.math.Matrix3x2Type"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>* Get an element by (column, row) indices.
     * Both column and row indices start at 0, e.g. the index of the first element of the first row is (0, 0).
     * 
     * @param column    The column index.
     * @param row       The row index.
     * @return          The element.</haxe_doc>
		</getElement>
		<setElement public="1" get="inline" set="null" line="544" static="1">
			<f a="this:column:row:value">
				<t path="hxmath.math.Matrix3x2Type"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>* Set an element by (column, row) indices.
     * Both column and row indices start at 0, e.g. the index of the first element of the first row is (0, 0).
     * 
     * @param column    The column index.
     * @param row       The row index.
     * @param value     The new value.
     * @return          The updated element.</haxe_doc>
		</setElement>
		<col public="1" get="inline" set="null" line="556" static="1">
			<f a="this:index">
				<t path="hxmath.math.Matrix3x2Type"/>
				<x path="Int"/>
				<x path="hxmath.math.Vector2"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>* Get a column vector by index.
     * 
     * @param index     The 0-based index of the column.
     * @return          The column as a vector.</haxe_doc>
		</col>
		<row public="1" get="inline" set="null" line="579" static="1">
			<f a="this:index">
				<t path="hxmath.math.Matrix3x2Type"/>
				<x path="Int"/>
				<x path="hxmath.math.Vector3"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>* Get a row vector by index.
     * 
     * @param index     The 0-based index of the row.
     * @return          The row as a vector.</haxe_doc>
		</row>
		<applyScalarFunc public="1" get="inline" set="null" line="600" static="1">
			<f a="this:func">
				<t path="hxmath.math.Matrix3x2Type"/>
				<f a="">
					<x path="Float"/>
					<x path="Float"/>
				</f>
				<x path="hxmath.math.Matrix3x2"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>* Apply a scalar function to each element.
     * 
     * @param func  The function to apply.
     * @return      The modified object.</haxe_doc>
		</applyScalarFunc>
		<applySubMatrixTranspose public="1" get="inline" set="null" line="617" static="1">
			<f a="this">
				<t path="hxmath.math.Matrix3x2Type"/>
				<x path="hxmath.math.Matrix3x2"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>* Transpose the upper 2x2 block (the linear sub-matrix in a homogenous matrix).
     * 
     * @return  The modified object.</haxe_doc>
		</applySubMatrixTranspose>
		<applyInvertFrame public="1" get="inline" set="null" line="637" static="1">
			<f a="this">
				<t path="hxmath.math.Matrix3x2Type"/>
				<x path="hxmath.math.Matrix3x2"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>* Inverts the matrix assuming that it is a homogenous affine matrix (the last column gives
     * the translation) with a special orthogonal sub-matrix for the linear portion (a rotation
     * without any scaling/shearing/etc).
     * 
     * @return  The modified object.</haxe_doc>
		</applyInvertFrame>
		<get_zero get="inline" set="null" line="654" static="1"><f a=""><x path="hxmath.math.Matrix3x2"/></f></get_zero>
		<get_identity get="inline" set="null" line="662" static="1"><f a=""><x path="hxmath.math.Matrix3x2"/></f></get_identity>
		<get_t get="inline" set="null" line="670" static="1">
			<f a="this">
				<t path="hxmath.math.Matrix3x2Type"/>
				<x path="hxmath.math.Vector2"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_t>
		<set_t get="inline" set="null" line="676" static="1">
			<f a="this:t">
				<t path="hxmath.math.Matrix3x2Type"/>
				<x path="hxmath.math.Vector2"/>
				<x path="hxmath.math.Vector2"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_t>
		<get_linearSubMatrix get="inline" set="null" line="684" static="1">
			<f a="this">
				<t path="hxmath.math.Matrix3x2Type"/>
				<x path="hxmath.math.Matrix2x2"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_linearSubMatrix>
		<set_linearSubMatrix get="inline" set="null" line="690" static="1">
			<f a="this:value">
				<t path="hxmath.math.Matrix3x2Type"/>
				<x path="hxmath.math.Matrix2x2"/>
				<x path="hxmath.math.Matrix2x2"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_linearSubMatrix>
	</class>
	<typedef path="hxmath.math.Matrix3x3Shape" params="" file="/home/travis/haxe/lib/hxmath/git/hxmath/math/Matrix3x3.hx" module="hxmath.math.Matrix3x3"><a>
	<m22><x path="Float"/></m22>
	<m21><x path="Float"/></m21>
	<m20><x path="Float"/></m20>
	<m12><x path="Float"/></m12>
	<m11><x path="Float"/></m11>
	<m10><x path="Float"/></m10>
	<m02><x path="Float"/></m02>
	<m01><x path="Float"/></m01>
	<m00><x path="Float"/></m00>
</a></typedef>
	<class path="hxmath.math.Matrix3x3Default" params="" file="/home/travis/haxe/lib/hxmath/git/hxmath/math/Matrix3x3.hx" module="hxmath.math.Matrix3x3">
		<m00 public="1"><x path="Float"/></m00>
		<m01 public="1"><x path="Float"/></m01>
		<m02 public="1"><x path="Float"/></m02>
		<m10 public="1"><x path="Float"/></m10>
		<m11 public="1"><x path="Float"/></m11>
		<m12 public="1"><x path="Float"/></m12>
		<m20 public="1"><x path="Float"/></m20>
		<m21 public="1"><x path="Float"/></m21>
		<m22 public="1"><x path="Float"/></m22>
		<toString public="1" set="method" line="56"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method" line="38"><f a="m00:m10:m20:m01:m11:m21:m02:m12:m22">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>* The default underlying type.</haxe_doc>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<abstract path="hxmath.math.Matrix3x3" params="" file="/home/travis/haxe/lib/hxmath/git/hxmath/math/Matrix3x3.hx">
		<from>
			<icast><t path="hxmath.math.Matrix3x3Type"/></icast>
			<icast field="fromMatrix3x3Shape"><x path="hxmath.math.Matrix3x3"/></icast>
		</from>
		<this><t path="hxmath.math.Matrix3x3Type"/></this>
		<to><icast><t path="hxmath.math.Matrix3x3Type"/></icast></to>
		<haxe_doc>* 3x3 matrix for linear transformations in 3D.</haxe_doc>
		<meta><m n=":forward">
	<e>m00</e>
	<e>m01</e>
	<e>m02</e>
	<e>m10</e>
	<e>m11</e>
	<e>m12</e>
	<e>m20</e>
	<e>m21</e>
	<e>m22</e>
</m></meta>
		<impl><class path="hxmath.math._Matrix3x3.Matrix3x3_Impl_" params="" file="/home/travis/haxe/lib/hxmath/git/hxmath/math/Matrix3x3.hx" private="1" module="hxmath.math.Matrix3x3">
	<elementCount public="1" get="inline" set="null" expr="9" line="72" static="1">
		<x path="Int"/>
		<meta><m n=":value"><e>9</e></m></meta>
	</elementCount>
	<zero public="1" get="accessor" set="null" static="1"><x path="hxmath.math.Matrix3x3"/></zero>
	<identity public="1" get="accessor" set="null" static="1"><x path="hxmath.math.Matrix3x3"/></identity>
	<det public="1" get="accessor" set="null" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</det>
	<transpose public="1" get="accessor" set="null" static="1">
		<x path="hxmath.math.Matrix3x3"/>
		<meta><m n=":impl"/></meta>
	</transpose>
	<_new public="1" get="inline" set="null" line="99" static="1">
		<f a="m00:m10:m20:m01:m11:m21:m02:m12:m22">
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="hxmath.math.Matrix3x3"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
		<haxe_doc>* Constructor. Parameters are in row-major order (when written out the array is ordered like the matrix).
     * 
     * @param m00
     * @param m10
     * @param m20
     * @param m01
     * @param m11
     * @param m21
     * @param m02
     * @param m12
     * @param m22</haxe_doc>
	</_new>
	<fromArray public="1" get="inline" set="null" line="116" static="1">
		<f a="rawData">
			<c path="Array"><x path="Float"/></c>
			<x path="hxmath.math.Matrix3x3"/>
		</f>
		<haxe_doc>* Construct a Matrix3x3 from an array.
     * 
     * @param rawData   The input array.
     * @return          The constructed structure.</haxe_doc>
	</fromArray>
	<fromMatrix3x3Shape public="1" get="inline" set="null" line="136" static="1">
		<f a="other">
			<x path="hxmath.math.Matrix3x3"/>
			<x path="hxmath.math.Matrix3x3"/>
		</f>
		<meta><m n=":from"/></meta>
		<haxe_doc>* Convert a shape-similar matrix.
     * 
     * @param other     The matrix to convert.
     * @return          The hxmath equivalent.</haxe_doc>
	</fromMatrix3x3Shape>
	<multiplyScalar public="1" get="inline" set="null" line="152" static="1">
		<f a="s:a">
			<x path="Float"/>
			<x path="hxmath.math.Matrix3x3"/>
			<x path="hxmath.math.Matrix3x3"/>
		</f>
		<meta><m n=":op"><e>A * B</e></m></meta>
		<haxe_doc>* Multiply a scalar with a matrix.
     * 
     * @param s
     * @param a
     * @return      s * a</haxe_doc>
	</multiplyScalar>
	<multiplyVector public="1" get="inline" set="null" line="168" static="1">
		<f a="a:v">
			<x path="hxmath.math.Matrix3x3"/>
			<x path="hxmath.math.Vector3"/>
			<x path="hxmath.math.Vector3"/>
		</f>
		<meta><m n=":op"><e>A * B</e></m></meta>
		<haxe_doc>* Multiply a matrix with a vector.
     * 
     * @param a
     * @param v
     * @return      a * v</haxe_doc>
	</multiplyVector>
	<multiply public="1" get="inline" set="null" line="184" static="1">
		<f a="a:b">
			<x path="hxmath.math.Matrix3x3"/>
			<x path="hxmath.math.Matrix3x3"/>
			<x path="hxmath.math.Matrix3x3"/>
		</f>
		<meta><m n=":op"><e>A * B</e></m></meta>
		<haxe_doc>* Multiply two matrices.
     * 
     * @param a
     * @param b
     * @return      a * b</haxe_doc>
	</multiply>
	<add public="1" get="inline" set="null" line="208" static="1">
		<f a="a:b">
			<x path="hxmath.math.Matrix3x3"/>
			<x path="hxmath.math.Matrix3x3"/>
			<x path="hxmath.math.Matrix3x3"/>
		</f>
		<meta><m n=":op"><e>A + B</e></m></meta>
		<haxe_doc>* Add two matrices.
     * 
     * @param a
     * @param b
     * @return      a + b</haxe_doc>
	</add>
	<subtract public="1" get="inline" set="null" line="222" static="1">
		<f a="a:b">
			<x path="hxmath.math.Matrix3x3"/>
			<x path="hxmath.math.Matrix3x3"/>
			<x path="hxmath.math.Matrix3x3"/>
		</f>
		<meta><m n=":op"><e>A - B</e></m></meta>
		<haxe_doc>* Subtract one matrix from another.
     * 
     * @param a
     * @param b
     * @return      a - b</haxe_doc>
	</subtract>
	<negate public="1" get="inline" set="null" line="235" static="1">
		<f a="a">
			<x path="hxmath.math.Matrix3x3"/>
			<x path="hxmath.math.Matrix3x3"/>
		</f>
		<meta><m n=":op"><e>-A</e></m></meta>
		<haxe_doc>* Create a negated copy of a matrix.
     * 
     * @param a
     * @return      -a</haxe_doc>
	</negate>
	<equals public="1" get="inline" set="null" line="252" static="1">
		<f a="a:b">
			<x path="hxmath.math.Matrix3x3"/>
			<x path="hxmath.math.Matrix3x3"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e>A == B</e></m></meta>
		<haxe_doc>* Test element-wise equality between two matrices.
     * False if one of the inputs is null and the other is not.
     * 
     * @param a
     * @param b
     * @return      a_ij == b_ij</haxe_doc>
	</equals>
	<rotationX public="1" get="inline" set="null" line="274" static="1">
		<f a="angleDegrees">
			<x path="Float"/>
			<x path="hxmath.math.Matrix3x3"/>
		</f>
		<haxe_doc>* Counter-clockwise rotation around the X axis.
     * 
     * @param angle     The angle to rotate (in degrees).
     * @return          The rotation matrix.</haxe_doc>
	</rotationX>
	<rotationY public="1" get="inline" set="null" line="291" static="1">
		<f a="angleDegrees">
			<x path="Float"/>
			<x path="hxmath.math.Matrix3x3"/>
		</f>
		<haxe_doc>* Counter-clockwise rotation around the Y axis.
     * 
     * @param angle     The angle to rotate (in degrees).
     * @return          The rotation matrix.</haxe_doc>
	</rotationY>
	<rotationZ public="1" get="inline" set="null" line="308" static="1">
		<f a="angleDegrees">
			<x path="Float"/>
			<x path="hxmath.math.Matrix3x3"/>
		</f>
		<haxe_doc>* Counter-clockwise rotation around the Z axis.
     * 
     * @param angle     The angle to rotate (in degrees).
     * @return          The rotation matrix.</haxe_doc>
	</rotationZ>
	<scale public="1" get="inline" set="null" line="327" static="1">
		<f a="sx:sy:sz">
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="hxmath.math.Matrix3x3"/>
		</f>
		<haxe_doc>* Non-uniform scale matrix.
     * 
     * @param sx    The amount to scale along the X axis.
     * @param sy    The amount to scale along the Y axis.
     * @param sz    The amount to scale along the Z axis.
     * @return      The scale matrix.</haxe_doc>
	</scale>
	<set public="1" get="inline" set="null" line="349" static="1">
		<f a="this:m00:m10:m20:m01:m11:m21:m02:m12:m22">
			<t path="hxmath.math.Matrix3x3Type"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="hxmath.math.Matrix3x3"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>* Sets all the fields of this structure without allocation.
     * 
     * @param m00
     * @param m10
     * @param m20
     * @param m01
     * @param m11
     * @param m21
     * @param m02
     * @param m12
     * @param m22
     * @return self</haxe_doc>
	</set>
	<addWith public="1" get="inline" set="null" line="378" static="1">
		<f a="this:a">
			<t path="hxmath.math.Matrix3x3Type"/>
			<x path="hxmath.math.Matrix3x3"/>
			<x path="hxmath.math.Matrix3x3"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>* Add a matrix in place.
     * Note: += operator on Haxe abstracts does not behave this way (a new object is returned).
     * 
     * @param a
     * @return      self_ij += a_ij</haxe_doc>
	</addWith>
	<subtractWith public="1" get="inline" set="null" line="402" static="1">
		<f a="this:a">
			<t path="hxmath.math.Matrix3x3Type"/>
			<x path="hxmath.math.Matrix3x3"/>
			<x path="hxmath.math.Matrix3x3"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>* Subtract a matrix in place.
     * Note: -= operator on Haxe abstracts does not behave this way (a new object is returned).
     * 
     * @param a
     * @return      self_ij -= a_ij</haxe_doc>
	</subtractWith>
	<copyTo public="1" get="inline" set="null" line="425" static="1">
		<f a="this:target">
			<t path="hxmath.math.Matrix3x3Type"/>
			<x path="hxmath.math.Matrix3x3"/>
			<x path="Void"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>* Copy the contents of this structure to another.
     * Faster than copyToShape for static platforms (C++, etc) but requires the target to have the exact same inner type.
     * 
     * @param target    The target structure.</haxe_doc>
	</copyTo>
	<copyToShape public="1" get="inline" set="null" line="440" static="1">
		<f a="this:target">
			<t path="hxmath.math.Matrix3x3Type"/>
			<t path="hxmath.math.Matrix3x3Shape"/>
			<x path="Void"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>* Copy the contents of this structure to another (shape-similar) instance.
     * 
     * @param target    The target structure.</haxe_doc>
	</copyToShape>
	<copyFromShape public="1" get="inline" set="null" line="462" static="1">
		<f a="this:source">
			<t path="hxmath.math.Matrix3x3Type"/>
			<t path="hxmath.math.Matrix3x3Shape"/>
			<x path="Void"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>* Copy the contents of another (shape-similar) instance to this structure.
     * 
     * @param source    The source structure.</haxe_doc>
	</copyFromShape>
	<clone public="1" get="inline" set="null" line="484" static="1">
		<f a="this">
			<t path="hxmath.math.Matrix3x3Type"/>
			<x path="hxmath.math.Matrix3x3"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>* Clone.
     * 
     * @return  The cloned object.</haxe_doc>
	</clone>
	<getArrayElement public="1" get="inline" set="null" line="501" static="1">
		<f a="this:i">
			<t path="hxmath.math.Matrix3x3Type"/>
			<x path="Int"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":arrayAccess"/>
		</meta>
		<haxe_doc>* Get an element by position.
     * The implicit array is row-major (e.g. element (column count) + 1 is the first element of the second row).
     * 
     * @param i         The element index.
     * @return          The element.</haxe_doc>
	</getArrayElement>
	<setArrayElement public="1" get="inline" set="null" line="539" static="1">
		<f a="this:i:value">
			<t path="hxmath.math.Matrix3x3Type"/>
			<x path="Int"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":arrayAccess"/>
		</meta>
		<haxe_doc>* Set an element by position.
     * The implicit array is row-major (e.g. element (column count) + 1 is the first element of the second row).
     * 
     * @param i         The element index.
     * @param value     The new value.
     * @return          The updated element.</haxe_doc>
	</setArrayElement>
	<getElement public="1" get="inline" set="null" line="576" static="1">
		<f a="this:column:row">
			<t path="hxmath.math.Matrix3x3Type"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>* Get an element by (column, row) indices.
     * Both column and row indices start at 0, e.g. the index of the first element of the first row is (0, 0).
     * 
     * @param column    The column index.
     * @param row       The row index.
     * @return          The element.</haxe_doc>
	</getElement>
	<setElement public="1" get="inline" set="null" line="591" static="1">
		<f a="this:column:row:value">
			<t path="hxmath.math.Matrix3x3Type"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>* Set an element by (column, row) indices.
     * Both column and row indices start at 0, e.g. the index of the first element of the first row is (0, 0).
     * 
     * @param column    The column index.
     * @param row       The row index.
     * @param value     The new value.
     * @return          The updated element.</haxe_doc>
	</setElement>
	<col public="1" get="inline" set="null" line="603" static="1">
		<f a="this:index">
			<t path="hxmath.math.Matrix3x3Type"/>
			<x path="Int"/>
			<x path="hxmath.math.Vector3"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>* Get a column vector by index.
     * 
     * @param index     The 0-based index of the column.
     * @return          The column as a vector.</haxe_doc>
	</col>
	<row public="1" get="inline" set="null" line="626" static="1">
		<f a="this:index">
			<t path="hxmath.math.Matrix3x3Type"/>
			<x path="Int"/>
			<x path="hxmath.math.Vector3"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>* Get a row vector by index.
     * 
     * @param index     The 0-based index of the row.
     * @return          The row as a vector.</haxe_doc>
	</row>
	<applyScalarFunc public="1" get="inline" set="null" line="649" static="1">
		<f a="this:func">
			<t path="hxmath.math.Matrix3x3Type"/>
			<f a="">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<x path="hxmath.math.Matrix3x3"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>* Apply a scalar function to each element.
     * 
     * @param func  The function to apply.
     * @return      The modified object.</haxe_doc>
	</applyScalarFunc>
	<get_zero get="inline" set="null" line="661" static="1"><f a=""><x path="hxmath.math.Matrix3x3"/></f></get_zero>
	<get_identity get="inline" set="null" line="669" static="1"><f a=""><x path="hxmath.math.Matrix3x3"/></f></get_identity>
	<get_det get="inline" set="null" line="677" static="1">
		<f a="this">
			<t path="hxmath.math.Matrix3x3Type"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_det>
	<get_transpose get="inline" set="null" line="686" static="1">
		<f a="this">
			<t path="hxmath.math.Matrix3x3Type"/>
			<x path="hxmath.math.Matrix3x3"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_transpose>
</class></impl>
	</abstract>
	<class path="hxmath.math._Matrix3x3.Matrix3x3_Impl_" params="" file="/home/travis/haxe/lib/hxmath/git/hxmath/math/Matrix3x3.hx" private="1" module="hxmath.math.Matrix3x3">
		<elementCount public="1" get="inline" set="null" expr="9" line="72" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>9</e></m></meta>
		</elementCount>
		<zero public="1" get="accessor" set="null" static="1"><x path="hxmath.math.Matrix3x3"/></zero>
		<identity public="1" get="accessor" set="null" static="1"><x path="hxmath.math.Matrix3x3"/></identity>
		<det public="1" get="accessor" set="null" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</det>
		<transpose public="1" get="accessor" set="null" static="1">
			<x path="hxmath.math.Matrix3x3"/>
			<meta><m n=":impl"/></meta>
		</transpose>
		<_new public="1" get="inline" set="null" line="99" static="1">
			<f a="m00:m10:m20:m01:m11:m21:m02:m12:m22">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="hxmath.math.Matrix3x3"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
			<haxe_doc>* Constructor. Parameters are in row-major order (when written out the array is ordered like the matrix).
     * 
     * @param m00
     * @param m10
     * @param m20
     * @param m01
     * @param m11
     * @param m21
     * @param m02
     * @param m12
     * @param m22</haxe_doc>
		</_new>
		<fromArray public="1" get="inline" set="null" line="116" static="1">
			<f a="rawData">
				<c path="Array"><x path="Float"/></c>
				<x path="hxmath.math.Matrix3x3"/>
			</f>
			<haxe_doc>* Construct a Matrix3x3 from an array.
     * 
     * @param rawData   The input array.
     * @return          The constructed structure.</haxe_doc>
		</fromArray>
		<fromMatrix3x3Shape public="1" get="inline" set="null" line="136" static="1">
			<f a="other">
				<x path="hxmath.math.Matrix3x3"/>
				<x path="hxmath.math.Matrix3x3"/>
			</f>
			<meta><m n=":from"/></meta>
			<haxe_doc>* Convert a shape-similar matrix.
     * 
     * @param other     The matrix to convert.
     * @return          The hxmath equivalent.</haxe_doc>
		</fromMatrix3x3Shape>
		<multiplyScalar public="1" get="inline" set="null" line="152" static="1">
			<f a="s:a">
				<x path="Float"/>
				<x path="hxmath.math.Matrix3x3"/>
				<x path="hxmath.math.Matrix3x3"/>
			</f>
			<meta><m n=":op"><e>A * B</e></m></meta>
			<haxe_doc>* Multiply a scalar with a matrix.
     * 
     * @param s
     * @param a
     * @return      s * a</haxe_doc>
		</multiplyScalar>
		<multiplyVector public="1" get="inline" set="null" line="168" static="1">
			<f a="a:v">
				<x path="hxmath.math.Matrix3x3"/>
				<x path="hxmath.math.Vector3"/>
				<x path="hxmath.math.Vector3"/>
			</f>
			<meta><m n=":op"><e>A * B</e></m></meta>
			<haxe_doc>* Multiply a matrix with a vector.
     * 
     * @param a
     * @param v
     * @return      a * v</haxe_doc>
		</multiplyVector>
		<multiply public="1" get="inline" set="null" line="184" static="1">
			<f a="a:b">
				<x path="hxmath.math.Matrix3x3"/>
				<x path="hxmath.math.Matrix3x3"/>
				<x path="hxmath.math.Matrix3x3"/>
			</f>
			<meta><m n=":op"><e>A * B</e></m></meta>
			<haxe_doc>* Multiply two matrices.
     * 
     * @param a
     * @param b
     * @return      a * b</haxe_doc>
		</multiply>
		<add public="1" get="inline" set="null" line="208" static="1">
			<f a="a:b">
				<x path="hxmath.math.Matrix3x3"/>
				<x path="hxmath.math.Matrix3x3"/>
				<x path="hxmath.math.Matrix3x3"/>
			</f>
			<meta><m n=":op"><e>A + B</e></m></meta>
			<haxe_doc>* Add two matrices.
     * 
     * @param a
     * @param b
     * @return      a + b</haxe_doc>
		</add>
		<subtract public="1" get="inline" set="null" line="222" static="1">
			<f a="a:b">
				<x path="hxmath.math.Matrix3x3"/>
				<x path="hxmath.math.Matrix3x3"/>
				<x path="hxmath.math.Matrix3x3"/>
			</f>
			<meta><m n=":op"><e>A - B</e></m></meta>
			<haxe_doc>* Subtract one matrix from another.
     * 
     * @param a
     * @param b
     * @return      a - b</haxe_doc>
		</subtract>
		<negate public="1" get="inline" set="null" line="235" static="1">
			<f a="a">
				<x path="hxmath.math.Matrix3x3"/>
				<x path="hxmath.math.Matrix3x3"/>
			</f>
			<meta><m n=":op"><e>-A</e></m></meta>
			<haxe_doc>* Create a negated copy of a matrix.
     * 
     * @param a
     * @return      -a</haxe_doc>
		</negate>
		<equals public="1" get="inline" set="null" line="252" static="1">
			<f a="a:b">
				<x path="hxmath.math.Matrix3x3"/>
				<x path="hxmath.math.Matrix3x3"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e>A == B</e></m></meta>
			<haxe_doc>* Test element-wise equality between two matrices.
     * False if one of the inputs is null and the other is not.
     * 
     * @param a
     * @param b
     * @return      a_ij == b_ij</haxe_doc>
		</equals>
		<rotationX public="1" get="inline" set="null" line="274" static="1">
			<f a="angleDegrees">
				<x path="Float"/>
				<x path="hxmath.math.Matrix3x3"/>
			</f>
			<haxe_doc>* Counter-clockwise rotation around the X axis.
     * 
     * @param angle     The angle to rotate (in degrees).
     * @return          The rotation matrix.</haxe_doc>
		</rotationX>
		<rotationY public="1" get="inline" set="null" line="291" static="1">
			<f a="angleDegrees">
				<x path="Float"/>
				<x path="hxmath.math.Matrix3x3"/>
			</f>
			<haxe_doc>* Counter-clockwise rotation around the Y axis.
     * 
     * @param angle     The angle to rotate (in degrees).
     * @return          The rotation matrix.</haxe_doc>
		</rotationY>
		<rotationZ public="1" get="inline" set="null" line="308" static="1">
			<f a="angleDegrees">
				<x path="Float"/>
				<x path="hxmath.math.Matrix3x3"/>
			</f>
			<haxe_doc>* Counter-clockwise rotation around the Z axis.
     * 
     * @param angle     The angle to rotate (in degrees).
     * @return          The rotation matrix.</haxe_doc>
		</rotationZ>
		<scale public="1" get="inline" set="null" line="327" static="1">
			<f a="sx:sy:sz">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="hxmath.math.Matrix3x3"/>
			</f>
			<haxe_doc>* Non-uniform scale matrix.
     * 
     * @param sx    The amount to scale along the X axis.
     * @param sy    The amount to scale along the Y axis.
     * @param sz    The amount to scale along the Z axis.
     * @return      The scale matrix.</haxe_doc>
		</scale>
		<set public="1" get="inline" set="null" line="349" static="1">
			<f a="this:m00:m10:m20:m01:m11:m21:m02:m12:m22">
				<t path="hxmath.math.Matrix3x3Type"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="hxmath.math.Matrix3x3"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>* Sets all the fields of this structure without allocation.
     * 
     * @param m00
     * @param m10
     * @param m20
     * @param m01
     * @param m11
     * @param m21
     * @param m02
     * @param m12
     * @param m22
     * @return self</haxe_doc>
		</set>
		<addWith public="1" get="inline" set="null" line="378" static="1">
			<f a="this:a">
				<t path="hxmath.math.Matrix3x3Type"/>
				<x path="hxmath.math.Matrix3x3"/>
				<x path="hxmath.math.Matrix3x3"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>* Add a matrix in place.
     * Note: += operator on Haxe abstracts does not behave this way (a new object is returned).
     * 
     * @param a
     * @return      self_ij += a_ij</haxe_doc>
		</addWith>
		<subtractWith public="1" get="inline" set="null" line="402" static="1">
			<f a="this:a">
				<t path="hxmath.math.Matrix3x3Type"/>
				<x path="hxmath.math.Matrix3x3"/>
				<x path="hxmath.math.Matrix3x3"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>* Subtract a matrix in place.
     * Note: -= operator on Haxe abstracts does not behave this way (a new object is returned).
     * 
     * @param a
     * @return      self_ij -= a_ij</haxe_doc>
		</subtractWith>
		<copyTo public="1" get="inline" set="null" line="425" static="1">
			<f a="this:target">
				<t path="hxmath.math.Matrix3x3Type"/>
				<x path="hxmath.math.Matrix3x3"/>
				<x path="Void"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>* Copy the contents of this structure to another.
     * Faster than copyToShape for static platforms (C++, etc) but requires the target to have the exact same inner type.
     * 
     * @param target    The target structure.</haxe_doc>
		</copyTo>
		<copyToShape public="1" get="inline" set="null" line="440" static="1">
			<f a="this:target">
				<t path="hxmath.math.Matrix3x3Type"/>
				<t path="hxmath.math.Matrix3x3Shape"/>
				<x path="Void"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>* Copy the contents of this structure to another (shape-similar) instance.
     * 
     * @param target    The target structure.</haxe_doc>
		</copyToShape>
		<copyFromShape public="1" get="inline" set="null" line="462" static="1">
			<f a="this:source">
				<t path="hxmath.math.Matrix3x3Type"/>
				<t path="hxmath.math.Matrix3x3Shape"/>
				<x path="Void"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>* Copy the contents of another (shape-similar) instance to this structure.
     * 
     * @param source    The source structure.</haxe_doc>
		</copyFromShape>
		<clone public="1" get="inline" set="null" line="484" static="1">
			<f a="this">
				<t path="hxmath.math.Matrix3x3Type"/>
				<x path="hxmath.math.Matrix3x3"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>* Clone.
     * 
     * @return  The cloned object.</haxe_doc>
		</clone>
		<getArrayElement public="1" get="inline" set="null" line="501" static="1">
			<f a="this:i">
				<t path="hxmath.math.Matrix3x3Type"/>
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":arrayAccess"/>
			</meta>
			<haxe_doc>* Get an element by position.
     * The implicit array is row-major (e.g. element (column count) + 1 is the first element of the second row).
     * 
     * @param i         The element index.
     * @return          The element.</haxe_doc>
		</getArrayElement>
		<setArrayElement public="1" get="inline" set="null" line="539" static="1">
			<f a="this:i:value">
				<t path="hxmath.math.Matrix3x3Type"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":arrayAccess"/>
			</meta>
			<haxe_doc>* Set an element by position.
     * The implicit array is row-major (e.g. element (column count) + 1 is the first element of the second row).
     * 
     * @param i         The element index.
     * @param value     The new value.
     * @return          The updated element.</haxe_doc>
		</setArrayElement>
		<getElement public="1" get="inline" set="null" line="576" static="1">
			<f a="this:column:row">
				<t path="hxmath.math.Matrix3x3Type"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>* Get an element by (column, row) indices.
     * Both column and row indices start at 0, e.g. the index of the first element of the first row is (0, 0).
     * 
     * @param column    The column index.
     * @param row       The row index.
     * @return          The element.</haxe_doc>
		</getElement>
		<setElement public="1" get="inline" set="null" line="591" static="1">
			<f a="this:column:row:value">
				<t path="hxmath.math.Matrix3x3Type"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>* Set an element by (column, row) indices.
     * Both column and row indices start at 0, e.g. the index of the first element of the first row is (0, 0).
     * 
     * @param column    The column index.
     * @param row       The row index.
     * @param value     The new value.
     * @return          The updated element.</haxe_doc>
		</setElement>
		<col public="1" get="inline" set="null" line="603" static="1">
			<f a="this:index">
				<t path="hxmath.math.Matrix3x3Type"/>
				<x path="Int"/>
				<x path="hxmath.math.Vector3"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>* Get a column vector by index.
     * 
     * @param index     The 0-based index of the column.
     * @return          The column as a vector.</haxe_doc>
		</col>
		<row public="1" get="inline" set="null" line="626" static="1">
			<f a="this:index">
				<t path="hxmath.math.Matrix3x3Type"/>
				<x path="Int"/>
				<x path="hxmath.math.Vector3"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>* Get a row vector by index.
     * 
     * @param index     The 0-based index of the row.
     * @return          The row as a vector.</haxe_doc>
		</row>
		<applyScalarFunc public="1" get="inline" set="null" line="649" static="1">
			<f a="this:func">
				<t path="hxmath.math.Matrix3x3Type"/>
				<f a="">
					<x path="Float"/>
					<x path="Float"/>
				</f>
				<x path="hxmath.math.Matrix3x3"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>* Apply a scalar function to each element.
     * 
     * @param func  The function to apply.
     * @return      The modified object.</haxe_doc>
		</applyScalarFunc>
		<get_zero get="inline" set="null" line="661" static="1"><f a=""><x path="hxmath.math.Matrix3x3"/></f></get_zero>
		<get_identity get="inline" set="null" line="669" static="1"><f a=""><x path="hxmath.math.Matrix3x3"/></f></get_identity>
		<get_det get="inline" set="null" line="677" static="1">
			<f a="this">
				<t path="hxmath.math.Matrix3x3Type"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_det>
		<get_transpose get="inline" set="null" line="686" static="1">
			<f a="this">
				<t path="hxmath.math.Matrix3x3Type"/>
				<x path="hxmath.math.Matrix3x3"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_transpose>
	</class>
	<typedef path="hxmath.math.Matrix4x4Shape" params="" file="/home/travis/haxe/lib/hxmath/git/hxmath/math/Matrix4x4.hx" module="hxmath.math.Matrix4x4"><a>
	<m33><x path="Float"/></m33>
	<m32><x path="Float"/></m32>
	<m31><x path="Float"/></m31>
	<m30><x path="Float"/></m30>
	<m23><x path="Float"/></m23>
	<m22><x path="Float"/></m22>
	<m21><x path="Float"/></m21>
	<m20><x path="Float"/></m20>
	<m13><x path="Float"/></m13>
	<m12><x path="Float"/></m12>
	<m11><x path="Float"/></m11>
	<m10><x path="Float"/></m10>
	<m03><x path="Float"/></m03>
	<m02><x path="Float"/></m02>
	<m01><x path="Float"/></m01>
	<m00><x path="Float"/></m00>
</a></typedef>
	<class path="hxmath.math.Matrix4x4Default" params="" file="/home/travis/haxe/lib/hxmath/git/hxmath/math/Matrix4x4.hx" module="hxmath.math.Matrix4x4">
		<m00 public="1"><x path="Float"/></m00>
		<m01 public="1"><x path="Float"/></m01>
		<m02 public="1"><x path="Float"/></m02>
		<m03 public="1"><x path="Float"/></m03>
		<m10 public="1"><x path="Float"/></m10>
		<m11 public="1"><x path="Float"/></m11>
		<m12 public="1"><x path="Float"/></m12>
		<m13 public="1"><x path="Float"/></m13>
		<m20 public="1"><x path="Float"/></m20>
		<m21 public="1"><x path="Float"/></m21>
		<m22 public="1"><x path="Float"/></m22>
		<m23 public="1"><x path="Float"/></m23>
		<m30 public="1"><x path="Float"/></m30>
		<m31 public="1"><x path="Float"/></m31>
		<m32 public="1"><x path="Float"/></m32>
		<m33 public="1"><x path="Float"/></m33>
		<toString public="1" set="method" line="81"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method" line="54"><f a="m00:m10:m20:m30:m01:m11:m21:m31:m02:m12:m22:m32:m03:m13:m23:m33">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>* The default underlying type.</haxe_doc>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<abstract path="hxmath.math.Matrix4x4" params="" file="/home/travis/haxe/lib/hxmath/git/hxmath/math/Matrix4x4.hx">
		<from>
			<icast><t path="hxmath.math.Matrix4x4Type"/></icast>
			<icast field="fromMatrix4x4Shape"><x path="hxmath.math.Matrix4x4"/></icast>
		</from>
		<this><t path="hxmath.math.Matrix4x4Type"/></this>
		<to><icast><t path="hxmath.math.Matrix4x4Type"/></icast></to>
		<haxe_doc>* 4x4 matrix for homogenous/projection transformations in 3D.</haxe_doc>
		<meta><m n=":forward">
	<e>m00</e>
	<e>m01</e>
	<e>m02</e>
	<e>m03</e>
	<e>m10</e>
	<e>m11</e>
	<e>m12</e>
	<e>m13</e>
	<e>m20</e>
	<e>m21</e>
	<e>m22</e>
	<e>m23</e>
	<e>m30</e>
	<e>m31</e>
	<e>m32</e>
	<e>m33</e>
</m></meta>
		<impl><class path="hxmath.math._Matrix4x4.Matrix4x4_Impl_" params="" file="/home/travis/haxe/lib/hxmath/git/hxmath/math/Matrix4x4.hx" private="1" module="hxmath.math.Matrix4x4">
	<elementCount public="1" get="inline" set="null" expr="16" line="98" static="1">
		<x path="Int"/>
		<meta><m n=":value"><e>16</e></m></meta>
	</elementCount>
	<zero public="1" get="accessor" set="null" static="1"><x path="hxmath.math.Matrix4x4"/></zero>
	<identity public="1" get="accessor" set="null" static="1"><x path="hxmath.math.Matrix4x4"/></identity>
	<t public="1" get="accessor" set="accessor" static="1">
		<x path="hxmath.math.Vector3"/>
		<meta><m n=":impl"/></meta>
	</t>
	<det public="1" get="accessor" set="null" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</det>
	<transpose public="1" get="accessor" set="null" static="1">
		<x path="hxmath.math.Matrix4x4"/>
		<meta><m n=":impl"/></meta>
	</transpose>
	<subMatrix public="1" get="accessor" set="null" static="1">
		<x path="hxmath.math.Matrix3x3"/>
		<meta><m n=":impl"/></meta>
	</subMatrix>
	<_new public="1" get="inline" set="null" line="138" static="1">
		<f a="m00:m10:m20:m30:m01:m11:m21:m31:m02:m12:m22:m32:m03:m13:m23:m33">
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="hxmath.math.Matrix4x4"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
		<haxe_doc>* Constructor. Parameters are in row-major order (when written out the array is ordered like the matrix).
     * 
     * @param m00
     * @param m10
     * @param m20
     * @param m30
     * @param m01
     * @param m11
     * @param m21
     * @param m31
     * @param m02
     * @param m12
     * @param m22
     * @param m32
     * @param m03
     * @param m13
     * @param m23
     * @param m33</haxe_doc>
	</_new>
	<fromArray public="1" get="inline" set="null" line="157" static="1">
		<f a="rawData">
			<c path="Array"><x path="Float"/></c>
			<x path="hxmath.math.Matrix4x4"/>
		</f>
		<haxe_doc>* Construct a Matrix4x4 from an array.
     * 
     * @param rawData   The input array.
     * @return          The constructed structure.</haxe_doc>
	</fromArray>
	<fromMatrix4x4Shape public="1" get="inline" set="null" line="178" static="1">
		<f a="other">
			<x path="hxmath.math.Matrix4x4"/>
			<x path="hxmath.math.Matrix4x4"/>
		</f>
		<meta><m n=":from"/></meta>
		<haxe_doc>* Convert a shape-similar matrix.
     * 
     * @param other     The matrix to convert.
     * @return          The hxmath equivalent.</haxe_doc>
	</fromMatrix4x4Shape>
	<multiplyVector public="1" get="inline" set="null" line="195" static="1">
		<f a="a:v">
			<x path="hxmath.math.Matrix4x4"/>
			<x path="hxmath.math.Vector4"/>
			<x path="hxmath.math.Vector4"/>
		</f>
		<meta><m n=":op"><e>A * B</e></m></meta>
		<haxe_doc>* Multiply a matrix with a vector.
     * 
     * @param a
     * @param v
     * @return      a * v</haxe_doc>
	</multiplyVector>
	<multiply public="1" get="inline" set="null" line="212" static="1">
		<f a="a:b">
			<x path="hxmath.math.Matrix4x4"/>
			<x path="hxmath.math.Matrix4x4"/>
			<x path="hxmath.math.Matrix4x4"/>
		</f>
		<meta><m n=":op"><e>A * B</e></m></meta>
		<haxe_doc>* Multiply two matrices.
     * 
     * @param a
     * @param b
     * @return      a * b</haxe_doc>
	</multiply>
	<add public="1" get="inline" set="null" line="244" static="1">
		<f a="a:b">
			<x path="hxmath.math.Matrix4x4"/>
			<x path="hxmath.math.Matrix4x4"/>
			<x path="hxmath.math.Matrix4x4"/>
		</f>
		<meta><m n=":op"><e>A + B</e></m></meta>
		<haxe_doc>* Add two matrices.
     * 
     * @param a
     * @param b
     * @return      a + b</haxe_doc>
	</add>
	<subtract public="1" get="inline" set="null" line="258" static="1">
		<f a="a:b">
			<x path="hxmath.math.Matrix4x4"/>
			<x path="hxmath.math.Matrix4x4"/>
			<x path="hxmath.math.Matrix4x4"/>
		</f>
		<meta><m n=":op"><e>A - B</e></m></meta>
		<haxe_doc>* Subtract one matrix from another.
     * 
     * @param a
     * @param b
     * @return      a - b</haxe_doc>
	</subtract>
	<negate public="1" get="inline" set="null" line="271" static="1">
		<f a="a">
			<x path="hxmath.math.Matrix4x4"/>
			<x path="hxmath.math.Matrix4x4"/>
		</f>
		<meta><m n=":op"><e>-A</e></m></meta>
		<haxe_doc>* Create a negated copy of a matrix.
     * 
     * @param a
     * @return      -a</haxe_doc>
	</negate>
	<equals public="1" get="inline" set="null" line="289" static="1">
		<f a="a:b">
			<x path="hxmath.math.Matrix4x4"/>
			<x path="hxmath.math.Matrix4x4"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e>A == B</e></m></meta>
		<haxe_doc>* Test element-wise equality between two matrices.
     * False if one of the inputs is null and the other is not.
     * 
     * @param a
     * @param b
     * @return      a_ij == b_ij</haxe_doc>
	</equals>
	<set public="1" get="inline" set="null" line="333" static="1">
		<f a="this:m00:m10:m20:m30:m01:m11:m21:m31:m02:m12:m22:m32:m03:m13:m23:m33">
			<t path="hxmath.math.Matrix4x4Type"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="hxmath.math.Matrix4x4"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>* Sets all the fields of this structure without allocation.
     * 
     * @param m00
     * @param m10
     * @param m20
     * @param m30
     * @param m01
     * @param m11
     * @param m21
     * @param m31
     * @param m02
     * @param m12
     * @param m22
     * @param m32
     * @param m03
     * @param m13
     * @param m23
     * @param m33
     * @return self</haxe_doc>
	</set>
	<addWith public="1" get="inline" set="null" line="371" static="1">
		<f a="this:a">
			<t path="hxmath.math.Matrix4x4Type"/>
			<x path="hxmath.math.Matrix4x4"/>
			<x path="hxmath.math.Matrix4x4"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>* Add a matrix in place.
     * Note: += operator on Haxe abstracts does not behave this way (a new object is returned).
     * 
     * @param a
     * @return      self_ij += a_ij</haxe_doc>
	</addWith>
	<subtractWith public="1" get="inline" set="null" line="402" static="1">
		<f a="this:a">
			<t path="hxmath.math.Matrix4x4Type"/>
			<x path="hxmath.math.Matrix4x4"/>
			<x path="hxmath.math.Matrix4x4"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>* Subtract a matrix in place.
     * Note: -= operator on Haxe abstracts does not behave this way (a new object is returned).
     * 
     * @param a
     * @return      self_ij -= a_ij</haxe_doc>
	</subtractWith>
	<copyTo public="1" get="inline" set="null" line="432" static="1">
		<f a="this:target">
			<t path="hxmath.math.Matrix4x4Type"/>
			<x path="hxmath.math.Matrix4x4"/>
			<x path="Void"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>* Copy the contents of this structure to another.
     * Faster than copyToShape for static platforms (C++, etc) but requires the target to have the exact same inner type.
     * 
     * @param target    The target structure.</haxe_doc>
	</copyTo>
	<copyToShape public="1" get="inline" set="null" line="447" static="1">
		<f a="this:target">
			<t path="hxmath.math.Matrix4x4Type"/>
			<t path="hxmath.math.Matrix4x4Shape"/>
			<x path="Void"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>* Copy the contents of this structure to another (shape-similar) instance.
     * 
     * @param target    The target structure.</haxe_doc>
	</copyToShape>
	<copyFromShape public="1" get="inline" set="null" line="477" static="1">
		<f a="this:source">
			<t path="hxmath.math.Matrix4x4Type"/>
			<t path="hxmath.math.Matrix4x4Shape"/>
			<x path="Void"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>* Copy the contents of another (shape-similar) instance to this structure.
     * 
     * @param source    The source structure.</haxe_doc>
	</copyFromShape>
	<setRotateFromQuaternion public="1" get="inline" set="null" line="508" static="1">
		<f a="this:q">
			<t path="hxmath.math.Matrix4x4Type"/>
			<x path="hxmath.math.Quaternion"/>
			<x path="hxmath.math.Matrix4x4"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>* Set the linear portion of this matrix to a rotation from a quaternion.
     * 
     * @param q         The quaternion containing the rotation.
     * @return          This.</haxe_doc>
	</setRotateFromQuaternion>
	<setTranslate public="1" get="inline" set="null" line="540" static="1">
		<f a="this:x:y:z">
			<t path="hxmath.math.Matrix4x4Type"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="hxmath.math.Matrix4x4"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>* Set the right column to a translation.
     * 
     * @param x
     * @param y
     * @param z
     * @return      This.</haxe_doc>
	</setTranslate>
	<clone public="1" get="inline" set="null" line="557" static="1">
		<f a="this">
			<t path="hxmath.math.Matrix4x4Type"/>
			<x path="hxmath.math.Matrix4x4"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>* Clone.
     * 
     * @return  The cloned object.</haxe_doc>
	</clone>
	<getArrayElement public="1" get="inline" set="null" line="575" static="1">
		<f a="this:i">
			<t path="hxmath.math.Matrix4x4Type"/>
			<x path="Int"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":arrayAccess"/>
		</meta>
		<haxe_doc>* Get an element by position.
     * The implicit array is row-major (e.g. element (column count) + 1 is the first element of the second row).
     * 
     * @param i         The element index.
     * @return          The element.</haxe_doc>
	</getArrayElement>
	<setArrayElement public="1" get="inline" set="null" line="627" static="1">
		<f a="this:i:value">
			<t path="hxmath.math.Matrix4x4Type"/>
			<x path="Int"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":arrayAccess"/>
		</meta>
		<haxe_doc>* Set an element by position.
     * The implicit array is row-major (e.g. element (column count) + 1 is the first element of the second row).
     * 
     * @param i         The element index.
     * @param value     The new value.
     * @return          The updated element.</haxe_doc>
	</setArrayElement>
	<getElement public="1" get="inline" set="null" line="678" static="1">
		<f a="this:column:row">
			<t path="hxmath.math.Matrix4x4Type"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>* Get an element by (column, row) indices.
     * Both column and row indices start at 0, e.g. the index of the first element of the first row is (0, 0).
     * 
     * @param column    The column index.
     * @param row       The row index.
     * @return          The element.</haxe_doc>
	</getElement>
	<setElement public="1" get="inline" set="null" line="693" static="1">
		<f a="this:column:row:value">
			<t path="hxmath.math.Matrix4x4Type"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>* Set an element by (column, row) indices.
     * Both column and row indices start at 0, e.g. the index of the first element of the first row is (0, 0).
     * 
     * @param column    The column index.
     * @param row       The row index.
     * @param value     The new value.
     * @return          The updated element.</haxe_doc>
	</setElement>
	<col public="1" get="inline" set="null" line="705" static="1">
		<f a="this:index">
			<t path="hxmath.math.Matrix4x4Type"/>
			<x path="Int"/>
			<x path="hxmath.math.Vector4"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>* Get a column vector by index.
     * 
     * @param index     The 0-based index of the column.
     * @return          The column as a vector.</haxe_doc>
	</col>
	<row public="1" get="inline" set="null" line="730" static="1">
		<f a="this:index">
			<t path="hxmath.math.Matrix4x4Type"/>
			<x path="Int"/>
			<x path="hxmath.math.Vector4"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>* Get a row vector by index.
     * 
     * @param index     The 0-based index of the row.
     * @return          The row as a vector.</haxe_doc>
	</row>
	<applyScalarFunc public="1" get="inline" set="null" line="755" static="1">
		<f a="this:func">
			<t path="hxmath.math.Matrix4x4Type"/>
			<f a="">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<x path="hxmath.math.Matrix4x4"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>* Apply a scalar function to each element.
     * 
     * @param func  The function to apply.
     * @return      The modified object.</haxe_doc>
	</applyScalarFunc>
	<applySubMatrixTranspose public="1" get="inline" set="null" line="772" static="1">
		<f a="this">
			<t path="hxmath.math.Matrix4x4Type"/>
			<x path="hxmath.math.Matrix4x4"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>* Transpose the upper 3x3 block (the linear sub-matrix in a homogenous matrix).
     * 
     * @return  The modified object.</haxe_doc>
	</applySubMatrixTranspose>
	<applyInvertFrame public="1" get="inline" set="null" line="800" static="1">
		<f a="this">
			<t path="hxmath.math.Matrix4x4Type"/>
			<x path="hxmath.math.Matrix4x4"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>* Inverts the matrix assuming that it is a homogenous affine matrix (the last column gives
     * the translation) with a special orthogonal sub-matrix for the linear portion (a rotation
     * without any scaling/shearing/etc).
     * 
     * @return  The modified object.</haxe_doc>
	</applyInvertFrame>
	<get_zero get="inline" set="null" line="819" static="1"><f a=""><x path="hxmath.math.Matrix4x4"/></f></get_zero>
	<get_identity get="inline" set="null" line="828" static="1"><f a=""><x path="hxmath.math.Matrix4x4"/></f></get_identity>
	<get_t get="inline" set="null" line="837" static="1">
		<f a="this">
			<t path="hxmath.math.Matrix4x4Type"/>
			<x path="hxmath.math.Vector3"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_t>
	<set_t get="inline" set="null" line="843" static="1">
		<f a="this:t">
			<t path="hxmath.math.Matrix4x4Type"/>
			<x path="hxmath.math.Vector3"/>
			<x path="hxmath.math.Vector3"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_t>
	<get_transpose get="inline" set="null" line="852" static="1">
		<f a="this">
			<t path="hxmath.math.Matrix4x4Type"/>
			<x path="hxmath.math.Matrix4x4"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_transpose>
	<get_det get="inline" set="null" line="862" static="1">
		<f a="this">
			<t path="hxmath.math.Matrix4x4Type"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_det>
	<get_subMatrix get="inline" set="null" line="872" static="1">
		<f a="this">
			<t path="hxmath.math.Matrix4x4Type"/>
			<x path="hxmath.math.Matrix3x3"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_subMatrix>
</class></impl>
	</abstract>
	<class path="hxmath.math._Matrix4x4.Matrix4x4_Impl_" params="" file="/home/travis/haxe/lib/hxmath/git/hxmath/math/Matrix4x4.hx" private="1" module="hxmath.math.Matrix4x4">
		<elementCount public="1" get="inline" set="null" expr="16" line="98" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>16</e></m></meta>
		</elementCount>
		<zero public="1" get="accessor" set="null" static="1"><x path="hxmath.math.Matrix4x4"/></zero>
		<identity public="1" get="accessor" set="null" static="1"><x path="hxmath.math.Matrix4x4"/></identity>
		<t public="1" get="accessor" set="accessor" static="1">
			<x path="hxmath.math.Vector3"/>
			<meta><m n=":impl"/></meta>
		</t>
		<det public="1" get="accessor" set="null" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</det>
		<transpose public="1" get="accessor" set="null" static="1">
			<x path="hxmath.math.Matrix4x4"/>
			<meta><m n=":impl"/></meta>
		</transpose>
		<subMatrix public="1" get="accessor" set="null" static="1">
			<x path="hxmath.math.Matrix3x3"/>
			<meta><m n=":impl"/></meta>
		</subMatrix>
		<_new public="1" get="inline" set="null" line="138" static="1">
			<f a="m00:m10:m20:m30:m01:m11:m21:m31:m02:m12:m22:m32:m03:m13:m23:m33">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="hxmath.math.Matrix4x4"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
			<haxe_doc>* Constructor. Parameters are in row-major order (when written out the array is ordered like the matrix).
     * 
     * @param m00
     * @param m10
     * @param m20
     * @param m30
     * @param m01
     * @param m11
     * @param m21
     * @param m31
     * @param m02
     * @param m12
     * @param m22
     * @param m32
     * @param m03
     * @param m13
     * @param m23
     * @param m33</haxe_doc>
		</_new>
		<fromArray public="1" get="inline" set="null" line="157" static="1">
			<f a="rawData">
				<c path="Array"><x path="Float"/></c>
				<x path="hxmath.math.Matrix4x4"/>
			</f>
			<haxe_doc>* Construct a Matrix4x4 from an array.
     * 
     * @param rawData   The input array.
     * @return          The constructed structure.</haxe_doc>
		</fromArray>
		<fromMatrix4x4Shape public="1" get="inline" set="null" line="178" static="1">
			<f a="other">
				<x path="hxmath.math.Matrix4x4"/>
				<x path="hxmath.math.Matrix4x4"/>
			</f>
			<meta><m n=":from"/></meta>
			<haxe_doc>* Convert a shape-similar matrix.
     * 
     * @param other     The matrix to convert.
     * @return          The hxmath equivalent.</haxe_doc>
		</fromMatrix4x4Shape>
		<multiplyVector public="1" get="inline" set="null" line="195" static="1">
			<f a="a:v">
				<x path="hxmath.math.Matrix4x4"/>
				<x path="hxmath.math.Vector4"/>
				<x path="hxmath.math.Vector4"/>
			</f>
			<meta><m n=":op"><e>A * B</e></m></meta>
			<haxe_doc>* Multiply a matrix with a vector.
     * 
     * @param a
     * @param v
     * @return      a * v</haxe_doc>
		</multiplyVector>
		<multiply public="1" get="inline" set="null" line="212" static="1">
			<f a="a:b">
				<x path="hxmath.math.Matrix4x4"/>
				<x path="hxmath.math.Matrix4x4"/>
				<x path="hxmath.math.Matrix4x4"/>
			</f>
			<meta><m n=":op"><e>A * B</e></m></meta>
			<haxe_doc>* Multiply two matrices.
     * 
     * @param a
     * @param b
     * @return      a * b</haxe_doc>
		</multiply>
		<add public="1" get="inline" set="null" line="244" static="1">
			<f a="a:b">
				<x path="hxmath.math.Matrix4x4"/>
				<x path="hxmath.math.Matrix4x4"/>
				<x path="hxmath.math.Matrix4x4"/>
			</f>
			<meta><m n=":op"><e>A + B</e></m></meta>
			<haxe_doc>* Add two matrices.
     * 
     * @param a
     * @param b
     * @return      a + b</haxe_doc>
		</add>
		<subtract public="1" get="inline" set="null" line="258" static="1">
			<f a="a:b">
				<x path="hxmath.math.Matrix4x4"/>
				<x path="hxmath.math.Matrix4x4"/>
				<x path="hxmath.math.Matrix4x4"/>
			</f>
			<meta><m n=":op"><e>A - B</e></m></meta>
			<haxe_doc>* Subtract one matrix from another.
     * 
     * @param a
     * @param b
     * @return      a - b</haxe_doc>
		</subtract>
		<negate public="1" get="inline" set="null" line="271" static="1">
			<f a="a">
				<x path="hxmath.math.Matrix4x4"/>
				<x path="hxmath.math.Matrix4x4"/>
			</f>
			<meta><m n=":op"><e>-A</e></m></meta>
			<haxe_doc>* Create a negated copy of a matrix.
     * 
     * @param a
     * @return      -a</haxe_doc>
		</negate>
		<equals public="1" get="inline" set="null" line="289" static="1">
			<f a="a:b">
				<x path="hxmath.math.Matrix4x4"/>
				<x path="hxmath.math.Matrix4x4"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e>A == B</e></m></meta>
			<haxe_doc>* Test element-wise equality between two matrices.
     * False if one of the inputs is null and the other is not.
     * 
     * @param a
     * @param b
     * @return      a_ij == b_ij</haxe_doc>
		</equals>
		<set public="1" get="inline" set="null" line="333" static="1">
			<f a="this:m00:m10:m20:m30:m01:m11:m21:m31:m02:m12:m22:m32:m03:m13:m23:m33">
				<t path="hxmath.math.Matrix4x4Type"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="hxmath.math.Matrix4x4"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>* Sets all the fields of this structure without allocation.
     * 
     * @param m00
     * @param m10
     * @param m20
     * @param m30
     * @param m01
     * @param m11
     * @param m21
     * @param m31
     * @param m02
     * @param m12
     * @param m22
     * @param m32
     * @param m03
     * @param m13
     * @param m23
     * @param m33
     * @return self</haxe_doc>
		</set>
		<addWith public="1" get="inline" set="null" line="371" static="1">
			<f a="this:a">
				<t path="hxmath.math.Matrix4x4Type"/>
				<x path="hxmath.math.Matrix4x4"/>
				<x path="hxmath.math.Matrix4x4"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>* Add a matrix in place.
     * Note: += operator on Haxe abstracts does not behave this way (a new object is returned).
     * 
     * @param a
     * @return      self_ij += a_ij</haxe_doc>
		</addWith>
		<subtractWith public="1" get="inline" set="null" line="402" static="1">
			<f a="this:a">
				<t path="hxmath.math.Matrix4x4Type"/>
				<x path="hxmath.math.Matrix4x4"/>
				<x path="hxmath.math.Matrix4x4"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>* Subtract a matrix in place.
     * Note: -= operator on Haxe abstracts does not behave this way (a new object is returned).
     * 
     * @param a
     * @return      self_ij -= a_ij</haxe_doc>
		</subtractWith>
		<copyTo public="1" get="inline" set="null" line="432" static="1">
			<f a="this:target">
				<t path="hxmath.math.Matrix4x4Type"/>
				<x path="hxmath.math.Matrix4x4"/>
				<x path="Void"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>* Copy the contents of this structure to another.
     * Faster than copyToShape for static platforms (C++, etc) but requires the target to have the exact same inner type.
     * 
     * @param target    The target structure.</haxe_doc>
		</copyTo>
		<copyToShape public="1" get="inline" set="null" line="447" static="1">
			<f a="this:target">
				<t path="hxmath.math.Matrix4x4Type"/>
				<t path="hxmath.math.Matrix4x4Shape"/>
				<x path="Void"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>* Copy the contents of this structure to another (shape-similar) instance.
     * 
     * @param target    The target structure.</haxe_doc>
		</copyToShape>
		<copyFromShape public="1" get="inline" set="null" line="477" static="1">
			<f a="this:source">
				<t path="hxmath.math.Matrix4x4Type"/>
				<t path="hxmath.math.Matrix4x4Shape"/>
				<x path="Void"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>* Copy the contents of another (shape-similar) instance to this structure.
     * 
     * @param source    The source structure.</haxe_doc>
		</copyFromShape>
		<setRotateFromQuaternion public="1" get="inline" set="null" line="508" static="1">
			<f a="this:q">
				<t path="hxmath.math.Matrix4x4Type"/>
				<x path="hxmath.math.Quaternion"/>
				<x path="hxmath.math.Matrix4x4"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>* Set the linear portion of this matrix to a rotation from a quaternion.
     * 
     * @param q         The quaternion containing the rotation.
     * @return          This.</haxe_doc>
		</setRotateFromQuaternion>
		<setTranslate public="1" get="inline" set="null" line="540" static="1">
			<f a="this:x:y:z">
				<t path="hxmath.math.Matrix4x4Type"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="hxmath.math.Matrix4x4"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>* Set the right column to a translation.
     * 
     * @param x
     * @param y
     * @param z
     * @return      This.</haxe_doc>
		</setTranslate>
		<clone public="1" get="inline" set="null" line="557" static="1">
			<f a="this">
				<t path="hxmath.math.Matrix4x4Type"/>
				<x path="hxmath.math.Matrix4x4"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>* Clone.
     * 
     * @return  The cloned object.</haxe_doc>
		</clone>
		<getArrayElement public="1" get="inline" set="null" line="575" static="1">
			<f a="this:i">
				<t path="hxmath.math.Matrix4x4Type"/>
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":arrayAccess"/>
			</meta>
			<haxe_doc>* Get an element by position.
     * The implicit array is row-major (e.g. element (column count) + 1 is the first element of the second row).
     * 
     * @param i         The element index.
     * @return          The element.</haxe_doc>
		</getArrayElement>
		<setArrayElement public="1" get="inline" set="null" line="627" static="1">
			<f a="this:i:value">
				<t path="hxmath.math.Matrix4x4Type"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":arrayAccess"/>
			</meta>
			<haxe_doc>* Set an element by position.
     * The implicit array is row-major (e.g. element (column count) + 1 is the first element of the second row).
     * 
     * @param i         The element index.
     * @param value     The new value.
     * @return          The updated element.</haxe_doc>
		</setArrayElement>
		<getElement public="1" get="inline" set="null" line="678" static="1">
			<f a="this:column:row">
				<t path="hxmath.math.Matrix4x4Type"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>* Get an element by (column, row) indices.
     * Both column and row indices start at 0, e.g. the index of the first element of the first row is (0, 0).
     * 
     * @param column    The column index.
     * @param row       The row index.
     * @return          The element.</haxe_doc>
		</getElement>
		<setElement public="1" get="inline" set="null" line="693" static="1">
			<f a="this:column:row:value">
				<t path="hxmath.math.Matrix4x4Type"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>* Set an element by (column, row) indices.
     * Both column and row indices start at 0, e.g. the index of the first element of the first row is (0, 0).
     * 
     * @param column    The column index.
     * @param row       The row index.
     * @param value     The new value.
     * @return          The updated element.</haxe_doc>
		</setElement>
		<col public="1" get="inline" set="null" line="705" static="1">
			<f a="this:index">
				<t path="hxmath.math.Matrix4x4Type"/>
				<x path="Int"/>
				<x path="hxmath.math.Vector4"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>* Get a column vector by index.
     * 
     * @param index     The 0-based index of the column.
     * @return          The column as a vector.</haxe_doc>
		</col>
		<row public="1" get="inline" set="null" line="730" static="1">
			<f a="this:index">
				<t path="hxmath.math.Matrix4x4Type"/>
				<x path="Int"/>
				<x path="hxmath.math.Vector4"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>* Get a row vector by index.
     * 
     * @param index     The 0-based index of the row.
     * @return          The row as a vector.</haxe_doc>
		</row>
		<applyScalarFunc public="1" get="inline" set="null" line="755" static="1">
			<f a="this:func">
				<t path="hxmath.math.Matrix4x4Type"/>
				<f a="">
					<x path="Float"/>
					<x path="Float"/>
				</f>
				<x path="hxmath.math.Matrix4x4"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>* Apply a scalar function to each element.
     * 
     * @param func  The function to apply.
     * @return      The modified object.</haxe_doc>
		</applyScalarFunc>
		<applySubMatrixTranspose public="1" get="inline" set="null" line="772" static="1">
			<f a="this">
				<t path="hxmath.math.Matrix4x4Type"/>
				<x path="hxmath.math.Matrix4x4"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>* Transpose the upper 3x3 block (the linear sub-matrix in a homogenous matrix).
     * 
     * @return  The modified object.</haxe_doc>
		</applySubMatrixTranspose>
		<applyInvertFrame public="1" get="inline" set="null" line="800" static="1">
			<f a="this">
				<t path="hxmath.math.Matrix4x4Type"/>
				<x path="hxmath.math.Matrix4x4"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>* Inverts the matrix assuming that it is a homogenous affine matrix (the last column gives
     * the translation) with a special orthogonal sub-matrix for the linear portion (a rotation
     * without any scaling/shearing/etc).
     * 
     * @return  The modified object.</haxe_doc>
		</applyInvertFrame>
		<get_zero get="inline" set="null" line="819" static="1"><f a=""><x path="hxmath.math.Matrix4x4"/></f></get_zero>
		<get_identity get="inline" set="null" line="828" static="1"><f a=""><x path="hxmath.math.Matrix4x4"/></f></get_identity>
		<get_t get="inline" set="null" line="837" static="1">
			<f a="this">
				<t path="hxmath.math.Matrix4x4Type"/>
				<x path="hxmath.math.Vector3"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_t>
		<set_t get="inline" set="null" line="843" static="1">
			<f a="this:t">
				<t path="hxmath.math.Matrix4x4Type"/>
				<x path="hxmath.math.Vector3"/>
				<x path="hxmath.math.Vector3"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_t>
		<get_transpose get="inline" set="null" line="852" static="1">
			<f a="this">
				<t path="hxmath.math.Matrix4x4Type"/>
				<x path="hxmath.math.Matrix4x4"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_transpose>
		<get_det get="inline" set="null" line="862" static="1">
			<f a="this">
				<t path="hxmath.math.Matrix4x4Type"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_det>
		<get_subMatrix get="inline" set="null" line="872" static="1">
			<f a="this">
				<t path="hxmath.math.Matrix4x4Type"/>
				<x path="hxmath.math.Matrix3x3"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_subMatrix>
	</class>
	<typedef path="hxmath.math.QuaternionShape" params="" file="/home/travis/haxe/lib/hxmath/git/hxmath/math/Quaternion.hx" module="hxmath.math.Quaternion"><a>
	<z><x path="Float"/></z>
	<y><x path="Float"/></y>
	<x><x path="Float"/></x>
	<s><x path="Float"/></s>
</a></typedef>
	<class path="hxmath.math.QuaternionDefault" params="" file="/home/travis/haxe/lib/hxmath/git/hxmath/math/Quaternion.hx" module="hxmath.math.Quaternion">
		<s public="1"><x path="Float"/></s>
		<x public="1"><x path="Float"/></x>
		<y public="1"><x path="Float"/></y>
		<z public="1"><x path="Float"/></z>
		<toString public="1" set="method" line="31"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method" line="23"><f a="s:x:y:z">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>* The default underlying type.</haxe_doc>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<abstract path="hxmath.math.Quaternion" params="" file="/home/travis/haxe/lib/hxmath/git/hxmath/math/Quaternion.hx">
		<from><icast><t path="hxmath.math.QuaternionType"/></icast></from>
		<this><t path="hxmath.math.QuaternionType"/></this>
		<to><icast><t path="hxmath.math.QuaternionType"/></icast></to>
		<haxe_doc>* Quaternion for rotation in 3D.</haxe_doc>
		<meta><m n=":forward">
	<e>s</e>
	<e>x</e>
	<e>y</e>
	<e>z</e>
</m></meta>
		<impl><class path="hxmath.math._Quaternion.Quaternion_Impl_" params="" file="/home/travis/haxe/lib/hxmath/git/hxmath/math/Quaternion.hx" private="1" module="hxmath.math.Quaternion">
	<elementCount public="1" get="inline" set="null" expr="4" line="44" static="1">
		<x path="Int"/>
		<meta><m n=":value"><e>4</e></m></meta>
	</elementCount>
	<zero public="1" get="accessor" set="null" static="1"><x path="hxmath.math.Quaternion"/></zero>
	<identity public="1" get="accessor" set="null" static="1"><x path="hxmath.math.Quaternion"/></identity>
	<matrix public="1" get="accessor" set="null" static="1">
		<x path="hxmath.math.Matrix3x3"/>
		<meta><m n=":impl"/></meta>
	</matrix>
	<length public="1" get="accessor" set="null" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</length>
	<lengthSq public="1" get="accessor" set="null" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</lengthSq>
	<normal public="1" get="accessor" set="null" static="1">
		<x path="hxmath.math.Quaternion"/>
		<meta><m n=":impl"/></meta>
	</normal>
	<_new public="1" get="inline" set="null" line="72" static="1">
		<f a="s:x:y:z">
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="hxmath.math.Quaternion"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
		<haxe_doc>* Constructor.
     * 
     * @param s     Scalar (real) part.
     * @param x     Vector (complex) part x component.
     * @param y     Vector (complex) part y component.
     * @param z     Vector (complex) part z component</haxe_doc>
	</_new>
	<fromArray public="1" get="inline" set="null" line="83" static="1">
		<f a="rawData">
			<c path="Array"><x path="Float"/></c>
			<x path="hxmath.math.Quaternion"/>
		</f>
		<haxe_doc>* Construct a Quaternion from an array.
     * 
     * @param rawData   The input array.
     * @return          The constructed structure.</haxe_doc>
	</fromArray>
	<fromAxisAngle public="1" get="inline" set="null" line="100" static="1">
		<f a="angleDegrees:axis">
			<x path="Float"/>
			<x path="hxmath.math.Vector3"/>
			<x path="hxmath.math.Quaternion"/>
		</f>
		<haxe_doc>* Create a quaternion from an axis-angle pair.
     * 
     * @param angleDegrees  The angle to rotate in degrees.
     * @param axis          The axis to rotate around.
     * @return              The quaternion.</haxe_doc>
	</fromAxisAngle>
	<multiplyScalar public="1" get="inline" set="null" line="122" static="1">
		<f a="a:s">
			<x path="hxmath.math.Quaternion"/>
			<x path="Float"/>
			<x path="hxmath.math.Quaternion"/>
		</f>
		<meta>
			<m n=":op"><e>A * B</e></m>
			<m n=":commutative"/>
		</meta>
		<haxe_doc>* Multiply a (real) scalar with a quaternion.
     * 
     * @param a
     * @param s
     * @return      s * a</haxe_doc>
	</multiplyScalar>
	<multiply public="1" get="inline" set="null" line="136" static="1">
		<f a="a:b">
			<x path="hxmath.math.Quaternion"/>
			<x path="hxmath.math.Quaternion"/>
			<x path="hxmath.math.Quaternion"/>
		</f>
		<meta><m n=":op"><e>A * B</e></m></meta>
		<haxe_doc>* Multiply two quaternions.
     * 
     * @param a
     * @param b
     * @return      a * b</haxe_doc>
	</multiply>
	<add public="1" get="inline" set="null" line="153" static="1">
		<f a="a:b">
			<x path="hxmath.math.Quaternion"/>
			<x path="hxmath.math.Quaternion"/>
			<x path="hxmath.math.Quaternion"/>
		</f>
		<meta><m n=":op"><e>A + B</e></m></meta>
		<haxe_doc>* Add two quaternions.
     * 
     * @param a
     * @param b
     * @return      a + b</haxe_doc>
	</add>
	<subtract public="1" get="inline" set="null" line="167" static="1">
		<f a="a:b">
			<x path="hxmath.math.Quaternion"/>
			<x path="hxmath.math.Quaternion"/>
			<x path="hxmath.math.Quaternion"/>
		</f>
		<meta><m n=":op"><e>A - B</e></m></meta>
		<haxe_doc>* Subtract one quaternion from another.
     * 
     * @param a
     * @param b
     * @return      a - b</haxe_doc>
	</subtract>
	<conjugate public="1" get="inline" set="null" line="180" static="1">
		<f a="a">
			<x path="hxmath.math.Quaternion"/>
			<x path="hxmath.math.Quaternion"/>
		</f>
		<meta><m n=":op"><e>~A</e></m></meta>
		<haxe_doc>* Create a complex conjugate copy of a quaternion (complex/vector portion is negated).
     * 
     * @param a
     * @return      a*</haxe_doc>
	</conjugate>
	<negate public="1" get="inline" set="null" line="192" static="1">
		<f a="a">
			<x path="hxmath.math.Quaternion"/>
			<x path="hxmath.math.Quaternion"/>
		</f>
		<meta><m n=":op"><e>-A</e></m></meta>
		<haxe_doc>* Create a negated copy of a quaternion.
     * 
     * @param a
     * @return      -a</haxe_doc>
	</negate>
	<equals public="1" get="inline" set="null" line="206" static="1">
		<f a="a:b">
			<x path="hxmath.math.Quaternion"/>
			<x path="hxmath.math.Quaternion"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e>A == B</e></m></meta>
		<haxe_doc>* Test element-wise equality between two quaternions.
     * False if one of the inputs is null and the other is not.
     * 
     * @param a
     * @param b
     * @return     a_i == b_i</haxe_doc>
	</equals>
	<lerp public="1" get="inline" set="null" line="225" static="1">
		<f a="a:b:t">
			<x path="hxmath.math.Quaternion"/>
			<x path="hxmath.math.Quaternion"/>
			<x path="Float"/>
			<x path="hxmath.math.Quaternion"/>
		</f>
		<haxe_doc>* Linear interpolation between two quaternions.
     * 
     * @param a     The value at t = 0
     * @param b     The value at t = 1
     * @param t     A number in the range [0, 1]
     * @return      The interpolated value</haxe_doc>
	</lerp>
	<slerp public="1" get="inline" set="null" line="230" static="1"><f a="a:b:t">
	<x path="hxmath.math.Quaternion"/>
	<x path="hxmath.math.Quaternion"/>
	<x path="Float"/>
	<x path="hxmath.math.Quaternion"/>
</f></slerp>
	<dot public="1" get="inline" set="null" line="269" static="1">
		<f a="a:b">
			<x path="hxmath.math.Quaternion"/>
			<x path="hxmath.math.Quaternion"/>
			<x path="Float"/>
		</f>
		<haxe_doc>* Dot product.
     * 
     * @param a
     * @return      sum_i (a_i * b_i)</haxe_doc>
	</dot>
	<set public="1" get="inline" set="null" line="286" static="1">
		<f a="this:s:x:y:z">
			<t path="hxmath.math.QuaternionType"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="hxmath.math.Quaternion"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>* Sets all the fields of this structure without allocation.
     * 
     * @param s
     * @param x
     * @param y
     * @param z
     * @return self</haxe_doc>
	</set>
	<invert public="1" get="inline" set="null" line="303" static="1">
		<f a="this">
			<t path="hxmath.math.QuaternionType"/>
			<x path="hxmath.math.Quaternion"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>* Create an inverted copy.
     * 
     * @return  The inverse.</haxe_doc>
	</invert>
	<multiplyWithScalar public="1" get="inline" set="null" line="318" static="1">
		<f a="this:s">
			<t path="hxmath.math.QuaternionType"/>
			<x path="Float"/>
			<x path="hxmath.math.Quaternion"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>* Multiply a quaternion with a scalar in place.
     * Note: *= operator on Haxe abstracts does not behave this way (a new object is returned).
     * 
     * @param a
     * @return      self_i *= s</haxe_doc>
	</multiplyWithScalar>
	<addWith public="1" get="inline" set="null" line="337" static="1">
		<f a="this:a">
			<t path="hxmath.math.QuaternionType"/>
			<x path="hxmath.math.Quaternion"/>
			<x path="hxmath.math.Quaternion"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>* Add a quaternion in place.
     * Note: += operator on Haxe abstracts does not behave this way (a new object is returned).
     * 
     * @param a
     * @return      self_i += a_i</haxe_doc>
	</addWith>
	<subtractWith public="1" get="inline" set="null" line="356" static="1">
		<f a="this:a">
			<t path="hxmath.math.QuaternionType"/>
			<x path="hxmath.math.Quaternion"/>
			<x path="hxmath.math.Quaternion"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>* Subtract a quaternion in place.
     * Note: -= operator on Haxe abstracts does not behave this way (a new object is returned).
     * 
     * @param a
     * @return      self_i -= a_i</haxe_doc>
	</subtractWith>
	<copyTo public="1" get="inline" set="null" line="374" static="1">
		<f a="this:target">
			<t path="hxmath.math.QuaternionType"/>
			<x path="hxmath.math.Quaternion"/>
			<x path="Void"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>* Copy the contents of this structure to another.
     * Faster than copyToShape for static platforms (C++, etc) but requires the target to have the exact same inner type.
     * 
     * @param target    The target structure.</haxe_doc>
	</copyTo>
	<copyToShape public="1" get="inline" set="null" line="389" static="1">
		<f a="this:target">
			<t path="hxmath.math.QuaternionType"/>
			<t path="hxmath.math.QuaternionShape"/>
			<x path="Void"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>* Copy the contents of this structure to another (shape-similar) instance.
     * 
     * @param target    The target structure.</haxe_doc>
	</copyToShape>
	<copyFromShape public="1" get="inline" set="null" line="404" static="1">
		<f a="this:source">
			<t path="hxmath.math.QuaternionType"/>
			<t path="hxmath.math.QuaternionShape"/>
			<x path="Void"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>* Copy the contents of another (shape-similar) instance to this structure.
     * 
     * @param source    The source structure.</haxe_doc>
	</copyFromShape>
	<clone public="1" get="inline" set="null" line="419" static="1">
		<f a="this">
			<t path="hxmath.math.QuaternionType"/>
			<x path="hxmath.math.Quaternion"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>* Clone.
     * 
     * @return  The cloned object.</haxe_doc>
	</clone>
	<getArrayElement public="1" get="inline" set="null" line="432" static="1">
		<f a="this:i">
			<t path="hxmath.math.QuaternionType"/>
			<x path="Int"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":arrayAccess"/>
		</meta>
		<haxe_doc>* Get an element by position.
     * 
     * @param i         The element index.
     * @return          The element.</haxe_doc>
	</getArrayElement>
	<setArrayElement public="1" get="inline" set="null" line="458" static="1">
		<f a="this:i:value">
			<t path="hxmath.math.QuaternionType"/>
			<x path="Int"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":arrayAccess"/>
		</meta>
		<haxe_doc>* Set an element by position.
     * 
     * @param i         The element index.
     * @param value     The new value.
     * @return          The updated element.</haxe_doc>
	</setArrayElement>
	<applyScalarFunc public="1" get="inline" set="null" line="482" static="1">
		<f a="this:func">
			<t path="hxmath.math.QuaternionType"/>
			<f a="">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<x path="hxmath.math.Quaternion"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>* Apply a scalar function to each element.
     * 
     * @param func  The function to apply.
     * @return      The modified object.</haxe_doc>
	</applyScalarFunc>
	<log public="1" get="inline" set="null" line="499" static="1">
		<f a="this">
			<t path="hxmath.math.QuaternionType"/>
			<x path="hxmath.math.Quaternion"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>* Get the log for the quaternion.
     * 
     * @return  log(q) == [0, theta/sin(theta) * v]</haxe_doc>
	</log>
	<exp public="1" get="inline" set="null" line="522" static="1">
		<f a="this">
			<t path="hxmath.math.QuaternionType"/>
			<x path="hxmath.math.Quaternion"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>* Get the exponential for the quaternion.
     * 
     * @return  exp(q) == [cos(theta), v * sin(theta)]</haxe_doc>
	</exp>
	<rotate public="1" get="inline" set="null" line="546" static="1">
		<f a="this:u">
			<t path="hxmath.math.QuaternionType"/>
			<x path="hxmath.math.Vector3"/>
			<x path="hxmath.math.Vector3"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>* Rotate the given vector, assuming the current quaternion is normalized (if not, normalize first).
     * 
     * @param u     The vector to rotate.
     * @return      The rotated vector.</haxe_doc>
	</rotate>
	<angleWith public="1" get="inline" set="null" line="567" static="1">
		<f a="this:b">
			<t path="hxmath.math.QuaternionType"/>
			<x path="hxmath.math.Quaternion"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>* Find the arccosine of the angle between two quaternions.
     * 
     * @param b     The other quaternion.
     * @return      The arccosine angle between this vector and the other in radians.</haxe_doc>
	</angleWith>
	<normalize public="1" get="inline" set="null" line="578" static="1">
		<f a="this">
			<t path="hxmath.math.QuaternionType"/>
			<x path="hxmath.math.Quaternion"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>* Normalize the quaternion in-place.
     * 
     * @return  The modified object.</haxe_doc>
	</normalize>
	<applyConjugate public="1" get="inline" set="null" line="597" static="1">
		<f a="this">
			<t path="hxmath.math.QuaternionType"/>
			<x path="hxmath.math.Quaternion"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>* Conjugate the quaternion in-place.
     * 
     * @return  The modified object.</haxe_doc>
	</applyConjugate>
	<applyInvert public="1" get="inline" set="null" line="613" static="1">
		<f a="this">
			<t path="hxmath.math.QuaternionType"/>
			<x path="hxmath.math.Quaternion"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>* Invert the quaternion in-place. Useful when the quaternion may have been denormalized.
     * 
     * @return  The modified object.</haxe_doc>
	</applyInvert>
	<get_zero get="inline" set="null" line="621" static="1"><f a=""><x path="hxmath.math.Quaternion"/></f></get_zero>
	<get_identity get="inline" set="null" line="626" static="1"><f a=""><x path="hxmath.math.Quaternion"/></f></get_identity>
	<get_length get="inline" set="null" line="631" static="1">
		<f a="this">
			<t path="hxmath.math.QuaternionType"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_length>
	<get_lengthSq get="inline" set="null" line="637" static="1">
		<f a="this">
			<t path="hxmath.math.QuaternionType"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_lengthSq>
	<get_matrix get="inline" set="null" line="643" static="1">
		<f a="this">
			<t path="hxmath.math.QuaternionType"/>
			<x path="hxmath.math.Matrix3x3"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_matrix>
	<get_normal get="inline" set="null" line="660" static="1">
		<f a="this">
			<t path="hxmath.math.QuaternionType"/>
			<x path="hxmath.math.Quaternion"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_normal>
</class></impl>
	</abstract>
	<class path="hxmath.math._Quaternion.Quaternion_Impl_" params="" file="/home/travis/haxe/lib/hxmath/git/hxmath/math/Quaternion.hx" private="1" module="hxmath.math.Quaternion">
		<elementCount public="1" get="inline" set="null" expr="4" line="44" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>4</e></m></meta>
		</elementCount>
		<zero public="1" get="accessor" set="null" static="1"><x path="hxmath.math.Quaternion"/></zero>
		<identity public="1" get="accessor" set="null" static="1"><x path="hxmath.math.Quaternion"/></identity>
		<matrix public="1" get="accessor" set="null" static="1">
			<x path="hxmath.math.Matrix3x3"/>
			<meta><m n=":impl"/></meta>
		</matrix>
		<length public="1" get="accessor" set="null" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</length>
		<lengthSq public="1" get="accessor" set="null" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</lengthSq>
		<normal public="1" get="accessor" set="null" static="1">
			<x path="hxmath.math.Quaternion"/>
			<meta><m n=":impl"/></meta>
		</normal>
		<_new public="1" get="inline" set="null" line="72" static="1">
			<f a="s:x:y:z">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="hxmath.math.Quaternion"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
			<haxe_doc>* Constructor.
     * 
     * @param s     Scalar (real) part.
     * @param x     Vector (complex) part x component.
     * @param y     Vector (complex) part y component.
     * @param z     Vector (complex) part z component</haxe_doc>
		</_new>
		<fromArray public="1" get="inline" set="null" line="83" static="1">
			<f a="rawData">
				<c path="Array"><x path="Float"/></c>
				<x path="hxmath.math.Quaternion"/>
			</f>
			<haxe_doc>* Construct a Quaternion from an array.
     * 
     * @param rawData   The input array.
     * @return          The constructed structure.</haxe_doc>
		</fromArray>
		<fromAxisAngle public="1" get="inline" set="null" line="100" static="1">
			<f a="angleDegrees:axis">
				<x path="Float"/>
				<x path="hxmath.math.Vector3"/>
				<x path="hxmath.math.Quaternion"/>
			</f>
			<haxe_doc>* Create a quaternion from an axis-angle pair.
     * 
     * @param angleDegrees  The angle to rotate in degrees.
     * @param axis          The axis to rotate around.
     * @return              The quaternion.</haxe_doc>
		</fromAxisAngle>
		<multiplyScalar public="1" get="inline" set="null" line="122" static="1">
			<f a="a:s">
				<x path="hxmath.math.Quaternion"/>
				<x path="Float"/>
				<x path="hxmath.math.Quaternion"/>
			</f>
			<meta>
				<m n=":op"><e>A * B</e></m>
				<m n=":commutative"/>
			</meta>
			<haxe_doc>* Multiply a (real) scalar with a quaternion.
     * 
     * @param a
     * @param s
     * @return      s * a</haxe_doc>
		</multiplyScalar>
		<multiply public="1" get="inline" set="null" line="136" static="1">
			<f a="a:b">
				<x path="hxmath.math.Quaternion"/>
				<x path="hxmath.math.Quaternion"/>
				<x path="hxmath.math.Quaternion"/>
			</f>
			<meta><m n=":op"><e>A * B</e></m></meta>
			<haxe_doc>* Multiply two quaternions.
     * 
     * @param a
     * @param b
     * @return      a * b</haxe_doc>
		</multiply>
		<add public="1" get="inline" set="null" line="153" static="1">
			<f a="a:b">
				<x path="hxmath.math.Quaternion"/>
				<x path="hxmath.math.Quaternion"/>
				<x path="hxmath.math.Quaternion"/>
			</f>
			<meta><m n=":op"><e>A + B</e></m></meta>
			<haxe_doc>* Add two quaternions.
     * 
     * @param a
     * @param b
     * @return      a + b</haxe_doc>
		</add>
		<subtract public="1" get="inline" set="null" line="167" static="1">
			<f a="a:b">
				<x path="hxmath.math.Quaternion"/>
				<x path="hxmath.math.Quaternion"/>
				<x path="hxmath.math.Quaternion"/>
			</f>
			<meta><m n=":op"><e>A - B</e></m></meta>
			<haxe_doc>* Subtract one quaternion from another.
     * 
     * @param a
     * @param b
     * @return      a - b</haxe_doc>
		</subtract>
		<conjugate public="1" get="inline" set="null" line="180" static="1">
			<f a="a">
				<x path="hxmath.math.Quaternion"/>
				<x path="hxmath.math.Quaternion"/>
			</f>
			<meta><m n=":op"><e>~A</e></m></meta>
			<haxe_doc>* Create a complex conjugate copy of a quaternion (complex/vector portion is negated).
     * 
     * @param a
     * @return      a*</haxe_doc>
		</conjugate>
		<negate public="1" get="inline" set="null" line="192" static="1">
			<f a="a">
				<x path="hxmath.math.Quaternion"/>
				<x path="hxmath.math.Quaternion"/>
			</f>
			<meta><m n=":op"><e>-A</e></m></meta>
			<haxe_doc>* Create a negated copy of a quaternion.
     * 
     * @param a
     * @return      -a</haxe_doc>
		</negate>
		<equals public="1" get="inline" set="null" line="206" static="1">
			<f a="a:b">
				<x path="hxmath.math.Quaternion"/>
				<x path="hxmath.math.Quaternion"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e>A == B</e></m></meta>
			<haxe_doc>* Test element-wise equality between two quaternions.
     * False if one of the inputs is null and the other is not.
     * 
     * @param a
     * @param b
     * @return     a_i == b_i</haxe_doc>
		</equals>
		<lerp public="1" get="inline" set="null" line="225" static="1">
			<f a="a:b:t">
				<x path="hxmath.math.Quaternion"/>
				<x path="hxmath.math.Quaternion"/>
				<x path="Float"/>
				<x path="hxmath.math.Quaternion"/>
			</f>
			<haxe_doc>* Linear interpolation between two quaternions.
     * 
     * @param a     The value at t = 0
     * @param b     The value at t = 1
     * @param t     A number in the range [0, 1]
     * @return      The interpolated value</haxe_doc>
		</lerp>
		<slerp public="1" get="inline" set="null" line="230" static="1"><f a="a:b:t">
	<x path="hxmath.math.Quaternion"/>
	<x path="hxmath.math.Quaternion"/>
	<x path="Float"/>
	<x path="hxmath.math.Quaternion"/>
</f></slerp>
		<dot public="1" get="inline" set="null" line="269" static="1">
			<f a="a:b">
				<x path="hxmath.math.Quaternion"/>
				<x path="hxmath.math.Quaternion"/>
				<x path="Float"/>
			</f>
			<haxe_doc>* Dot product.
     * 
     * @param a
     * @return      sum_i (a_i * b_i)</haxe_doc>
		</dot>
		<set public="1" get="inline" set="null" line="286" static="1">
			<f a="this:s:x:y:z">
				<t path="hxmath.math.QuaternionType"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="hxmath.math.Quaternion"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>* Sets all the fields of this structure without allocation.
     * 
     * @param s
     * @param x
     * @param y
     * @param z
     * @return self</haxe_doc>
		</set>
		<invert public="1" get="inline" set="null" line="303" static="1">
			<f a="this">
				<t path="hxmath.math.QuaternionType"/>
				<x path="hxmath.math.Quaternion"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>* Create an inverted copy.
     * 
     * @return  The inverse.</haxe_doc>
		</invert>
		<multiplyWithScalar public="1" get="inline" set="null" line="318" static="1">
			<f a="this:s">
				<t path="hxmath.math.QuaternionType"/>
				<x path="Float"/>
				<x path="hxmath.math.Quaternion"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>* Multiply a quaternion with a scalar in place.
     * Note: *= operator on Haxe abstracts does not behave this way (a new object is returned).
     * 
     * @param a
     * @return      self_i *= s</haxe_doc>
		</multiplyWithScalar>
		<addWith public="1" get="inline" set="null" line="337" static="1">
			<f a="this:a">
				<t path="hxmath.math.QuaternionType"/>
				<x path="hxmath.math.Quaternion"/>
				<x path="hxmath.math.Quaternion"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>* Add a quaternion in place.
     * Note: += operator on Haxe abstracts does not behave this way (a new object is returned).
     * 
     * @param a
     * @return      self_i += a_i</haxe_doc>
		</addWith>
		<subtractWith public="1" get="inline" set="null" line="356" static="1">
			<f a="this:a">
				<t path="hxmath.math.QuaternionType"/>
				<x path="hxmath.math.Quaternion"/>
				<x path="hxmath.math.Quaternion"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>* Subtract a quaternion in place.
     * Note: -= operator on Haxe abstracts does not behave this way (a new object is returned).
     * 
     * @param a
     * @return      self_i -= a_i</haxe_doc>
		</subtractWith>
		<copyTo public="1" get="inline" set="null" line="374" static="1">
			<f a="this:target">
				<t path="hxmath.math.QuaternionType"/>
				<x path="hxmath.math.Quaternion"/>
				<x path="Void"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>* Copy the contents of this structure to another.
     * Faster than copyToShape for static platforms (C++, etc) but requires the target to have the exact same inner type.
     * 
     * @param target    The target structure.</haxe_doc>
		</copyTo>
		<copyToShape public="1" get="inline" set="null" line="389" static="1">
			<f a="this:target">
				<t path="hxmath.math.QuaternionType"/>
				<t path="hxmath.math.QuaternionShape"/>
				<x path="Void"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>* Copy the contents of this structure to another (shape-similar) instance.
     * 
     * @param target    The target structure.</haxe_doc>
		</copyToShape>
		<copyFromShape public="1" get="inline" set="null" line="404" static="1">
			<f a="this:source">
				<t path="hxmath.math.QuaternionType"/>
				<t path="hxmath.math.QuaternionShape"/>
				<x path="Void"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>* Copy the contents of another (shape-similar) instance to this structure.
     * 
     * @param source    The source structure.</haxe_doc>
		</copyFromShape>
		<clone public="1" get="inline" set="null" line="419" static="1">
			<f a="this">
				<t path="hxmath.math.QuaternionType"/>
				<x path="hxmath.math.Quaternion"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>* Clone.
     * 
     * @return  The cloned object.</haxe_doc>
		</clone>
		<getArrayElement public="1" get="inline" set="null" line="432" static="1">
			<f a="this:i">
				<t path="hxmath.math.QuaternionType"/>
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":arrayAccess"/>
			</meta>
			<haxe_doc>* Get an element by position.
     * 
     * @param i         The element index.
     * @return          The element.</haxe_doc>
		</getArrayElement>
		<setArrayElement public="1" get="inline" set="null" line="458" static="1">
			<f a="this:i:value">
				<t path="hxmath.math.QuaternionType"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":arrayAccess"/>
			</meta>
			<haxe_doc>* Set an element by position.
     * 
     * @param i         The element index.
     * @param value     The new value.
     * @return          The updated element.</haxe_doc>
		</setArrayElement>
		<applyScalarFunc public="1" get="inline" set="null" line="482" static="1">
			<f a="this:func">
				<t path="hxmath.math.QuaternionType"/>
				<f a="">
					<x path="Float"/>
					<x path="Float"/>
				</f>
				<x path="hxmath.math.Quaternion"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>* Apply a scalar function to each element.
     * 
     * @param func  The function to apply.
     * @return      The modified object.</haxe_doc>
		</applyScalarFunc>
		<log public="1" get="inline" set="null" line="499" static="1">
			<f a="this">
				<t path="hxmath.math.QuaternionType"/>
				<x path="hxmath.math.Quaternion"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>* Get the log for the quaternion.
     * 
     * @return  log(q) == [0, theta/sin(theta) * v]</haxe_doc>
		</log>
		<exp public="1" get="inline" set="null" line="522" static="1">
			<f a="this">
				<t path="hxmath.math.QuaternionType"/>
				<x path="hxmath.math.Quaternion"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>* Get the exponential for the quaternion.
     * 
     * @return  exp(q) == [cos(theta), v * sin(theta)]</haxe_doc>
		</exp>
		<rotate public="1" get="inline" set="null" line="546" static="1">
			<f a="this:u">
				<t path="hxmath.math.QuaternionType"/>
				<x path="hxmath.math.Vector3"/>
				<x path="hxmath.math.Vector3"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>* Rotate the given vector, assuming the current quaternion is normalized (if not, normalize first).
     * 
     * @param u     The vector to rotate.
     * @return      The rotated vector.</haxe_doc>
		</rotate>
		<angleWith public="1" get="inline" set="null" line="567" static="1">
			<f a="this:b">
				<t path="hxmath.math.QuaternionType"/>
				<x path="hxmath.math.Quaternion"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>* Find the arccosine of the angle between two quaternions.
     * 
     * @param b     The other quaternion.
     * @return      The arccosine angle between this vector and the other in radians.</haxe_doc>
		</angleWith>
		<normalize public="1" get="inline" set="null" line="578" static="1">
			<f a="this">
				<t path="hxmath.math.QuaternionType"/>
				<x path="hxmath.math.Quaternion"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>* Normalize the quaternion in-place.
     * 
     * @return  The modified object.</haxe_doc>
		</normalize>
		<applyConjugate public="1" get="inline" set="null" line="597" static="1">
			<f a="this">
				<t path="hxmath.math.QuaternionType"/>
				<x path="hxmath.math.Quaternion"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>* Conjugate the quaternion in-place.
     * 
     * @return  The modified object.</haxe_doc>
		</applyConjugate>
		<applyInvert public="1" get="inline" set="null" line="613" static="1">
			<f a="this">
				<t path="hxmath.math.QuaternionType"/>
				<x path="hxmath.math.Quaternion"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>* Invert the quaternion in-place. Useful when the quaternion may have been denormalized.
     * 
     * @return  The modified object.</haxe_doc>
		</applyInvert>
		<get_zero get="inline" set="null" line="621" static="1"><f a=""><x path="hxmath.math.Quaternion"/></f></get_zero>
		<get_identity get="inline" set="null" line="626" static="1"><f a=""><x path="hxmath.math.Quaternion"/></f></get_identity>
		<get_length get="inline" set="null" line="631" static="1">
			<f a="this">
				<t path="hxmath.math.QuaternionType"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_length>
		<get_lengthSq get="inline" set="null" line="637" static="1">
			<f a="this">
				<t path="hxmath.math.QuaternionType"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_lengthSq>
		<get_matrix get="inline" set="null" line="643" static="1">
			<f a="this">
				<t path="hxmath.math.QuaternionType"/>
				<x path="hxmath.math.Matrix3x3"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_matrix>
		<get_normal get="inline" set="null" line="660" static="1">
			<f a="this">
				<t path="hxmath.math.QuaternionType"/>
				<x path="hxmath.math.Quaternion"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_normal>
	</class>
	<typedef path="hxmath.math.Vector2Shape" params="" file="/home/travis/haxe/lib/hxmath/git/hxmath/math/Vector2.hx" module="hxmath.math.Vector2"><a>
	<y><x path="Float"/></y>
	<x><x path="Float"/></x>
</a></typedef>
	<abstract path="hxmath.math.Vector2" params="" file="/home/travis/haxe/lib/hxmath/git/hxmath/math/Vector2.hx">
		<from>
			<icast><t path="hxmath.math.Vector2Type"/></icast>
			<icast field="fromVector2Shape"><t path="hxmath.math.Vector2Shape"/></icast>
		</from>
		<this><t path="hxmath.math.Vector2Type"/></this>
		<to><icast><t path="hxmath.math.Vector2Type"/></icast></to>
		<haxe_doc>* A 2D vector.</haxe_doc>
		<meta><m n=":forward">
	<e>x</e>
	<e>y</e>
</m></meta>
		<impl><class path="hxmath.math._Vector2.Vector2_Impl_" params="" file="/home/travis/haxe/lib/hxmath/git/hxmath/math/Vector2.hx" private="1" module="hxmath.math.Vector2">
	<elementCount public="1" get="inline" set="null" expr="2" line="38" static="1">
		<x path="Int"/>
		<meta><m n=":value"><e>2</e></m></meta>
	</elementCount>
	<zero public="1" get="accessor" set="null" static="1"><x path="hxmath.math.Vector2"/></zero>
	<xAxis public="1" get="accessor" set="null" static="1"><x path="hxmath.math.Vector2"/></xAxis>
	<yAxis public="1" get="accessor" set="null" static="1"><x path="hxmath.math.Vector2"/></yAxis>
	<length public="1" get="accessor" set="null" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</length>
	<lengthSq public="1" get="accessor" set="null" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</lengthSq>
	<angle public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</angle>
	<normal public="1" get="accessor" set="null" static="1">
		<x path="hxmath.math.Vector2"/>
		<meta><m n=":impl"/></meta>
	</normal>
	<rotatedLeft public="1" get="accessor" set="null" static="1">
		<x path="hxmath.math.Vector2"/>
		<meta><m n=":impl"/></meta>
	</rotatedLeft>
	<rotatedRight public="1" get="accessor" set="null" static="1">
		<x path="hxmath.math.Vector2"/>
		<meta><m n=":impl"/></meta>
	</rotatedRight>
	<_new public="1" get="inline" set="null" line="73" static="1">
		<f a="x:y">
			<x path="Float"/>
			<x path="Float"/>
			<x path="hxmath.math.Vector2"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
		<haxe_doc>* Constructor.
     * 
     * @param x
     * @param y</haxe_doc>
	</_new>
	<fromArray public="1" get="inline" set="null" line="84" static="1">
		<f a="rawData">
			<c path="Array"><x path="Float"/></c>
			<x path="hxmath.math.Vector2"/>
		</f>
		<haxe_doc>* Construct a Vector2 from an array.
     * 
     * @param rawData   The input array.
     * @return          The constructed structure.</haxe_doc>
	</fromArray>
	<fromPolar public="1" get="inline" set="null" line="106" static="1">
		<f a="angle:radius">
			<x path="Float"/>
			<x path="Float"/>
			<x path="hxmath.math.Vector2"/>
		</f>
		<haxe_doc><![CDATA[* Create a new Vector2 from polar coordinates.
     * Example angle-to-vector direction conversions:
     *   0       radians -> +X axis
     *   (1/2)pi radians -> +Y axis
     *   pi      radians -> -X axis
     *   (3/2)pi radians -> -Y axis
     * 
     * @param angle     The angle of the vector (counter-clockwise from the +X axis) in radians.
     * @param radius    The length of the vector.
     * @return          The vector.]]></haxe_doc>
	</fromPolar>
	<fromVector2Shape public="1" get="inline" set="null" line="118" static="1">
		<f a="other">
			<t path="hxmath.math.Vector2Shape"/>
			<x path="hxmath.math.Vector2"/>
		</f>
		<meta><m n=":from"/></meta>
		<haxe_doc>* Convert a shape-similar vector.
     * 
     * @param other     The vector to convert.
     * @return          The hxmath equivalent.</haxe_doc>
	</fromVector2Shape>
	<toIntVector2 public="1" get="inline" set="null" line="129" static="1">
		<f a="this:?func" v=":null">
			<t path="hxmath.math.Vector2Type"/>
			<f a="">
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<x path="hxmath.math.IntVector2"/>
		</f>
		<meta>
			<m n=":value"><e>{ func : null }</e></m>
			<m n=":impl"/>
		</meta>
		<haxe_doc>* Convert to an IntVector2 using either truncation (the default) or a specified function.
     * 
     * @param func  The optional scalar conversion function.
     * @return      The equivalent IntVector2 (as determined by the conversion function).</haxe_doc>
	</toIntVector2>
	<dot public="1" get="inline" set="null" line="152" static="1">
		<f a="a:b">
			<x path="hxmath.math.Vector2"/>
			<x path="hxmath.math.Vector2"/>
			<x path="Float"/>
		</f>
		<meta><m n=":op"><e>A * B</e></m></meta>
		<haxe_doc>* Dot product.
     * 
     * @param a
     * @param b
     * @return      sum_i (a_i * b_i)</haxe_doc>
	</dot>
	<multiply public="1" get="inline" set="null" line="168" static="1">
		<f a="a:s">
			<x path="hxmath.math.Vector2"/>
			<x path="Float"/>
			<x path="hxmath.math.Vector2"/>
		</f>
		<meta>
			<m n=":op"><e>A * B</e></m>
			<m n=":commutative"/>
		</meta>
		<haxe_doc>* Multiply a scalar with a vector.
     * 
     * @param a
     * @param s
     * @return      s * a</haxe_doc>
	</multiply>
	<divide public="1" get="inline" set="null" line="182" static="1">
		<f a="a:s">
			<x path="hxmath.math.Vector2"/>
			<x path="Float"/>
			<x path="hxmath.math.Vector2"/>
		</f>
		<meta><m n=":op"><e>A / B</e></m></meta>
		<haxe_doc>* Divide a vector by a scalar.
     * 
     * @param s
     * @param a
     * @return      a / s</haxe_doc>
	</divide>
	<add public="1" get="inline" set="null" line="196" static="1">
		<f a="a:b">
			<x path="hxmath.math.Vector2"/>
			<x path="hxmath.math.Vector2"/>
			<x path="hxmath.math.Vector2"/>
		</f>
		<meta><m n=":op"><e>A + B</e></m></meta>
		<haxe_doc>* Add two vectors.
     * 
     * @param a
     * @param b
     * @return      a + b</haxe_doc>
	</add>
	<subtract public="1" get="inline" set="null" line="210" static="1">
		<f a="a:b">
			<x path="hxmath.math.Vector2"/>
			<x path="hxmath.math.Vector2"/>
			<x path="hxmath.math.Vector2"/>
		</f>
		<meta><m n=":op"><e>A - B</e></m></meta>
		<haxe_doc>* Subtract one vector from another.
     * 
     * @param a
     * @param b
     * @return      a - b</haxe_doc>
	</subtract>
	<negate public="1" get="inline" set="null" line="223" static="1">
		<f a="a">
			<x path="hxmath.math.Vector2"/>
			<x path="hxmath.math.Vector2"/>
		</f>
		<meta><m n=":op"><e>-A</e></m></meta>
		<haxe_doc>* Create a negated copy of a vector.
     * 
     * @param a
     * @return      -a</haxe_doc>
	</negate>
	<equals public="1" get="inline" set="null" line="239" static="1">
		<f a="a:b">
			<x path="hxmath.math.Vector2"/>
			<x path="hxmath.math.Vector2"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e>A == B</e></m></meta>
		<haxe_doc>* Test element-wise equality between two vectors.
     * False if one of the inputs is null and the other is not.
     * 
     * @param a
     * @param b
     * @return     a_i == b_i</haxe_doc>
	</equals>
	<lerp public="1" get="inline" set="null" line="256" static="1">
		<f a="a:b:t">
			<x path="hxmath.math.Vector2"/>
			<x path="hxmath.math.Vector2"/>
			<x path="Float"/>
			<x path="hxmath.math.Vector2"/>
		</f>
		<haxe_doc>* Linear interpolation between two vectors.
     * 
     * @param a     The value at t = 0
     * @param b     The value at t = 1
     * @param t     A number in the range [0, 1]
     * @return      The interpolated value</haxe_doc>
	</lerp>
	<max public="1" get="inline" set="null" line="270" static="1">
		<f a="a:b">
			<x path="hxmath.math.Vector2"/>
			<x path="hxmath.math.Vector2"/>
			<x path="hxmath.math.Vector2"/>
		</f>
		<haxe_doc>* Returns a vector built from the componentwise max of the input vectors.
     * 
     * @param a
     * @param b
     * @return      max(a_i, b_i)</haxe_doc>
	</max>
	<min public="1" get="inline" set="null" line="283" static="1">
		<f a="a:b">
			<x path="hxmath.math.Vector2"/>
			<x path="hxmath.math.Vector2"/>
			<x path="hxmath.math.Vector2"/>
		</f>
		<haxe_doc>* Returns a vector built from the componentwise min of the input vectors.
     * 
     * @param a
     * @param b
     * @return      min(a_i, b_i)</haxe_doc>
	</min>
	<project public="1" get="inline" set="null" line="296" static="1">
		<f a="a:b">
			<x path="hxmath.math.Vector2"/>
			<x path="hxmath.math.Vector2"/>
			<x path="hxmath.math.Vector2"/>
		</f>
		<haxe_doc>* Returns a vector resulting from this vector projected onto the specified vector.
     * 
     * @param a
     * @param b
     * @return      (dot(self, a) / dot(a, a)) * a</haxe_doc>
	</project>
	<reflect public="1" get="inline" set="null" line="309" static="1">
		<f a="v:normal">
			<x path="hxmath.math.Vector2"/>
			<x path="hxmath.math.Vector2"/>
			<x path="hxmath.math.Vector2"/>
		</f>
		<haxe_doc>* Returns a vector resulting from reflecting a vector around the specified normal.
     * 
     * @param a
     * @param b
     * @return       v - 2.0 * proj(v, normal)</haxe_doc>
	</reflect>
	<orthoNormalize public="1" get="inline" set="null" line="321" static="1">
		<f a="u:v">
			<x path="hxmath.math.Vector2"/>
			<x path="hxmath.math.Vector2"/>
			<x path="Void"/>
		</f>
		<haxe_doc>* Ortho-normalize a set of vectors in place using the Gram-Schmidt process.
     * 
     * @param u
     * @param v</haxe_doc>
	</orthoNormalize>
	<set public="1" get="inline" set="null" line="336" static="1">
		<f a="this:x:y">
			<t path="hxmath.math.Vector2Type"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="hxmath.math.Vector2"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>* Sets all the fields of this structure without allocation.
     * 
     * @param x
     * @param y
     * @return self</haxe_doc>
	</set>
	<multiplyWith public="1" get="inline" set="null" line="353" static="1">
		<f a="this:s">
			<t path="hxmath.math.Vector2Type"/>
			<x path="Float"/>
			<x path="hxmath.math.Vector2"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>* Multiply a vector with a scalar in place.
     * Note: *= operator on Haxe abstracts does not behave this way (a new object is returned).
     * 
     * @param a
     * @return      self_i *= s</haxe_doc>
	</multiplyWith>
	<divideWith public="1" get="inline" set="null" line="370" static="1">
		<f a="this:s">
			<t path="hxmath.math.Vector2Type"/>
			<x path="Float"/>
			<x path="hxmath.math.Vector2"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>* Divide a vector by a scalar in place.
     * Note: /= operator on Haxe abstracts does not behave this way (a new object is returned).
     * 
     * @param a
     * @return      self_i /= s</haxe_doc>
	</divideWith>
	<addWith public="1" get="inline" set="null" line="387" static="1">
		<f a="this:a">
			<t path="hxmath.math.Vector2Type"/>
			<x path="hxmath.math.Vector2"/>
			<x path="hxmath.math.Vector2"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>* Add a vector in place.
     * Note: += operator on Haxe abstracts does not behave this way (a new object is returned).
     * 
     * @param a
     * @return      self_i += a_i</haxe_doc>
	</addWith>
	<subtractWith public="1" get="inline" set="null" line="404" static="1">
		<f a="this:a">
			<t path="hxmath.math.Vector2Type"/>
			<x path="hxmath.math.Vector2"/>
			<x path="hxmath.math.Vector2"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>* Subtract a vector in place.
     * Note: -= operator on Haxe abstracts does not behave this way (a new object is returned).
     * 
     * @param a
     * @return      self_i -= a_i</haxe_doc>
	</subtractWith>
	<maxWith public="1" get="inline" set="null" line="421" static="1">
		<f a="this:a">
			<t path="hxmath.math.Vector2Type"/>
			<x path="hxmath.math.Vector2"/>
			<x path="hxmath.math.Vector2"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>* Returns a vector built from the componentwise max of this vector and another.
     * 
     * @param a
     * @param b
     * @return      self_i = max(self_i, a_i)</haxe_doc>
	</maxWith>
	<minWith public="1" get="inline" set="null" line="438" static="1">
		<f a="this:a">
			<t path="hxmath.math.Vector2Type"/>
			<x path="hxmath.math.Vector2"/>
			<x path="hxmath.math.Vector2"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>* Returns a vector built from the componentwise min of this vector and another.
     * 
     * @param a
     * @param b
     * @return      self_i = min(self_i, a_i)</haxe_doc>
	</minWith>
	<projectOnto public="1" get="inline" set="null" line="454" static="1">
		<f a="this:a">
			<t path="hxmath.math.Vector2Type"/>
			<x path="hxmath.math.Vector2"/>
			<x path="hxmath.math.Vector2"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>* Returns a vector resulting from this vector projected onto the specified vector.
     * 
     * @param a
     * @return      self = (dot(self, a) / dot(a, a)) * a</haxe_doc>
	</projectOnto>
	<reflectBy public="1" get="inline" set="null" line="473" static="1">
		<f a="this:normal">
			<t path="hxmath.math.Vector2Type"/>
			<x path="hxmath.math.Vector2"/>
			<x path="hxmath.math.Vector2"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>* Returns a vector resulting from reflecting this vector around the specified normal.
     * 
     * @param normal
     * @return          self = self - 2.0 * proj(self, normal)</haxe_doc>
	</reflectBy>
	<copyTo public="1" get="inline" set="null" line="491" static="1">
		<f a="this:target">
			<t path="hxmath.math.Vector2Type"/>
			<x path="hxmath.math.Vector2"/>
			<x path="Void"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>* Copy the contents of this structure to another.
     * Faster than copyToShape for static platforms (C++, etc) but requires the target to have the exact same inner type.
     * 
     * @param target    The target structure.</haxe_doc>
	</copyTo>
	<copyToShape public="1" get="inline" set="null" line="506" static="1">
		<f a="this:target">
			<t path="hxmath.math.Vector2Type"/>
			<t path="hxmath.math.Vector2Shape"/>
			<x path="Void"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>* Copy the contents of this structure to another (shape-similar) instance.
     * 
     * @param target    The target structure.</haxe_doc>
	</copyToShape>
	<copyFromShape public="1" get="inline" set="null" line="519" static="1">
		<f a="this:source">
			<t path="hxmath.math.Vector2Type"/>
			<t path="hxmath.math.Vector2Shape"/>
			<x path="Void"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>* Copy the contents of another (shape-similar) instance to this structure.
     * 
     * @param source    The source structure.</haxe_doc>
	</copyFromShape>
	<clone public="1" get="inline" set="null" line="532" static="1">
		<f a="this">
			<t path="hxmath.math.Vector2Type"/>
			<x path="hxmath.math.Vector2"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>* Clone.
     * 
     * @return  The cloned object.</haxe_doc>
	</clone>
	<getArrayElement public="1" get="inline" set="null" line="545" static="1">
		<f a="this:i">
			<t path="hxmath.math.Vector2Type"/>
			<x path="Int"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":arrayAccess"/>
		</meta>
		<haxe_doc>* Get an element by position.
     * 
     * @param i         The element index.
     * @return          The element.</haxe_doc>
	</getArrayElement>
	<setArrayElement public="1" get="inline" set="null" line="567" static="1">
		<f a="this:i:value">
			<t path="hxmath.math.Vector2Type"/>
			<x path="Int"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":arrayAccess"/>
		</meta>
		<haxe_doc>* Set an element by position.
     * 
     * @param i         The element index.
     * @param value     The new value.
     * @return          The updated element.</haxe_doc>
	</setArrayElement>
	<applyNegate public="1" get="inline" set="null" line="586" static="1">
		<f a="this">
			<t path="hxmath.math.Vector2Type"/>
			<x path="hxmath.math.Vector2"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>* Negate vector in-place.
     * 
     * @return  The modified object.</haxe_doc>
	</applyNegate>
	<applyScalarFunc public="1" get="inline" set="null" line="602" static="1">
		<f a="this:func">
			<t path="hxmath.math.Vector2Type"/>
			<f a="">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<x path="hxmath.math.Vector2"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>* Apply a scalar function to each element.
     * 
     * @param func  The function to apply.
     * @return      The modified object.</haxe_doc>
	</applyScalarFunc>
	<angleWith public="1" get="inline" set="null" line="620" static="1">
		<f a="this:b">
			<t path="hxmath.math.Vector2Type"/>
			<x path="hxmath.math.Vector2"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>* Find the arccosine of the angle between two vectors.
     * 
     * @param b     The other vector.
     * @return      The arccosine angle between this vector and the other in radians.</haxe_doc>
	</angleWith>
	<signedAngleWith public="1" get="inline" set="null" line="638" static="1">
		<f a="this:b">
			<t path="hxmath.math.Vector2Type"/>
			<x path="hxmath.math.Vector2"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>* Find the signed angle between two vectors.
     * 
     * If the other vector is in the left halfspace of this vector (e.g. the shortest angle to align
     * this vector with the other is ccw) then the result is positive.
     * 
     * If the other vector is in the right halfspace of this vector (e.g. the shortest angle to align
     * this vector with the other is cw) then the result is negative.
     * 
     * @param b     The other vector.
     * @return      The signed angle between this vector and the other in radians.</haxe_doc>
	</signedAngleWith>
	<distanceTo public="1" get="inline" set="null" line="655" static="1">
		<f a="this:b">
			<t path="hxmath.math.Vector2Type"/>
			<x path="hxmath.math.Vector2"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>* Get the distance between this vector and another.
     * 
     * @param b
     * @return      |self - b|</haxe_doc>
	</distanceTo>
	<normalize public="1" get="inline" set="null" line="667" static="1">
		<f a="this">
			<t path="hxmath.math.Vector2Type"/>
			<x path="hxmath.math.Vector2"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>* Normalize this vector.
     * 
     * @return  The modified object.</haxe_doc>
	</normalize>
	<normalizeTo public="1" get="inline" set="null" line="687" static="1">
		<f a="this:newLength">
			<t path="hxmath.math.Vector2Type"/>
			<x path="Float"/>
			<x path="hxmath.math.Vector2"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>* Normalize this vector and scale it to the specified length.
     * 
     * @param newLength     The new length to normalize to.
     * @return              The modified object.</haxe_doc>
	</normalizeTo>
	<clamp public="1" get="inline" set="null" line="704" static="1">
		<f a="this:min:max">
			<t path="hxmath.math.Vector2Type"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="hxmath.math.Vector2"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>* Clamp this vector's length to the specified range.
     * 
     * @param min   The min length.
     * @param max   The max length.
     * @return      The modified object.</haxe_doc>
	</clamp>
	<rotate public="1" get="inline" set="null" line="729" static="1">
		<f a="this:angle:?pivot">
			<t path="hxmath.math.Vector2Type"/>
			<x path="Float"/>
			<x path="hxmath.math.Vector2"/>
			<x path="hxmath.math.Vector2"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>* Rotate this point counter-clockwise around a pivot point.
     * 
     * @param angle     The signed angle in radians.
     * @param pivot     The pivot point to rotate around.
     * @return          The modified object.</haxe_doc>
	</rotate>
	<rotateLeft public="1" get="inline" set="null" line="755" static="1">
		<f a="this">
			<t path="hxmath.math.Vector2Type"/>
			<x path="hxmath.math.Vector2"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>* Rotate this vector by 90 degrees to the left/counterclockwise.
     * 
     * @return  The modified object. (-y, x)</haxe_doc>
	</rotateLeft>
	<rotateRight public="1" get="inline" set="null" line="771" static="1">
		<f a="this">
			<t path="hxmath.math.Vector2Type"/>
			<x path="hxmath.math.Vector2"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>* Rotate this vector by 90 degrees to the right/clockwise.
     * 
     * @return  The modified object. (y, -x)</haxe_doc>
	</rotateRight>
	<get_zero get="inline" set="null" line="782" static="1"><f a=""><x path="hxmath.math.Vector2"/></f></get_zero>
	<get_xAxis get="inline" set="null" line="787" static="1"><f a=""><x path="hxmath.math.Vector2"/></f></get_xAxis>
	<get_yAxis get="inline" set="null" line="792" static="1"><f a=""><x path="hxmath.math.Vector2"/></f></get_yAxis>
	<get_length get="inline" set="null" line="797" static="1">
		<f a="this">
			<t path="hxmath.math.Vector2Type"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_length>
	<get_lengthSq get="inline" set="null" line="805" static="1">
		<f a="this">
			<t path="hxmath.math.Vector2Type"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_lengthSq>
	<get_angle get="inline" set="null" line="813" static="1">
		<f a="this">
			<t path="hxmath.math.Vector2Type"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_angle>
	<get_normal get="inline" set="null" line="819" static="1">
		<f a="this">
			<t path="hxmath.math.Vector2Type"/>
			<x path="hxmath.math.Vector2"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_normal>
	<get_rotatedLeft get="inline" set="null" line="827" static="1">
		<f a="this">
			<t path="hxmath.math.Vector2Type"/>
			<x path="hxmath.math.Vector2"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_rotatedLeft>
	<get_rotatedRight get="inline" set="null" line="834" static="1">
		<f a="this">
			<t path="hxmath.math.Vector2Type"/>
			<x path="hxmath.math.Vector2"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_rotatedRight>
	<set_angle get="inline" set="null" line="841" static="1">
		<f a="this:angle">
			<t path="hxmath.math.Vector2Type"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_angle>
</class></impl>
	</abstract>
	<class path="hxmath.math._Vector2.Vector2_Impl_" params="" file="/home/travis/haxe/lib/hxmath/git/hxmath/math/Vector2.hx" private="1" module="hxmath.math.Vector2">
		<elementCount public="1" get="inline" set="null" expr="2" line="38" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</elementCount>
		<zero public="1" get="accessor" set="null" static="1"><x path="hxmath.math.Vector2"/></zero>
		<xAxis public="1" get="accessor" set="null" static="1"><x path="hxmath.math.Vector2"/></xAxis>
		<yAxis public="1" get="accessor" set="null" static="1"><x path="hxmath.math.Vector2"/></yAxis>
		<length public="1" get="accessor" set="null" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</length>
		<lengthSq public="1" get="accessor" set="null" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</lengthSq>
		<angle public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</angle>
		<normal public="1" get="accessor" set="null" static="1">
			<x path="hxmath.math.Vector2"/>
			<meta><m n=":impl"/></meta>
		</normal>
		<rotatedLeft public="1" get="accessor" set="null" static="1">
			<x path="hxmath.math.Vector2"/>
			<meta><m n=":impl"/></meta>
		</rotatedLeft>
		<rotatedRight public="1" get="accessor" set="null" static="1">
			<x path="hxmath.math.Vector2"/>
			<meta><m n=":impl"/></meta>
		</rotatedRight>
		<_new public="1" get="inline" set="null" line="73" static="1">
			<f a="x:y">
				<x path="Float"/>
				<x path="Float"/>
				<x path="hxmath.math.Vector2"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
			<haxe_doc>* Constructor.
     * 
     * @param x
     * @param y</haxe_doc>
		</_new>
		<fromArray public="1" get="inline" set="null" line="84" static="1">
			<f a="rawData">
				<c path="Array"><x path="Float"/></c>
				<x path="hxmath.math.Vector2"/>
			</f>
			<haxe_doc>* Construct a Vector2 from an array.
     * 
     * @param rawData   The input array.
     * @return          The constructed structure.</haxe_doc>
		</fromArray>
		<fromPolar public="1" get="inline" set="null" line="106" static="1">
			<f a="angle:radius">
				<x path="Float"/>
				<x path="Float"/>
				<x path="hxmath.math.Vector2"/>
			</f>
			<haxe_doc><![CDATA[* Create a new Vector2 from polar coordinates.
     * Example angle-to-vector direction conversions:
     *   0       radians -> +X axis
     *   (1/2)pi radians -> +Y axis
     *   pi      radians -> -X axis
     *   (3/2)pi radians -> -Y axis
     * 
     * @param angle     The angle of the vector (counter-clockwise from the +X axis) in radians.
     * @param radius    The length of the vector.
     * @return          The vector.]]></haxe_doc>
		</fromPolar>
		<fromVector2Shape public="1" get="inline" set="null" line="118" static="1">
			<f a="other">
				<t path="hxmath.math.Vector2Shape"/>
				<x path="hxmath.math.Vector2"/>
			</f>
			<meta><m n=":from"/></meta>
			<haxe_doc>* Convert a shape-similar vector.
     * 
     * @param other     The vector to convert.
     * @return          The hxmath equivalent.</haxe_doc>
		</fromVector2Shape>
		<toIntVector2 public="1" get="inline" set="null" line="129" static="1">
			<f a="this:?func" v=":null">
				<t path="hxmath.math.Vector2Type"/>
				<f a="">
					<x path="Float"/>
					<x path="Int"/>
				</f>
				<x path="hxmath.math.IntVector2"/>
			</f>
			<meta>
				<m n=":value"><e>{ func : null }</e></m>
				<m n=":impl"/>
			</meta>
			<haxe_doc>* Convert to an IntVector2 using either truncation (the default) or a specified function.
     * 
     * @param func  The optional scalar conversion function.
     * @return      The equivalent IntVector2 (as determined by the conversion function).</haxe_doc>
		</toIntVector2>
		<dot public="1" get="inline" set="null" line="152" static="1">
			<f a="a:b">
				<x path="hxmath.math.Vector2"/>
				<x path="hxmath.math.Vector2"/>
				<x path="Float"/>
			</f>
			<meta><m n=":op"><e>A * B</e></m></meta>
			<haxe_doc>* Dot product.
     * 
     * @param a
     * @param b
     * @return      sum_i (a_i * b_i)</haxe_doc>
		</dot>
		<multiply public="1" get="inline" set="null" line="168" static="1">
			<f a="a:s">
				<x path="hxmath.math.Vector2"/>
				<x path="Float"/>
				<x path="hxmath.math.Vector2"/>
			</f>
			<meta>
				<m n=":op"><e>A * B</e></m>
				<m n=":commutative"/>
			</meta>
			<haxe_doc>* Multiply a scalar with a vector.
     * 
     * @param a
     * @param s
     * @return      s * a</haxe_doc>
		</multiply>
		<divide public="1" get="inline" set="null" line="182" static="1">
			<f a="a:s">
				<x path="hxmath.math.Vector2"/>
				<x path="Float"/>
				<x path="hxmath.math.Vector2"/>
			</f>
			<meta><m n=":op"><e>A / B</e></m></meta>
			<haxe_doc>* Divide a vector by a scalar.
     * 
     * @param s
     * @param a
     * @return      a / s</haxe_doc>
		</divide>
		<add public="1" get="inline" set="null" line="196" static="1">
			<f a="a:b">
				<x path="hxmath.math.Vector2"/>
				<x path="hxmath.math.Vector2"/>
				<x path="hxmath.math.Vector2"/>
			</f>
			<meta><m n=":op"><e>A + B</e></m></meta>
			<haxe_doc>* Add two vectors.
     * 
     * @param a
     * @param b
     * @return      a + b</haxe_doc>
		</add>
		<subtract public="1" get="inline" set="null" line="210" static="1">
			<f a="a:b">
				<x path="hxmath.math.Vector2"/>
				<x path="hxmath.math.Vector2"/>
				<x path="hxmath.math.Vector2"/>
			</f>
			<meta><m n=":op"><e>A - B</e></m></meta>
			<haxe_doc>* Subtract one vector from another.
     * 
     * @param a
     * @param b
     * @return      a - b</haxe_doc>
		</subtract>
		<negate public="1" get="inline" set="null" line="223" static="1">
			<f a="a">
				<x path="hxmath.math.Vector2"/>
				<x path="hxmath.math.Vector2"/>
			</f>
			<meta><m n=":op"><e>-A</e></m></meta>
			<haxe_doc>* Create a negated copy of a vector.
     * 
     * @param a
     * @return      -a</haxe_doc>
		</negate>
		<equals public="1" get="inline" set="null" line="239" static="1">
			<f a="a:b">
				<x path="hxmath.math.Vector2"/>
				<x path="hxmath.math.Vector2"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e>A == B</e></m></meta>
			<haxe_doc>* Test element-wise equality between two vectors.
     * False if one of the inputs is null and the other is not.
     * 
     * @param a
     * @param b
     * @return     a_i == b_i</haxe_doc>
		</equals>
		<lerp public="1" get="inline" set="null" line="256" static="1">
			<f a="a:b:t">
				<x path="hxmath.math.Vector2"/>
				<x path="hxmath.math.Vector2"/>
				<x path="Float"/>
				<x path="hxmath.math.Vector2"/>
			</f>
			<haxe_doc>* Linear interpolation between two vectors.
     * 
     * @param a     The value at t = 0
     * @param b     The value at t = 1
     * @param t     A number in the range [0, 1]
     * @return      The interpolated value</haxe_doc>
		</lerp>
		<max public="1" get="inline" set="null" line="270" static="1">
			<f a="a:b">
				<x path="hxmath.math.Vector2"/>
				<x path="hxmath.math.Vector2"/>
				<x path="hxmath.math.Vector2"/>
			</f>
			<haxe_doc>* Returns a vector built from the componentwise max of the input vectors.
     * 
     * @param a
     * @param b
     * @return      max(a_i, b_i)</haxe_doc>
		</max>
		<min public="1" get="inline" set="null" line="283" static="1">
			<f a="a:b">
				<x path="hxmath.math.Vector2"/>
				<x path="hxmath.math.Vector2"/>
				<x path="hxmath.math.Vector2"/>
			</f>
			<haxe_doc>* Returns a vector built from the componentwise min of the input vectors.
     * 
     * @param a
     * @param b
     * @return      min(a_i, b_i)</haxe_doc>
		</min>
		<project public="1" get="inline" set="null" line="296" static="1">
			<f a="a:b">
				<x path="hxmath.math.Vector2"/>
				<x path="hxmath.math.Vector2"/>
				<x path="hxmath.math.Vector2"/>
			</f>
			<haxe_doc>* Returns a vector resulting from this vector projected onto the specified vector.
     * 
     * @param a
     * @param b
     * @return      (dot(self, a) / dot(a, a)) * a</haxe_doc>
		</project>
		<reflect public="1" get="inline" set="null" line="309" static="1">
			<f a="v:normal">
				<x path="hxmath.math.Vector2"/>
				<x path="hxmath.math.Vector2"/>
				<x path="hxmath.math.Vector2"/>
			</f>
			<haxe_doc>* Returns a vector resulting from reflecting a vector around the specified normal.
     * 
     * @param a
     * @param b
     * @return       v - 2.0 * proj(v, normal)</haxe_doc>
		</reflect>
		<orthoNormalize public="1" get="inline" set="null" line="321" static="1">
			<f a="u:v">
				<x path="hxmath.math.Vector2"/>
				<x path="hxmath.math.Vector2"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Ortho-normalize a set of vectors in place using the Gram-Schmidt process.
     * 
     * @param u
     * @param v</haxe_doc>
		</orthoNormalize>
		<set public="1" get="inline" set="null" line="336" static="1">
			<f a="this:x:y">
				<t path="hxmath.math.Vector2Type"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="hxmath.math.Vector2"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>* Sets all the fields of this structure without allocation.
     * 
     * @param x
     * @param y
     * @return self</haxe_doc>
		</set>
		<multiplyWith public="1" get="inline" set="null" line="353" static="1">
			<f a="this:s">
				<t path="hxmath.math.Vector2Type"/>
				<x path="Float"/>
				<x path="hxmath.math.Vector2"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>* Multiply a vector with a scalar in place.
     * Note: *= operator on Haxe abstracts does not behave this way (a new object is returned).
     * 
     * @param a
     * @return      self_i *= s</haxe_doc>
		</multiplyWith>
		<divideWith public="1" get="inline" set="null" line="370" static="1">
			<f a="this:s">
				<t path="hxmath.math.Vector2Type"/>
				<x path="Float"/>
				<x path="hxmath.math.Vector2"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>* Divide a vector by a scalar in place.
     * Note: /= operator on Haxe abstracts does not behave this way (a new object is returned).
     * 
     * @param a
     * @return      self_i /= s</haxe_doc>
		</divideWith>
		<addWith public="1" get="inline" set="null" line="387" static="1">
			<f a="this:a">
				<t path="hxmath.math.Vector2Type"/>
				<x path="hxmath.math.Vector2"/>
				<x path="hxmath.math.Vector2"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>* Add a vector in place.
     * Note: += operator on Haxe abstracts does not behave this way (a new object is returned).
     * 
     * @param a
     * @return      self_i += a_i</haxe_doc>
		</addWith>
		<subtractWith public="1" get="inline" set="null" line="404" static="1">
			<f a="this:a">
				<t path="hxmath.math.Vector2Type"/>
				<x path="hxmath.math.Vector2"/>
				<x path="hxmath.math.Vector2"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>* Subtract a vector in place.
     * Note: -= operator on Haxe abstracts does not behave this way (a new object is returned).
     * 
     * @param a
     * @return      self_i -= a_i</haxe_doc>
		</subtractWith>
		<maxWith public="1" get="inline" set="null" line="421" static="1">
			<f a="this:a">
				<t path="hxmath.math.Vector2Type"/>
				<x path="hxmath.math.Vector2"/>
				<x path="hxmath.math.Vector2"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>* Returns a vector built from the componentwise max of this vector and another.
     * 
     * @param a
     * @param b
     * @return      self_i = max(self_i, a_i)</haxe_doc>
		</maxWith>
		<minWith public="1" get="inline" set="null" line="438" static="1">
			<f a="this:a">
				<t path="hxmath.math.Vector2Type"/>
				<x path="hxmath.math.Vector2"/>
				<x path="hxmath.math.Vector2"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>* Returns a vector built from the componentwise min of this vector and another.
     * 
     * @param a
     * @param b
     * @return      self_i = min(self_i, a_i)</haxe_doc>
		</minWith>
		<projectOnto public="1" get="inline" set="null" line="454" static="1">
			<f a="this:a">
				<t path="hxmath.math.Vector2Type"/>
				<x path="hxmath.math.Vector2"/>
				<x path="hxmath.math.Vector2"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>* Returns a vector resulting from this vector projected onto the specified vector.
     * 
     * @param a
     * @return      self = (dot(self, a) / dot(a, a)) * a</haxe_doc>
		</projectOnto>
		<reflectBy public="1" get="inline" set="null" line="473" static="1">
			<f a="this:normal">
				<t path="hxmath.math.Vector2Type"/>
				<x path="hxmath.math.Vector2"/>
				<x path="hxmath.math.Vector2"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>* Returns a vector resulting from reflecting this vector around the specified normal.
     * 
     * @param normal
     * @return          self = self - 2.0 * proj(self, normal)</haxe_doc>
		</reflectBy>
		<copyTo public="1" get="inline" set="null" line="491" static="1">
			<f a="this:target">
				<t path="hxmath.math.Vector2Type"/>
				<x path="hxmath.math.Vector2"/>
				<x path="Void"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>* Copy the contents of this structure to another.
     * Faster than copyToShape for static platforms (C++, etc) but requires the target to have the exact same inner type.
     * 
     * @param target    The target structure.</haxe_doc>
		</copyTo>
		<copyToShape public="1" get="inline" set="null" line="506" static="1">
			<f a="this:target">
				<t path="hxmath.math.Vector2Type"/>
				<t path="hxmath.math.Vector2Shape"/>
				<x path="Void"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>* Copy the contents of this structure to another (shape-similar) instance.
     * 
     * @param target    The target structure.</haxe_doc>
		</copyToShape>
		<copyFromShape public="1" get="inline" set="null" line="519" static="1">
			<f a="this:source">
				<t path="hxmath.math.Vector2Type"/>
				<t path="hxmath.math.Vector2Shape"/>
				<x path="Void"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>* Copy the contents of another (shape-similar) instance to this structure.
     * 
     * @param source    The source structure.</haxe_doc>
		</copyFromShape>
		<clone public="1" get="inline" set="null" line="532" static="1">
			<f a="this">
				<t path="hxmath.math.Vector2Type"/>
				<x path="hxmath.math.Vector2"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>* Clone.
     * 
     * @return  The cloned object.</haxe_doc>
		</clone>
		<getArrayElement public="1" get="inline" set="null" line="545" static="1">
			<f a="this:i">
				<t path="hxmath.math.Vector2Type"/>
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":arrayAccess"/>
			</meta>
			<haxe_doc>* Get an element by position.
     * 
     * @param i         The element index.
     * @return          The element.</haxe_doc>
		</getArrayElement>
		<setArrayElement public="1" get="inline" set="null" line="567" static="1">
			<f a="this:i:value">
				<t path="hxmath.math.Vector2Type"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":arrayAccess"/>
			</meta>
			<haxe_doc>* Set an element by position.
     * 
     * @param i         The element index.
     * @param value     The new value.
     * @return          The updated element.</haxe_doc>
		</setArrayElement>
		<applyNegate public="1" get="inline" set="null" line="586" static="1">
			<f a="this">
				<t path="hxmath.math.Vector2Type"/>
				<x path="hxmath.math.Vector2"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>* Negate vector in-place.
     * 
     * @return  The modified object.</haxe_doc>
		</applyNegate>
		<applyScalarFunc public="1" get="inline" set="null" line="602" static="1">
			<f a="this:func">
				<t path="hxmath.math.Vector2Type"/>
				<f a="">
					<x path="Float"/>
					<x path="Float"/>
				</f>
				<x path="hxmath.math.Vector2"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>* Apply a scalar function to each element.
     * 
     * @param func  The function to apply.
     * @return      The modified object.</haxe_doc>
		</applyScalarFunc>
		<angleWith public="1" get="inline" set="null" line="620" static="1">
			<f a="this:b">
				<t path="hxmath.math.Vector2Type"/>
				<x path="hxmath.math.Vector2"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>* Find the arccosine of the angle between two vectors.
     * 
     * @param b     The other vector.
     * @return      The arccosine angle between this vector and the other in radians.</haxe_doc>
		</angleWith>
		<signedAngleWith public="1" get="inline" set="null" line="638" static="1">
			<f a="this:b">
				<t path="hxmath.math.Vector2Type"/>
				<x path="hxmath.math.Vector2"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>* Find the signed angle between two vectors.
     * 
     * If the other vector is in the left halfspace of this vector (e.g. the shortest angle to align
     * this vector with the other is ccw) then the result is positive.
     * 
     * If the other vector is in the right halfspace of this vector (e.g. the shortest angle to align
     * this vector with the other is cw) then the result is negative.
     * 
     * @param b     The other vector.
     * @return      The signed angle between this vector and the other in radians.</haxe_doc>
		</signedAngleWith>
		<distanceTo public="1" get="inline" set="null" line="655" static="1">
			<f a="this:b">
				<t path="hxmath.math.Vector2Type"/>
				<x path="hxmath.math.Vector2"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>* Get the distance between this vector and another.
     * 
     * @param b
     * @return      |self - b|</haxe_doc>
		</distanceTo>
		<normalize public="1" get="inline" set="null" line="667" static="1">
			<f a="this">
				<t path="hxmath.math.Vector2Type"/>
				<x path="hxmath.math.Vector2"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>* Normalize this vector.
     * 
     * @return  The modified object.</haxe_doc>
		</normalize>
		<normalizeTo public="1" get="inline" set="null" line="687" static="1">
			<f a="this:newLength">
				<t path="hxmath.math.Vector2Type"/>
				<x path="Float"/>
				<x path="hxmath.math.Vector2"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>* Normalize this vector and scale it to the specified length.
     * 
     * @param newLength     The new length to normalize to.
     * @return              The modified object.</haxe_doc>
		</normalizeTo>
		<clamp public="1" get="inline" set="null" line="704" static="1">
			<f a="this:min:max">
				<t path="hxmath.math.Vector2Type"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="hxmath.math.Vector2"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>* Clamp this vector's length to the specified range.
     * 
     * @param min   The min length.
     * @param max   The max length.
     * @return      The modified object.</haxe_doc>
		</clamp>
		<rotate public="1" get="inline" set="null" line="729" static="1">
			<f a="this:angle:?pivot">
				<t path="hxmath.math.Vector2Type"/>
				<x path="Float"/>
				<x path="hxmath.math.Vector2"/>
				<x path="hxmath.math.Vector2"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>* Rotate this point counter-clockwise around a pivot point.
     * 
     * @param angle     The signed angle in radians.
     * @param pivot     The pivot point to rotate around.
     * @return          The modified object.</haxe_doc>
		</rotate>
		<rotateLeft public="1" get="inline" set="null" line="755" static="1">
			<f a="this">
				<t path="hxmath.math.Vector2Type"/>
				<x path="hxmath.math.Vector2"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>* Rotate this vector by 90 degrees to the left/counterclockwise.
     * 
     * @return  The modified object. (-y, x)</haxe_doc>
		</rotateLeft>
		<rotateRight public="1" get="inline" set="null" line="771" static="1">
			<f a="this">
				<t path="hxmath.math.Vector2Type"/>
				<x path="hxmath.math.Vector2"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>* Rotate this vector by 90 degrees to the right/clockwise.
     * 
     * @return  The modified object. (y, -x)</haxe_doc>
		</rotateRight>
		<get_zero get="inline" set="null" line="782" static="1"><f a=""><x path="hxmath.math.Vector2"/></f></get_zero>
		<get_xAxis get="inline" set="null" line="787" static="1"><f a=""><x path="hxmath.math.Vector2"/></f></get_xAxis>
		<get_yAxis get="inline" set="null" line="792" static="1"><f a=""><x path="hxmath.math.Vector2"/></f></get_yAxis>
		<get_length get="inline" set="null" line="797" static="1">
			<f a="this">
				<t path="hxmath.math.Vector2Type"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_length>
		<get_lengthSq get="inline" set="null" line="805" static="1">
			<f a="this">
				<t path="hxmath.math.Vector2Type"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_lengthSq>
		<get_angle get="inline" set="null" line="813" static="1">
			<f a="this">
				<t path="hxmath.math.Vector2Type"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_angle>
		<get_normal get="inline" set="null" line="819" static="1">
			<f a="this">
				<t path="hxmath.math.Vector2Type"/>
				<x path="hxmath.math.Vector2"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_normal>
		<get_rotatedLeft get="inline" set="null" line="827" static="1">
			<f a="this">
				<t path="hxmath.math.Vector2Type"/>
				<x path="hxmath.math.Vector2"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_rotatedLeft>
		<get_rotatedRight get="inline" set="null" line="834" static="1">
			<f a="this">
				<t path="hxmath.math.Vector2Type"/>
				<x path="hxmath.math.Vector2"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_rotatedRight>
		<set_angle get="inline" set="null" line="841" static="1">
			<f a="this:angle">
				<t path="hxmath.math.Vector2Type"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_angle>
	</class>
	<typedef path="hxmath.math.Vector3Shape" params="" file="/home/travis/haxe/lib/hxmath/git/hxmath/math/Vector3.hx" module="hxmath.math.Vector3"><a>
	<z><x path="Float"/></z>
	<y><x path="Float"/></y>
	<x><x path="Float"/></x>
</a></typedef>
	<class path="hxmath.math.Vector3Default" params="" file="/home/travis/haxe/lib/hxmath/git/hxmath/math/Vector3.hx" module="hxmath.math.Vector3">
		<x public="1"><x path="Float"/></x>
		<y public="1"><x path="Float"/></y>
		<z public="1"><x path="Float"/></z>
		<toString public="1" set="method" line="28"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method" line="21"><f a="x:y:z">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>* The default underlying type.</haxe_doc>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<abstract path="hxmath.math.Vector3" params="" file="/home/travis/haxe/lib/hxmath/git/hxmath/math/Vector3.hx">
		<from>
			<icast><t path="hxmath.math.Vector3Type"/></icast>
			<icast field="fromVector3Shape"><t path="hxmath.math.Vector3Shape"/></icast>
		</from>
		<this><t path="hxmath.math.Vector3Type"/></this>
		<to><icast><t path="hxmath.math.Vector3Type"/></icast></to>
		<haxe_doc>* A 3D vector.</haxe_doc>
		<meta><m n=":forward">
	<e>x</e>
	<e>y</e>
	<e>z</e>
</m></meta>
		<impl><class path="hxmath.math._Vector3.Vector3_Impl_" params="" file="/home/travis/haxe/lib/hxmath/git/hxmath/math/Vector3.hx" private="1" module="hxmath.math.Vector3">
	<elementCount public="1" get="inline" set="null" expr="3" line="41" static="1">
		<x path="Int"/>
		<meta><m n=":value"><e>3</e></m></meta>
	</elementCount>
	<zero public="1" get="accessor" set="null" static="1"><x path="hxmath.math.Vector3"/></zero>
	<xAxis public="1" get="accessor" set="null" static="1"><x path="hxmath.math.Vector3"/></xAxis>
	<yAxis public="1" get="accessor" set="null" static="1"><x path="hxmath.math.Vector3"/></yAxis>
	<zAxis public="1" get="accessor" set="null" static="1"><x path="hxmath.math.Vector3"/></zAxis>
	<length public="1" get="accessor" set="null" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</length>
	<lengthSq public="1" get="accessor" set="null" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</lengthSq>
	<_new public="1" get="inline" set="null" line="68" static="1">
		<f a="x:y:z">
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="hxmath.math.Vector3"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
		<haxe_doc>* Constructor.
     * 
     * @param x
     * @param y
     * @param z</haxe_doc>
	</_new>
	<fromArray public="1" get="inline" set="null" line="79" static="1">
		<f a="rawData">
			<c path="Array"><x path="Float"/></c>
			<x path="hxmath.math.Vector3"/>
		</f>
		<haxe_doc>* Construct a Vector3 from an array.
     * 
     * @param rawData   The input array.
     * @return          The constructed structure.</haxe_doc>
	</fromArray>
	<fromVector3Shape public="1" get="inline" set="null" line="96" static="1">
		<f a="other">
			<t path="hxmath.math.Vector3Shape"/>
			<x path="hxmath.math.Vector3"/>
		</f>
		<meta><m n=":from"/></meta>
		<haxe_doc>* Convert a shape-similar vector.
     * 
     * @param other     The vector to convert.
     * @return          The hxmath equivalent.</haxe_doc>
	</fromVector3Shape>
	<dot public="1" get="inline" set="null" line="109" static="1">
		<f a="a:b">
			<x path="hxmath.math.Vector3"/>
			<x path="hxmath.math.Vector3"/>
			<x path="Float"/>
		</f>
		<meta><m n=":op"><e>A * B</e></m></meta>
		<haxe_doc>* Dot product.
     * 
     * @param a
     * @param b
     * @return      sum_i (a_i * b_i)</haxe_doc>
	</dot>
	<cross public="1" get="inline" set="null" line="125" static="1">
		<f a="a:b">
			<x path="hxmath.math.Vector3"/>
			<x path="hxmath.math.Vector3"/>
			<x path="hxmath.math.Vector3"/>
		</f>
		<meta><m n=":op"><e>A % B</e></m></meta>
		<haxe_doc>* Cross product. The resulting vector is orthogonal to the plane defined by the input vectors.
     * 
     * @param a
     * @param b
     * @return      a X b</haxe_doc>
	</cross>
	<multiply public="1" get="inline" set="null" line="140" static="1">
		<f a="a:s">
			<x path="hxmath.math.Vector3"/>
			<x path="Float"/>
			<x path="hxmath.math.Vector3"/>
		</f>
		<meta>
			<m n=":op"><e>A * B</e></m>
			<m n=":commutative"/>
		</meta>
		<haxe_doc>* Multiply a scalar with a vector.
     * 
     * @param a
     * @param s
     * @return      s * a</haxe_doc>
	</multiply>
	<divide public="1" get="inline" set="null" line="154" static="1">
		<f a="a:s">
			<x path="hxmath.math.Vector3"/>
			<x path="Float"/>
			<x path="hxmath.math.Vector3"/>
		</f>
		<meta><m n=":op"><e>A / B</e></m></meta>
		<haxe_doc>* Divide a vector by a scalar.
     * 
     * @param s
     * @param a
     * @return      a / s</haxe_doc>
	</divide>
	<add public="1" get="inline" set="null" line="168" static="1">
		<f a="a:b">
			<x path="hxmath.math.Vector3"/>
			<x path="hxmath.math.Vector3"/>
			<x path="hxmath.math.Vector3"/>
		</f>
		<meta><m n=":op"><e>A + B</e></m></meta>
		<haxe_doc>* Add two vectors.
     * 
     * @param a
     * @param b
     * @return      a + b</haxe_doc>
	</add>
	<subtract public="1" get="inline" set="null" line="182" static="1">
		<f a="a:b">
			<x path="hxmath.math.Vector3"/>
			<x path="hxmath.math.Vector3"/>
			<x path="hxmath.math.Vector3"/>
		</f>
		<meta><m n=":op"><e>A - B</e></m></meta>
		<haxe_doc>* Subtract one vector from another.
     * 
     * @param a
     * @param b
     * @return      a - b</haxe_doc>
	</subtract>
	<negate public="1" get="inline" set="null" line="195" static="1">
		<f a="a">
			<x path="hxmath.math.Vector3"/>
			<x path="hxmath.math.Vector3"/>
		</f>
		<meta><m n=":op"><e>-A</e></m></meta>
		<haxe_doc>* Create a negated copy of a vector.
     * 
     * @param a
     * @return      -a</haxe_doc>
	</negate>
	<equals public="1" get="inline" set="null" line="212" static="1">
		<f a="a:b">
			<x path="hxmath.math.Vector3"/>
			<x path="hxmath.math.Vector3"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e>A == B</e></m></meta>
		<haxe_doc>* Test element-wise equality between two vectors.
     * False if one of the inputs is null and the other is not.
     * 
     * @param a
     * @param b
     * @return     a_i == b_i</haxe_doc>
	</equals>
	<lerp public="1" get="inline" set="null" line="230" static="1">
		<f a="a:b:t">
			<x path="hxmath.math.Vector3"/>
			<x path="hxmath.math.Vector3"/>
			<x path="Float"/>
			<x path="hxmath.math.Vector3"/>
		</f>
		<haxe_doc>* Linear interpolation between two vectors.
     * 
     * @param a     The value at t = 0
     * @param b     The value at t = 1
     * @param t     A number in the range [0, 1]
     * @return      The interpolated value</haxe_doc>
	</lerp>
	<max public="1" get="inline" set="null" line="245" static="1">
		<f a="a:b">
			<x path="hxmath.math.Vector3"/>
			<x path="hxmath.math.Vector3"/>
			<x path="hxmath.math.Vector3"/>
		</f>
		<haxe_doc>* Returns a vector built from the componentwise max of the input vectors.
     * 
     * @param a
     * @param b
     * @return      max(a_i, b_i)</haxe_doc>
	</max>
	<min public="1" get="inline" set="null" line="258" static="1">
		<f a="a:b">
			<x path="hxmath.math.Vector3"/>
			<x path="hxmath.math.Vector3"/>
			<x path="hxmath.math.Vector3"/>
		</f>
		<haxe_doc>* Returns a vector built from the componentwise min of the input vectors.
     * 
     * @param a
     * @param b
     * @return      min(a_i, b_i)</haxe_doc>
	</min>
	<project public="1" get="inline" set="null" line="271" static="1">
		<f a="a:b">
			<x path="hxmath.math.Vector3"/>
			<x path="hxmath.math.Vector3"/>
			<x path="hxmath.math.Vector3"/>
		</f>
		<haxe_doc>* Returns a vector resulting from a vector projected onto the specified vector.
     * 
     * @param a
     * @param b
     * @return      (dot(self, a) / dot(a, a)) * a</haxe_doc>
	</project>
	<reflect public="1" get="inline" set="null" line="284" static="1">
		<f a="v:normal">
			<x path="hxmath.math.Vector3"/>
			<x path="hxmath.math.Vector3"/>
			<x path="hxmath.math.Vector3"/>
		</f>
		<haxe_doc>* Returns a vector resulting from reflecting a vector around the specified normal.
     * 
     * @param a
     * @param b
     * @return       v - 2.0 * proj(v, normal)</haxe_doc>
	</reflect>
	<orthoNormalize public="1" get="inline" set="null" line="297" static="1">
		<f a="u:v:w">
			<x path="hxmath.math.Vector3"/>
			<x path="hxmath.math.Vector3"/>
			<x path="hxmath.math.Vector3"/>
			<x path="Void"/>
		</f>
		<haxe_doc>* Ortho-normalize a set of vectors in place using the Gram-Schmidt process.
     * 
     * @param u
     * @param v
     * @param w</haxe_doc>
	</orthoNormalize>
	<set public="1" get="inline" set="null" line="317" static="1">
		<f a="this:x:y:z">
			<t path="hxmath.math.Vector3Type"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="hxmath.math.Vector3"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>* Sets all the fields of this structure without allocation.
     * 
     * @param x
     * @param y
     * @param z
     * @return self</haxe_doc>
	</set>
	<crossWith public="1" get="inline" set="null" line="335" static="1">
		<f a="this:a">
			<t path="hxmath.math.Vector3Type"/>
			<x path="hxmath.math.Vector3"/>
			<x path="hxmath.math.Vector3"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>* Cross product in place. The resulting vector (this) is orthogonal to the plane defined by the input vectors.
     * Note: %= operator on Haxe abstracts does not behave this way (a new object is returned).
     * 
     * @param a
     * @return      self = self X a</haxe_doc>
	</crossWith>
	<multiplyWith public="1" get="inline" set="null" line="357" static="1">
		<f a="this:s">
			<t path="hxmath.math.Vector3Type"/>
			<x path="Float"/>
			<x path="hxmath.math.Vector3"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>* Multiply a vector with a scalar in place.
     * Note: *= operator on Haxe abstracts does not behave this way (a new object is returned).
     * 
     * @param a
     * @return      self_i *= s</haxe_doc>
	</multiplyWith>
	<divideWith public="1" get="inline" set="null" line="375" static="1">
		<f a="this:s">
			<t path="hxmath.math.Vector3Type"/>
			<x path="Float"/>
			<x path="hxmath.math.Vector3"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>* Divide a vector by a scalar in place.
     * Note: /= operator on Haxe abstracts does not behave this way (a new object is returned).
     * 
     * @param a
     * @return      self_i /= s</haxe_doc>
	</divideWith>
	<addWith public="1" get="inline" set="null" line="393" static="1">
		<f a="this:a">
			<t path="hxmath.math.Vector3Type"/>
			<x path="hxmath.math.Vector3"/>
			<x path="hxmath.math.Vector3"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>* Add a vector in place.
     * Note: += operator on Haxe abstracts does not behave this way (a new object is returned).
     * 
     * @param a
     * @return      self_i += a_i</haxe_doc>
	</addWith>
	<subtractWith public="1" get="inline" set="null" line="411" static="1">
		<f a="this:a">
			<t path="hxmath.math.Vector3Type"/>
			<x path="hxmath.math.Vector3"/>
			<x path="hxmath.math.Vector3"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>* Subtract a vector in place.
     * Note: -= operator on Haxe abstracts does not behave this way (a new object is returned).
     * 
     * @param a
     * @return      self_i -= a_i</haxe_doc>
	</subtractWith>
	<maxWith public="1" get="inline" set="null" line="429" static="1">
		<f a="this:a">
			<t path="hxmath.math.Vector3Type"/>
			<x path="hxmath.math.Vector3"/>
			<x path="hxmath.math.Vector3"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>* Returns a vector built from the componentwise max of this vector and another.
     * 
     * @param a
     * @param b
     * @return      self_i = max(self_i, a_i)</haxe_doc>
	</maxWith>
	<minWith public="1" get="inline" set="null" line="447" static="1">
		<f a="this:a">
			<t path="hxmath.math.Vector3Type"/>
			<x path="hxmath.math.Vector3"/>
			<x path="hxmath.math.Vector3"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>* Returns a vector built from the componentwise min of this vector and another.
     * 
     * @param a
     * @param b
     * @return      self_i = min(self_i, a_i)</haxe_doc>
	</minWith>
	<projectOnto public="1" get="inline" set="null" line="464" static="1">
		<f a="this:a">
			<t path="hxmath.math.Vector3Type"/>
			<x path="hxmath.math.Vector3"/>
			<x path="hxmath.math.Vector3"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>* Returns a vector resulting from this vector projected onto the specified vector.
     * 
     * @param a
     * @return      self = (dot(self, a) / dot(a, a)) * a</haxe_doc>
	</projectOnto>
	<projectOntoPlane public="1" get="inline" set="null" line="483" static="1">
		<f a="this:normal">
			<t path="hxmath.math.Vector3Type"/>
			<x path="hxmath.math.Vector3"/>
			<x path="hxmath.math.Vector3"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>* Returns this vector projected into the plane defined by the specified normal.
     * 
     * @param normal    The normal to the plane.
     * @return          self = self - proj(self, normal)</haxe_doc>
	</projectOntoPlane>
	<reflectBy public="1" get="inline" set="null" line="498" static="1">
		<f a="this:normal">
			<t path="hxmath.math.Vector3Type"/>
			<x path="hxmath.math.Vector3"/>
			<x path="hxmath.math.Vector3"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>* Returns a vector resulting from reflecting this vector around the specified normal.
     * 
     * @param normal
     * @return          self = self - 2.0 * proj(self, normal)</haxe_doc>
	</reflectBy>
	<copyTo public="1" get="inline" set="null" line="516" static="1">
		<f a="this:target">
			<t path="hxmath.math.Vector3Type"/>
			<x path="hxmath.math.Vector3"/>
			<x path="Void"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>* Copy the contents of this structure to another.
     * Faster than copyToShape for static platforms (C++, etc) but requires the target to have the exact same inner type.
     * 
     * @param target    The target structure.</haxe_doc>
	</copyTo>
	<copyToShape public="1" get="inline" set="null" line="531" static="1">
		<f a="this:target">
			<t path="hxmath.math.Vector3Type"/>
			<t path="hxmath.math.Vector3Shape"/>
			<x path="Void"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>* Copy the contents of this structure to another (shape-similar) instance.
     * 
     * @param target    The target structure.</haxe_doc>
	</copyToShape>
	<copyFromShape public="1" get="inline" set="null" line="545" static="1">
		<f a="this:source">
			<t path="hxmath.math.Vector3Type"/>
			<t path="hxmath.math.Vector3Shape"/>
			<x path="Void"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>* Copy the contents of another (shape-similar) instance to this structure.
     * 
     * @param source    The source structure.</haxe_doc>
	</copyFromShape>
	<clone public="1" get="inline" set="null" line="559" static="1">
		<f a="this">
			<t path="hxmath.math.Vector3Type"/>
			<x path="hxmath.math.Vector3"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>* Clone.
     * 
     * @return  The cloned object.</haxe_doc>
	</clone>
	<getArrayElement public="1" get="inline" set="null" line="572" static="1">
		<f a="this:i">
			<t path="hxmath.math.Vector3Type"/>
			<x path="Int"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":arrayAccess"/>
		</meta>
		<haxe_doc>* Get an element by position.
     * 
     * @param i         The element index.
     * @return          The element.</haxe_doc>
	</getArrayElement>
	<setArrayElement public="1" get="inline" set="null" line="596" static="1">
		<f a="this:i:value">
			<t path="hxmath.math.Vector3Type"/>
			<x path="Int"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":arrayAccess"/>
		</meta>
		<haxe_doc>* Set an element by position.
     * 
     * @param i         The element index.
     * @param value     The new value.
     * @return          The updated element.</haxe_doc>
	</setArrayElement>
	<applyNegate public="1" get="inline" set="null" line="617" static="1">
		<f a="this">
			<t path="hxmath.math.Vector3Type"/>
			<x path="hxmath.math.Vector3"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>* Negate vector in-place.
     * 
     * @return  This.</haxe_doc>
	</applyNegate>
	<applyScalarFunc public="1" get="inline" set="null" line="634" static="1">
		<f a="this:func">
			<t path="hxmath.math.Vector3Type"/>
			<f a="">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<x path="hxmath.math.Vector3"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>* Apply a scalar function to each element.
     * 
     * @param func  The function to apply.
     * @return      The modified object.</haxe_doc>
	</applyScalarFunc>
	<angleWith public="1" get="inline" set="null" line="652" static="1">
		<f a="this:b">
			<t path="hxmath.math.Vector3Type"/>
			<x path="hxmath.math.Vector3"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>* Find the arccosine of the angle between two vectors.
     * 
     * @param b     The other vector.
     * @return      The arccosine angle between this vector and the other in radians.</haxe_doc>
	</angleWith>
	<distanceTo public="1" get="inline" set="null" line="664" static="1">
		<f a="this:b">
			<t path="hxmath.math.Vector3Type"/>
			<x path="hxmath.math.Vector3"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>* Get the distance between this vector and another.
     * 
     * @param b
     * @return      |self - b|</haxe_doc>
	</distanceTo>
	<normalize public="1" get="inline" set="null" line="676" static="1">
		<f a="this">
			<t path="hxmath.math.Vector3Type"/>
			<x path="hxmath.math.Vector3"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>* Normalize this vector.
     * 
     * @return  The modified object.</haxe_doc>
	</normalize>
	<normalizeTo public="1" get="inline" set="null" line="696" static="1">
		<f a="this:newLength">
			<t path="hxmath.math.Vector3Type"/>
			<x path="Float"/>
			<x path="hxmath.math.Vector3"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>* Normalize this vector and scale it to the specified length.
     * 
     * @param newLength     The new length to normalize to.
     * @return              The modified object.</haxe_doc>
	</normalizeTo>
	<clamp public="1" get="inline" set="null" line="713" static="1">
		<f a="this:min:max">
			<t path="hxmath.math.Vector3Type"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="hxmath.math.Vector3"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>* Clamp this vector's length to the specified range.
     * 
     * @param min   The min length.
     * @param max   The max length.
     * @return      The modified object.</haxe_doc>
	</clamp>
	<get_length get="inline" set="null" line="731" static="1">
		<f a="this">
			<t path="hxmath.math.Vector3Type"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_length>
	<get_lengthSq get="inline" set="null" line="737" static="1">
		<f a="this">
			<t path="hxmath.math.Vector3Type"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_lengthSq>
	<get_zero get="inline" set="null" line="743" static="1"><f a=""><x path="hxmath.math.Vector3"/></f></get_zero>
	<get_xAxis get="inline" set="null" line="748" static="1"><f a=""><x path="hxmath.math.Vector3"/></f></get_xAxis>
	<get_yAxis get="inline" set="null" line="753" static="1"><f a=""><x path="hxmath.math.Vector3"/></f></get_yAxis>
	<get_zAxis get="inline" set="null" line="758" static="1"><f a=""><x path="hxmath.math.Vector3"/></f></get_zAxis>
</class></impl>
	</abstract>
	<class path="hxmath.math._Vector3.Vector3_Impl_" params="" file="/home/travis/haxe/lib/hxmath/git/hxmath/math/Vector3.hx" private="1" module="hxmath.math.Vector3">
		<elementCount public="1" get="inline" set="null" expr="3" line="41" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3</e></m></meta>
		</elementCount>
		<zero public="1" get="accessor" set="null" static="1"><x path="hxmath.math.Vector3"/></zero>
		<xAxis public="1" get="accessor" set="null" static="1"><x path="hxmath.math.Vector3"/></xAxis>
		<yAxis public="1" get="accessor" set="null" static="1"><x path="hxmath.math.Vector3"/></yAxis>
		<zAxis public="1" get="accessor" set="null" static="1"><x path="hxmath.math.Vector3"/></zAxis>
		<length public="1" get="accessor" set="null" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</length>
		<lengthSq public="1" get="accessor" set="null" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</lengthSq>
		<_new public="1" get="inline" set="null" line="68" static="1">
			<f a="x:y:z">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="hxmath.math.Vector3"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
			<haxe_doc>* Constructor.
     * 
     * @param x
     * @param y
     * @param z</haxe_doc>
		</_new>
		<fromArray public="1" get="inline" set="null" line="79" static="1">
			<f a="rawData">
				<c path="Array"><x path="Float"/></c>
				<x path="hxmath.math.Vector3"/>
			</f>
			<haxe_doc>* Construct a Vector3 from an array.
     * 
     * @param rawData   The input array.
     * @return          The constructed structure.</haxe_doc>
		</fromArray>
		<fromVector3Shape public="1" get="inline" set="null" line="96" static="1">
			<f a="other">
				<t path="hxmath.math.Vector3Shape"/>
				<x path="hxmath.math.Vector3"/>
			</f>
			<meta><m n=":from"/></meta>
			<haxe_doc>* Convert a shape-similar vector.
     * 
     * @param other     The vector to convert.
     * @return          The hxmath equivalent.</haxe_doc>
		</fromVector3Shape>
		<dot public="1" get="inline" set="null" line="109" static="1">
			<f a="a:b">
				<x path="hxmath.math.Vector3"/>
				<x path="hxmath.math.Vector3"/>
				<x path="Float"/>
			</f>
			<meta><m n=":op"><e>A * B</e></m></meta>
			<haxe_doc>* Dot product.
     * 
     * @param a
     * @param b
     * @return      sum_i (a_i * b_i)</haxe_doc>
		</dot>
		<cross public="1" get="inline" set="null" line="125" static="1">
			<f a="a:b">
				<x path="hxmath.math.Vector3"/>
				<x path="hxmath.math.Vector3"/>
				<x path="hxmath.math.Vector3"/>
			</f>
			<meta><m n=":op"><e>A % B</e></m></meta>
			<haxe_doc>* Cross product. The resulting vector is orthogonal to the plane defined by the input vectors.
     * 
     * @param a
     * @param b
     * @return      a X b</haxe_doc>
		</cross>
		<multiply public="1" get="inline" set="null" line="140" static="1">
			<f a="a:s">
				<x path="hxmath.math.Vector3"/>
				<x path="Float"/>
				<x path="hxmath.math.Vector3"/>
			</f>
			<meta>
				<m n=":op"><e>A * B</e></m>
				<m n=":commutative"/>
			</meta>
			<haxe_doc>* Multiply a scalar with a vector.
     * 
     * @param a
     * @param s
     * @return      s * a</haxe_doc>
		</multiply>
		<divide public="1" get="inline" set="null" line="154" static="1">
			<f a="a:s">
				<x path="hxmath.math.Vector3"/>
				<x path="Float"/>
				<x path="hxmath.math.Vector3"/>
			</f>
			<meta><m n=":op"><e>A / B</e></m></meta>
			<haxe_doc>* Divide a vector by a scalar.
     * 
     * @param s
     * @param a
     * @return      a / s</haxe_doc>
		</divide>
		<add public="1" get="inline" set="null" line="168" static="1">
			<f a="a:b">
				<x path="hxmath.math.Vector3"/>
				<x path="hxmath.math.Vector3"/>
				<x path="hxmath.math.Vector3"/>
			</f>
			<meta><m n=":op"><e>A + B</e></m></meta>
			<haxe_doc>* Add two vectors.
     * 
     * @param a
     * @param b
     * @return      a + b</haxe_doc>
		</add>
		<subtract public="1" get="inline" set="null" line="182" static="1">
			<f a="a:b">
				<x path="hxmath.math.Vector3"/>
				<x path="hxmath.math.Vector3"/>
				<x path="hxmath.math.Vector3"/>
			</f>
			<meta><m n=":op"><e>A - B</e></m></meta>
			<haxe_doc>* Subtract one vector from another.
     * 
     * @param a
     * @param b
     * @return      a - b</haxe_doc>
		</subtract>
		<negate public="1" get="inline" set="null" line="195" static="1">
			<f a="a">
				<x path="hxmath.math.Vector3"/>
				<x path="hxmath.math.Vector3"/>
			</f>
			<meta><m n=":op"><e>-A</e></m></meta>
			<haxe_doc>* Create a negated copy of a vector.
     * 
     * @param a
     * @return      -a</haxe_doc>
		</negate>
		<equals public="1" get="inline" set="null" line="212" static="1">
			<f a="a:b">
				<x path="hxmath.math.Vector3"/>
				<x path="hxmath.math.Vector3"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e>A == B</e></m></meta>
			<haxe_doc>* Test element-wise equality between two vectors.
     * False if one of the inputs is null and the other is not.
     * 
     * @param a
     * @param b
     * @return     a_i == b_i</haxe_doc>
		</equals>
		<lerp public="1" get="inline" set="null" line="230" static="1">
			<f a="a:b:t">
				<x path="hxmath.math.Vector3"/>
				<x path="hxmath.math.Vector3"/>
				<x path="Float"/>
				<x path="hxmath.math.Vector3"/>
			</f>
			<haxe_doc>* Linear interpolation between two vectors.
     * 
     * @param a     The value at t = 0
     * @param b     The value at t = 1
     * @param t     A number in the range [0, 1]
     * @return      The interpolated value</haxe_doc>
		</lerp>
		<max public="1" get="inline" set="null" line="245" static="1">
			<f a="a:b">
				<x path="hxmath.math.Vector3"/>
				<x path="hxmath.math.Vector3"/>
				<x path="hxmath.math.Vector3"/>
			</f>
			<haxe_doc>* Returns a vector built from the componentwise max of the input vectors.
     * 
     * @param a
     * @param b
     * @return      max(a_i, b_i)</haxe_doc>
		</max>
		<min public="1" get="inline" set="null" line="258" static="1">
			<f a="a:b">
				<x path="hxmath.math.Vector3"/>
				<x path="hxmath.math.Vector3"/>
				<x path="hxmath.math.Vector3"/>
			</f>
			<haxe_doc>* Returns a vector built from the componentwise min of the input vectors.
     * 
     * @param a
     * @param b
     * @return      min(a_i, b_i)</haxe_doc>
		</min>
		<project public="1" get="inline" set="null" line="271" static="1">
			<f a="a:b">
				<x path="hxmath.math.Vector3"/>
				<x path="hxmath.math.Vector3"/>
				<x path="hxmath.math.Vector3"/>
			</f>
			<haxe_doc>* Returns a vector resulting from a vector projected onto the specified vector.
     * 
     * @param a
     * @param b
     * @return      (dot(self, a) / dot(a, a)) * a</haxe_doc>
		</project>
		<reflect public="1" get="inline" set="null" line="284" static="1">
			<f a="v:normal">
				<x path="hxmath.math.Vector3"/>
				<x path="hxmath.math.Vector3"/>
				<x path="hxmath.math.Vector3"/>
			</f>
			<haxe_doc>* Returns a vector resulting from reflecting a vector around the specified normal.
     * 
     * @param a
     * @param b
     * @return       v - 2.0 * proj(v, normal)</haxe_doc>
		</reflect>
		<orthoNormalize public="1" get="inline" set="null" line="297" static="1">
			<f a="u:v:w">
				<x path="hxmath.math.Vector3"/>
				<x path="hxmath.math.Vector3"/>
				<x path="hxmath.math.Vector3"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Ortho-normalize a set of vectors in place using the Gram-Schmidt process.
     * 
     * @param u
     * @param v
     * @param w</haxe_doc>
		</orthoNormalize>
		<set public="1" get="inline" set="null" line="317" static="1">
			<f a="this:x:y:z">
				<t path="hxmath.math.Vector3Type"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="hxmath.math.Vector3"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>* Sets all the fields of this structure without allocation.
     * 
     * @param x
     * @param y
     * @param z
     * @return self</haxe_doc>
		</set>
		<crossWith public="1" get="inline" set="null" line="335" static="1">
			<f a="this:a">
				<t path="hxmath.math.Vector3Type"/>
				<x path="hxmath.math.Vector3"/>
				<x path="hxmath.math.Vector3"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>* Cross product in place. The resulting vector (this) is orthogonal to the plane defined by the input vectors.
     * Note: %= operator on Haxe abstracts does not behave this way (a new object is returned).
     * 
     * @param a
     * @return      self = self X a</haxe_doc>
		</crossWith>
		<multiplyWith public="1" get="inline" set="null" line="357" static="1">
			<f a="this:s">
				<t path="hxmath.math.Vector3Type"/>
				<x path="Float"/>
				<x path="hxmath.math.Vector3"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>* Multiply a vector with a scalar in place.
     * Note: *= operator on Haxe abstracts does not behave this way (a new object is returned).
     * 
     * @param a
     * @return      self_i *= s</haxe_doc>
		</multiplyWith>
		<divideWith public="1" get="inline" set="null" line="375" static="1">
			<f a="this:s">
				<t path="hxmath.math.Vector3Type"/>
				<x path="Float"/>
				<x path="hxmath.math.Vector3"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>* Divide a vector by a scalar in place.
     * Note: /= operator on Haxe abstracts does not behave this way (a new object is returned).
     * 
     * @param a
     * @return      self_i /= s</haxe_doc>
		</divideWith>
		<addWith public="1" get="inline" set="null" line="393" static="1">
			<f a="this:a">
				<t path="hxmath.math.Vector3Type"/>
				<x path="hxmath.math.Vector3"/>
				<x path="hxmath.math.Vector3"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>* Add a vector in place.
     * Note: += operator on Haxe abstracts does not behave this way (a new object is returned).
     * 
     * @param a
     * @return      self_i += a_i</haxe_doc>
		</addWith>
		<subtractWith public="1" get="inline" set="null" line="411" static="1">
			<f a="this:a">
				<t path="hxmath.math.Vector3Type"/>
				<x path="hxmath.math.Vector3"/>
				<x path="hxmath.math.Vector3"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>* Subtract a vector in place.
     * Note: -= operator on Haxe abstracts does not behave this way (a new object is returned).
     * 
     * @param a
     * @return      self_i -= a_i</haxe_doc>
		</subtractWith>
		<maxWith public="1" get="inline" set="null" line="429" static="1">
			<f a="this:a">
				<t path="hxmath.math.Vector3Type"/>
				<x path="hxmath.math.Vector3"/>
				<x path="hxmath.math.Vector3"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>* Returns a vector built from the componentwise max of this vector and another.
     * 
     * @param a
     * @param b
     * @return      self_i = max(self_i, a_i)</haxe_doc>
		</maxWith>
		<minWith public="1" get="inline" set="null" line="447" static="1">
			<f a="this:a">
				<t path="hxmath.math.Vector3Type"/>
				<x path="hxmath.math.Vector3"/>
				<x path="hxmath.math.Vector3"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>* Returns a vector built from the componentwise min of this vector and another.
     * 
     * @param a
     * @param b
     * @return      self_i = min(self_i, a_i)</haxe_doc>
		</minWith>
		<projectOnto public="1" get="inline" set="null" line="464" static="1">
			<f a="this:a">
				<t path="hxmath.math.Vector3Type"/>
				<x path="hxmath.math.Vector3"/>
				<x path="hxmath.math.Vector3"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>* Returns a vector resulting from this vector projected onto the specified vector.
     * 
     * @param a
     * @return      self = (dot(self, a) / dot(a, a)) * a</haxe_doc>
		</projectOnto>
		<projectOntoPlane public="1" get="inline" set="null" line="483" static="1">
			<f a="this:normal">
				<t path="hxmath.math.Vector3Type"/>
				<x path="hxmath.math.Vector3"/>
				<x path="hxmath.math.Vector3"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>* Returns this vector projected into the plane defined by the specified normal.
     * 
     * @param normal    The normal to the plane.
     * @return          self = self - proj(self, normal)</haxe_doc>
		</projectOntoPlane>
		<reflectBy public="1" get="inline" set="null" line="498" static="1">
			<f a="this:normal">
				<t path="hxmath.math.Vector3Type"/>
				<x path="hxmath.math.Vector3"/>
				<x path="hxmath.math.Vector3"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>* Returns a vector resulting from reflecting this vector around the specified normal.
     * 
     * @param normal
     * @return          self = self - 2.0 * proj(self, normal)</haxe_doc>
		</reflectBy>
		<copyTo public="1" get="inline" set="null" line="516" static="1">
			<f a="this:target">
				<t path="hxmath.math.Vector3Type"/>
				<x path="hxmath.math.Vector3"/>
				<x path="Void"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>* Copy the contents of this structure to another.
     * Faster than copyToShape for static platforms (C++, etc) but requires the target to have the exact same inner type.
     * 
     * @param target    The target structure.</haxe_doc>
		</copyTo>
		<copyToShape public="1" get="inline" set="null" line="531" static="1">
			<f a="this:target">
				<t path="hxmath.math.Vector3Type"/>
				<t path="hxmath.math.Vector3Shape"/>
				<x path="Void"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>* Copy the contents of this structure to another (shape-similar) instance.
     * 
     * @param target    The target structure.</haxe_doc>
		</copyToShape>
		<copyFromShape public="1" get="inline" set="null" line="545" static="1">
			<f a="this:source">
				<t path="hxmath.math.Vector3Type"/>
				<t path="hxmath.math.Vector3Shape"/>
				<x path="Void"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>* Copy the contents of another (shape-similar) instance to this structure.
     * 
     * @param source    The source structure.</haxe_doc>
		</copyFromShape>
		<clone public="1" get="inline" set="null" line="559" static="1">
			<f a="this">
				<t path="hxmath.math.Vector3Type"/>
				<x path="hxmath.math.Vector3"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>* Clone.
     * 
     * @return  The cloned object.</haxe_doc>
		</clone>
		<getArrayElement public="1" get="inline" set="null" line="572" static="1">
			<f a="this:i">
				<t path="hxmath.math.Vector3Type"/>
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":arrayAccess"/>
			</meta>
			<haxe_doc>* Get an element by position.
     * 
     * @param i         The element index.
     * @return          The element.</haxe_doc>
		</getArrayElement>
		<setArrayElement public="1" get="inline" set="null" line="596" static="1">
			<f a="this:i:value">
				<t path="hxmath.math.Vector3Type"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":arrayAccess"/>
			</meta>
			<haxe_doc>* Set an element by position.
     * 
     * @param i         The element index.
     * @param value     The new value.
     * @return          The updated element.</haxe_doc>
		</setArrayElement>
		<applyNegate public="1" get="inline" set="null" line="617" static="1">
			<f a="this">
				<t path="hxmath.math.Vector3Type"/>
				<x path="hxmath.math.Vector3"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>* Negate vector in-place.
     * 
     * @return  This.</haxe_doc>
		</applyNegate>
		<applyScalarFunc public="1" get="inline" set="null" line="634" static="1">
			<f a="this:func">
				<t path="hxmath.math.Vector3Type"/>
				<f a="">
					<x path="Float"/>
					<x path="Float"/>
				</f>
				<x path="hxmath.math.Vector3"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>* Apply a scalar function to each element.
     * 
     * @param func  The function to apply.
     * @return      The modified object.</haxe_doc>
		</applyScalarFunc>
		<angleWith public="1" get="inline" set="null" line="652" static="1">
			<f a="this:b">
				<t path="hxmath.math.Vector3Type"/>
				<x path="hxmath.math.Vector3"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>* Find the arccosine of the angle between two vectors.
     * 
     * @param b     The other vector.
     * @return      The arccosine angle between this vector and the other in radians.</haxe_doc>
		</angleWith>
		<distanceTo public="1" get="inline" set="null" line="664" static="1">
			<f a="this:b">
				<t path="hxmath.math.Vector3Type"/>
				<x path="hxmath.math.Vector3"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>* Get the distance between this vector and another.
     * 
     * @param b
     * @return      |self - b|</haxe_doc>
		</distanceTo>
		<normalize public="1" get="inline" set="null" line="676" static="1">
			<f a="this">
				<t path="hxmath.math.Vector3Type"/>
				<x path="hxmath.math.Vector3"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>* Normalize this vector.
     * 
     * @return  The modified object.</haxe_doc>
		</normalize>
		<normalizeTo public="1" get="inline" set="null" line="696" static="1">
			<f a="this:newLength">
				<t path="hxmath.math.Vector3Type"/>
				<x path="Float"/>
				<x path="hxmath.math.Vector3"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>* Normalize this vector and scale it to the specified length.
     * 
     * @param newLength     The new length to normalize to.
     * @return              The modified object.</haxe_doc>
		</normalizeTo>
		<clamp public="1" get="inline" set="null" line="713" static="1">
			<f a="this:min:max">
				<t path="hxmath.math.Vector3Type"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="hxmath.math.Vector3"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>* Clamp this vector's length to the specified range.
     * 
     * @param min   The min length.
     * @param max   The max length.
     * @return      The modified object.</haxe_doc>
		</clamp>
		<get_length get="inline" set="null" line="731" static="1">
			<f a="this">
				<t path="hxmath.math.Vector3Type"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_length>
		<get_lengthSq get="inline" set="null" line="737" static="1">
			<f a="this">
				<t path="hxmath.math.Vector3Type"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_lengthSq>
		<get_zero get="inline" set="null" line="743" static="1"><f a=""><x path="hxmath.math.Vector3"/></f></get_zero>
		<get_xAxis get="inline" set="null" line="748" static="1"><f a=""><x path="hxmath.math.Vector3"/></f></get_xAxis>
		<get_yAxis get="inline" set="null" line="753" static="1"><f a=""><x path="hxmath.math.Vector3"/></f></get_yAxis>
		<get_zAxis get="inline" set="null" line="758" static="1"><f a=""><x path="hxmath.math.Vector3"/></f></get_zAxis>
	</class>
	<typedef path="hxmath.math.Vector4Shape" params="" file="/home/travis/haxe/lib/hxmath/git/hxmath/math/Vector4.hx" module="hxmath.math.Vector4"><a>
	<z><x path="Float"/></z>
	<y><x path="Float"/></y>
	<x><x path="Float"/></x>
	<w><x path="Float"/></w>
</a></typedef>
	<class path="hxmath.math.Vector4Default" params="" file="/home/travis/haxe/lib/hxmath/git/hxmath/math/Vector4.hx" module="hxmath.math.Vector4">
		<x public="1"><x path="Float"/></x>
		<y public="1"><x path="Float"/></y>
		<z public="1"><x path="Float"/></z>
		<w public="1"><x path="Float"/></w>
		<toString public="1" set="method" line="31"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method" line="23"><f a="x:y:z:w">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>* The default underlying type.</haxe_doc>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<abstract path="hxmath.math.Vector4" params="" file="/home/travis/haxe/lib/hxmath/git/hxmath/math/Vector4.hx">
		<from>
			<icast><t path="hxmath.math.Vector4Type"/></icast>
			<icast field="fromVector4Shape"><t path="hxmath.math.Vector4Shape"/></icast>
		</from>
		<this><t path="hxmath.math.Vector4Type"/></this>
		<to><icast><t path="hxmath.math.Vector4Type"/></icast></to>
		<haxe_doc>* A 4D vector (used with homogenous/projection matrices in 3D).</haxe_doc>
		<meta><m n=":forward">
	<e>x</e>
	<e>y</e>
	<e>z</e>
	<e>w</e>
</m></meta>
		<impl><class path="hxmath.math._Vector4.Vector4_Impl_" params="" file="/home/travis/haxe/lib/hxmath/git/hxmath/math/Vector4.hx" private="1" module="hxmath.math.Vector4">
	<elementCount public="1" get="inline" set="null" expr="4" line="44" static="1">
		<x path="Int"/>
		<meta><m n=":value"><e>4</e></m></meta>
	</elementCount>
	<zero public="1" get="accessor" set="null" static="1"><x path="hxmath.math.Vector4"/></zero>
	<xAxis public="1" get="accessor" set="null" static="1"><x path="hxmath.math.Vector4"/></xAxis>
	<yAxis public="1" get="accessor" set="null" static="1"><x path="hxmath.math.Vector4"/></yAxis>
	<zAxis public="1" get="accessor" set="null" static="1"><x path="hxmath.math.Vector4"/></zAxis>
	<wAxis public="1" get="accessor" set="null" static="1"><x path="hxmath.math.Vector4"/></wAxis>
	<length public="1" get="accessor" set="null" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</length>
	<lengthSq public="1" get="accessor" set="null" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</lengthSq>
	<_new public="1" get="inline" set="null" line="75" static="1">
		<f a="x:y:z:w">
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="hxmath.math.Vector4"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
		<haxe_doc>* Constructor.
     * 
     * @param x
     * @param y
     * @param z
     * @param w</haxe_doc>
	</_new>
	<fromArray public="1" get="inline" set="null" line="86" static="1">
		<f a="rawData">
			<c path="Array"><x path="Float"/></c>
			<x path="hxmath.math.Vector4"/>
		</f>
		<haxe_doc>* Construct a Vector4 from an array.
     * 
     * @param rawData   The input array.
     * @return          The constructed structure.</haxe_doc>
	</fromArray>
	<fromVector4Shape public="1" get="inline" set="null" line="103" static="1">
		<f a="other">
			<t path="hxmath.math.Vector4Shape"/>
			<x path="hxmath.math.Vector4"/>
		</f>
		<meta><m n=":from"/></meta>
		<haxe_doc>* Convert a shape-similar vector.
     * 
     * @param other     The vector to convert.    
     * @return          The hxmath equivalent.</haxe_doc>
	</fromVector4Shape>
	<dot public="1" get="inline" set="null" line="116" static="1">
		<f a="a:b">
			<x path="hxmath.math.Vector4"/>
			<x path="hxmath.math.Vector4"/>
			<x path="Float"/>
		</f>
		<meta><m n=":op"><e>A * B</e></m></meta>
		<haxe_doc>* Dot product.
     * 
     * @param a
     * @param b
     * @return      sum_i (a_i * b_i)</haxe_doc>
	</dot>
	<multiply public="1" get="inline" set="null" line="134" static="1">
		<f a="a:s">
			<x path="hxmath.math.Vector4"/>
			<x path="Float"/>
			<x path="hxmath.math.Vector4"/>
		</f>
		<meta>
			<m n=":op"><e>A * B</e></m>
			<m n=":commutative"/>
		</meta>
		<haxe_doc>* Multiply a scalar with a vector.
     * 
     * @param a
     * @param s
     * @return      s * a</haxe_doc>
	</multiply>
	<divide public="1" get="inline" set="null" line="148" static="1">
		<f a="a:s">
			<x path="hxmath.math.Vector4"/>
			<x path="Float"/>
			<x path="hxmath.math.Vector4"/>
		</f>
		<meta><m n=":op"><e>A / B</e></m></meta>
		<haxe_doc>* Divide a vector by a scalar.
     * 
     * @param s
     * @param a
     * @return      a / s</haxe_doc>
	</divide>
	<add public="1" get="inline" set="null" line="162" static="1">
		<f a="a:b">
			<x path="hxmath.math.Vector4"/>
			<x path="hxmath.math.Vector4"/>
			<x path="hxmath.math.Vector4"/>
		</f>
		<meta><m n=":op"><e>A + B</e></m></meta>
		<haxe_doc>* Add two vectors.
     * 
     * @param a
     * @param b
     * @return      a + b</haxe_doc>
	</add>
	<subtract public="1" get="inline" set="null" line="176" static="1">
		<f a="a:b">
			<x path="hxmath.math.Vector4"/>
			<x path="hxmath.math.Vector4"/>
			<x path="hxmath.math.Vector4"/>
		</f>
		<meta><m n=":op"><e>A - B</e></m></meta>
		<haxe_doc>* Subtract one vector from another.
     * 
     * @param a
     * @param b
     * @return      a - b</haxe_doc>
	</subtract>
	<negate public="1" get="inline" set="null" line="189" static="1">
		<f a="a">
			<x path="hxmath.math.Vector4"/>
			<x path="hxmath.math.Vector4"/>
		</f>
		<meta><m n=":op"><e>-A</e></m></meta>
		<haxe_doc>* Create a negated copy of a vector.
     * 
     * @param a
     * @return      -a</haxe_doc>
	</negate>
	<equals public="1" get="inline" set="null" line="207" static="1">
		<f a="a:b">
			<x path="hxmath.math.Vector4"/>
			<x path="hxmath.math.Vector4"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e>A == B</e></m></meta>
		<haxe_doc>* Test element-wise equality between two vectors.
     * False if one of the inputs is null and the other is not.
     * 
     * @param a
     * @param b
     * @return     a_i == b_i</haxe_doc>
	</equals>
	<lerp public="1" get="inline" set="null" line="226" static="1">
		<f a="a:b:t">
			<x path="hxmath.math.Vector4"/>
			<x path="hxmath.math.Vector4"/>
			<x path="Float"/>
			<x path="hxmath.math.Vector4"/>
		</f>
		<haxe_doc>* Linear interpolation between two vectors.
     * 
     * @param a     The value at t = 0
     * @param b     The value at t = 1
     * @param t     A number in the range [0, 1]
     * @return      The interpolated value</haxe_doc>
	</lerp>
	<max public="1" get="inline" set="null" line="242" static="1">
		<f a="a:b">
			<x path="hxmath.math.Vector4"/>
			<x path="hxmath.math.Vector4"/>
			<x path="hxmath.math.Vector4"/>
		</f>
		<haxe_doc>* Returns a vector built from the componentwise max of the input vectors.
     * 
     * @param a
     * @param b
     * @return      max(a_i, b_i)</haxe_doc>
	</max>
	<min public="1" get="inline" set="null" line="255" static="1">
		<f a="a:b">
			<x path="hxmath.math.Vector4"/>
			<x path="hxmath.math.Vector4"/>
			<x path="hxmath.math.Vector4"/>
		</f>
		<haxe_doc>* Returns a vector built from the componentwise min of the input vectors.
     * 
     * @param a
     * @param b
     * @return      min(a_i, b_i)</haxe_doc>
	</min>
	<project public="1" get="inline" set="null" line="268" static="1">
		<f a="a:b">
			<x path="hxmath.math.Vector4"/>
			<x path="hxmath.math.Vector4"/>
			<x path="hxmath.math.Vector4"/>
		</f>
		<haxe_doc>* Returns a vector resulting from this vector projected onto the specified vector.
     * 
     * @param a
     * @param b
     * @return      (dot(self, a) / dot(a, a)) * a</haxe_doc>
	</project>
	<set public="1" get="inline" set="null" line="283" static="1">
		<f a="this:x:y:z:w">
			<t path="hxmath.math.Vector4Type"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="hxmath.math.Vector4"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>* Sets all the fields of this structure without allocation.
     * 
     * @param x
     * @param y
     * @param z
     * @param w
     * @return self</haxe_doc>
	</set>
	<multiplyWith public="1" get="inline" set="null" line="302" static="1">
		<f a="this:s">
			<t path="hxmath.math.Vector4Type"/>
			<x path="Float"/>
			<x path="hxmath.math.Vector4"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>* Multiply a vector with a scalar in place.
     * Note: *= operator on Haxe abstracts does not behave this way (a new object is returned).
     * 
     * @param a
     * @return      self_i *= s</haxe_doc>
	</multiplyWith>
	<divideWith public="1" get="inline" set="null" line="321" static="1">
		<f a="this:s">
			<t path="hxmath.math.Vector4Type"/>
			<x path="Float"/>
			<x path="hxmath.math.Vector4"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>* Divide a vector by a scalar in place.
     * Note: /= operator on Haxe abstracts does not behave this way (a new object is returned).
     * 
     * @param a
     * @return      self_i /= s</haxe_doc>
	</divideWith>
	<addWith public="1" get="inline" set="null" line="340" static="1">
		<f a="this:a">
			<t path="hxmath.math.Vector4Type"/>
			<x path="hxmath.math.Vector4"/>
			<x path="hxmath.math.Vector4"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>* Add a vector in place.
     * Note: += operator on Haxe abstracts does not behave this way (a new object is returned).
     * 
     * @param a
     * @return      self_i += a_i</haxe_doc>
	</addWith>
	<subtractWith public="1" get="inline" set="null" line="359" static="1">
		<f a="this:a">
			<t path="hxmath.math.Vector4Type"/>
			<x path="hxmath.math.Vector4"/>
			<x path="hxmath.math.Vector4"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>* Subtract a vector in place.
     * Note: -= operator on Haxe abstracts does not behave this way (a new object is returned).
     * 
     * @param a
     * @return      self_i -= a_i</haxe_doc>
	</subtractWith>
	<maxWith public="1" get="inline" set="null" line="378" static="1">
		<f a="this:a">
			<t path="hxmath.math.Vector4Type"/>
			<x path="hxmath.math.Vector4"/>
			<x path="hxmath.math.Vector4"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>* Returns a vector built from the componentwise max of this vector and another.
     * 
     * @param a
     * @param b
     * @return      self_i = max(self_i, a_i)</haxe_doc>
	</maxWith>
	<minWith public="1" get="inline" set="null" line="397" static="1">
		<f a="this:a">
			<t path="hxmath.math.Vector4Type"/>
			<x path="hxmath.math.Vector4"/>
			<x path="hxmath.math.Vector4"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>* Returns a vector built from the componentwise min of this vector and another.
     * 
     * @param a
     * @param b
     * @return      self_i = min(self_i, a_i)</haxe_doc>
	</minWith>
	<projectOnto public="1" get="inline" set="null" line="415" static="1">
		<f a="this:a">
			<t path="hxmath.math.Vector4Type"/>
			<x path="hxmath.math.Vector4"/>
			<x path="hxmath.math.Vector4"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>* Returns a vector resulting from this vector projected onto the specified vector.
     * 
     * @param a
     * @return      self = (dot(self, a) / dot(a, a)) * a</haxe_doc>
	</projectOnto>
	<copyTo public="1" get="inline" set="null" line="434" static="1">
		<f a="this:target">
			<t path="hxmath.math.Vector4Type"/>
			<x path="hxmath.math.Vector4"/>
			<x path="Void"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>* Copy the contents of this structure to another.
     * Faster than copyToShape for static platforms (C++, etc) but requires the target to have the exact same inner type.
     * 
     * @param target    The target structure.</haxe_doc>
	</copyTo>
	<copyToShape public="1" get="inline" set="null" line="449" static="1">
		<f a="this:target">
			<t path="hxmath.math.Vector4Type"/>
			<t path="hxmath.math.Vector4Shape"/>
			<x path="Void"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>* Copy the contents of this structure to another (shape-similar) instance.
     * 
     * @param target    The target structure.</haxe_doc>
	</copyToShape>
	<copyFromShape public="1" get="inline" set="null" line="464" static="1">
		<f a="this:source">
			<t path="hxmath.math.Vector4Type"/>
			<t path="hxmath.math.Vector4Shape"/>
			<x path="Void"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>* Copy the contents of another (shape-similar) instance to this structure.
     * 
     * @param source    The source structure.</haxe_doc>
	</copyFromShape>
	<clone public="1" get="inline" set="null" line="479" static="1">
		<f a="this">
			<t path="hxmath.math.Vector4Type"/>
			<x path="hxmath.math.Vector4"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>* Clone.
     * 
     * @return  The cloned object.</haxe_doc>
	</clone>
	<getArrayElement public="1" get="inline" set="null" line="492" static="1">
		<f a="this:i">
			<t path="hxmath.math.Vector4Type"/>
			<x path="Int"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":arrayAccess"/>
		</meta>
		<haxe_doc>* Get an element by position.
     * 
     * @param i         The element index.
     * @return          The element.</haxe_doc>
	</getArrayElement>
	<setArrayElement public="1" get="inline" set="null" line="518" static="1">
		<f a="this:i:value">
			<t path="hxmath.math.Vector4Type"/>
			<x path="Int"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":arrayAccess"/>
		</meta>
		<haxe_doc>* Set an element by position.
     * 
     * @param i         The element index.
     * @param value     The new value.
     * @return          The updated element.</haxe_doc>
	</setArrayElement>
	<applyScalarFunc public="1" get="inline" set="null" line="542" static="1">
		<f a="this:func">
			<t path="hxmath.math.Vector4Type"/>
			<f a="">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<x path="hxmath.math.Vector4"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>* Apply a scalar function to each element.
     * 
     * @param func  The function to apply.
     * @return      The modified object.</haxe_doc>
	</applyScalarFunc>
	<distanceTo public="1" get="inline" set="null" line="560" static="1">
		<f a="this:b">
			<t path="hxmath.math.Vector4Type"/>
			<x path="hxmath.math.Vector4"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>* Get the distance between this vector and another.
     * 
     * @param b
     * @return      |self - b|</haxe_doc>
	</distanceTo>
	<normalize public="1" get="inline" set="null" line="572" static="1">
		<f a="this">
			<t path="hxmath.math.Vector4Type"/>
			<x path="hxmath.math.Vector4"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>* Normalize this vector.
     * 
     * @return  The modified object.</haxe_doc>
	</normalize>
	<normalizeTo public="1" get="inline" set="null" line="592" static="1">
		<f a="this:newLength">
			<t path="hxmath.math.Vector4Type"/>
			<x path="Float"/>
			<x path="hxmath.math.Vector4"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>* Normalize this vector and scale it to the specified length.
     * 
     * @param newLength     The new length to normalize to.
     * @return              The modified object.</haxe_doc>
	</normalizeTo>
	<clamp public="1" get="inline" set="null" line="609" static="1">
		<f a="this:min:max">
			<t path="hxmath.math.Vector4Type"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="hxmath.math.Vector4"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>* Clamp this vector's length to the specified range.
     * 
     * @param min   The min length.
     * @param max   The max length.
     * @return      The modified object.</haxe_doc>
	</clamp>
	<get_length get="inline" set="null" line="627" static="1">
		<f a="this">
			<t path="hxmath.math.Vector4Type"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_length>
	<get_lengthSq get="inline" set="null" line="637" static="1">
		<f a="this">
			<t path="hxmath.math.Vector4Type"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_lengthSq>
	<get_zero get="inline" set="null" line="647" static="1"><f a=""><x path="hxmath.math.Vector4"/></f></get_zero>
	<get_xAxis get="inline" set="null" line="652" static="1"><f a=""><x path="hxmath.math.Vector4"/></f></get_xAxis>
	<get_yAxis get="inline" set="null" line="657" static="1"><f a=""><x path="hxmath.math.Vector4"/></f></get_yAxis>
	<get_zAxis get="inline" set="null" line="662" static="1"><f a=""><x path="hxmath.math.Vector4"/></f></get_zAxis>
	<get_wAxis get="inline" set="null" line="667" static="1"><f a=""><x path="hxmath.math.Vector4"/></f></get_wAxis>
</class></impl>
	</abstract>
	<class path="hxmath.math._Vector4.Vector4_Impl_" params="" file="/home/travis/haxe/lib/hxmath/git/hxmath/math/Vector4.hx" private="1" module="hxmath.math.Vector4">
		<elementCount public="1" get="inline" set="null" expr="4" line="44" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>4</e></m></meta>
		</elementCount>
		<zero public="1" get="accessor" set="null" static="1"><x path="hxmath.math.Vector4"/></zero>
		<xAxis public="1" get="accessor" set="null" static="1"><x path="hxmath.math.Vector4"/></xAxis>
		<yAxis public="1" get="accessor" set="null" static="1"><x path="hxmath.math.Vector4"/></yAxis>
		<zAxis public="1" get="accessor" set="null" static="1"><x path="hxmath.math.Vector4"/></zAxis>
		<wAxis public="1" get="accessor" set="null" static="1"><x path="hxmath.math.Vector4"/></wAxis>
		<length public="1" get="accessor" set="null" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</length>
		<lengthSq public="1" get="accessor" set="null" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</lengthSq>
		<_new public="1" get="inline" set="null" line="75" static="1">
			<f a="x:y:z:w">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="hxmath.math.Vector4"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
			<haxe_doc>* Constructor.
     * 
     * @param x
     * @param y
     * @param z
     * @param w</haxe_doc>
		</_new>
		<fromArray public="1" get="inline" set="null" line="86" static="1">
			<f a="rawData">
				<c path="Array"><x path="Float"/></c>
				<x path="hxmath.math.Vector4"/>
			</f>
			<haxe_doc>* Construct a Vector4 from an array.
     * 
     * @param rawData   The input array.
     * @return          The constructed structure.</haxe_doc>
		</fromArray>
		<fromVector4Shape public="1" get="inline" set="null" line="103" static="1">
			<f a="other">
				<t path="hxmath.math.Vector4Shape"/>
				<x path="hxmath.math.Vector4"/>
			</f>
			<meta><m n=":from"/></meta>
			<haxe_doc>* Convert a shape-similar vector.
     * 
     * @param other     The vector to convert.    
     * @return          The hxmath equivalent.</haxe_doc>
		</fromVector4Shape>
		<dot public="1" get="inline" set="null" line="116" static="1">
			<f a="a:b">
				<x path="hxmath.math.Vector4"/>
				<x path="hxmath.math.Vector4"/>
				<x path="Float"/>
			</f>
			<meta><m n=":op"><e>A * B</e></m></meta>
			<haxe_doc>* Dot product.
     * 
     * @param a
     * @param b
     * @return      sum_i (a_i * b_i)</haxe_doc>
		</dot>
		<multiply public="1" get="inline" set="null" line="134" static="1">
			<f a="a:s">
				<x path="hxmath.math.Vector4"/>
				<x path="Float"/>
				<x path="hxmath.math.Vector4"/>
			</f>
			<meta>
				<m n=":op"><e>A * B</e></m>
				<m n=":commutative"/>
			</meta>
			<haxe_doc>* Multiply a scalar with a vector.
     * 
     * @param a
     * @param s
     * @return      s * a</haxe_doc>
		</multiply>
		<divide public="1" get="inline" set="null" line="148" static="1">
			<f a="a:s">
				<x path="hxmath.math.Vector4"/>
				<x path="Float"/>
				<x path="hxmath.math.Vector4"/>
			</f>
			<meta><m n=":op"><e>A / B</e></m></meta>
			<haxe_doc>* Divide a vector by a scalar.
     * 
     * @param s
     * @param a
     * @return      a / s</haxe_doc>
		</divide>
		<add public="1" get="inline" set="null" line="162" static="1">
			<f a="a:b">
				<x path="hxmath.math.Vector4"/>
				<x path="hxmath.math.Vector4"/>
				<x path="hxmath.math.Vector4"/>
			</f>
			<meta><m n=":op"><e>A + B</e></m></meta>
			<haxe_doc>* Add two vectors.
     * 
     * @param a
     * @param b
     * @return      a + b</haxe_doc>
		</add>
		<subtract public="1" get="inline" set="null" line="176" static="1">
			<f a="a:b">
				<x path="hxmath.math.Vector4"/>
				<x path="hxmath.math.Vector4"/>
				<x path="hxmath.math.Vector4"/>
			</f>
			<meta><m n=":op"><e>A - B</e></m></meta>
			<haxe_doc>* Subtract one vector from another.
     * 
     * @param a
     * @param b
     * @return      a - b</haxe_doc>
		</subtract>
		<negate public="1" get="inline" set="null" line="189" static="1">
			<f a="a">
				<x path="hxmath.math.Vector4"/>
				<x path="hxmath.math.Vector4"/>
			</f>
			<meta><m n=":op"><e>-A</e></m></meta>
			<haxe_doc>* Create a negated copy of a vector.
     * 
     * @param a
     * @return      -a</haxe_doc>
		</negate>
		<equals public="1" get="inline" set="null" line="207" static="1">
			<f a="a:b">
				<x path="hxmath.math.Vector4"/>
				<x path="hxmath.math.Vector4"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e>A == B</e></m></meta>
			<haxe_doc>* Test element-wise equality between two vectors.
     * False if one of the inputs is null and the other is not.
     * 
     * @param a
     * @param b
     * @return     a_i == b_i</haxe_doc>
		</equals>
		<lerp public="1" get="inline" set="null" line="226" static="1">
			<f a="a:b:t">
				<x path="hxmath.math.Vector4"/>
				<x path="hxmath.math.Vector4"/>
				<x path="Float"/>
				<x path="hxmath.math.Vector4"/>
			</f>
			<haxe_doc>* Linear interpolation between two vectors.
     * 
     * @param a     The value at t = 0
     * @param b     The value at t = 1
     * @param t     A number in the range [0, 1]
     * @return      The interpolated value</haxe_doc>
		</lerp>
		<max public="1" get="inline" set="null" line="242" static="1">
			<f a="a:b">
				<x path="hxmath.math.Vector4"/>
				<x path="hxmath.math.Vector4"/>
				<x path="hxmath.math.Vector4"/>
			</f>
			<haxe_doc>* Returns a vector built from the componentwise max of the input vectors.
     * 
     * @param a
     * @param b
     * @return      max(a_i, b_i)</haxe_doc>
		</max>
		<min public="1" get="inline" set="null" line="255" static="1">
			<f a="a:b">
				<x path="hxmath.math.Vector4"/>
				<x path="hxmath.math.Vector4"/>
				<x path="hxmath.math.Vector4"/>
			</f>
			<haxe_doc>* Returns a vector built from the componentwise min of the input vectors.
     * 
     * @param a
     * @param b
     * @return      min(a_i, b_i)</haxe_doc>
		</min>
		<project public="1" get="inline" set="null" line="268" static="1">
			<f a="a:b">
				<x path="hxmath.math.Vector4"/>
				<x path="hxmath.math.Vector4"/>
				<x path="hxmath.math.Vector4"/>
			</f>
			<haxe_doc>* Returns a vector resulting from this vector projected onto the specified vector.
     * 
     * @param a
     * @param b
     * @return      (dot(self, a) / dot(a, a)) * a</haxe_doc>
		</project>
		<set public="1" get="inline" set="null" line="283" static="1">
			<f a="this:x:y:z:w">
				<t path="hxmath.math.Vector4Type"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="hxmath.math.Vector4"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>* Sets all the fields of this structure without allocation.
     * 
     * @param x
     * @param y
     * @param z
     * @param w
     * @return self</haxe_doc>
		</set>
		<multiplyWith public="1" get="inline" set="null" line="302" static="1">
			<f a="this:s">
				<t path="hxmath.math.Vector4Type"/>
				<x path="Float"/>
				<x path="hxmath.math.Vector4"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>* Multiply a vector with a scalar in place.
     * Note: *= operator on Haxe abstracts does not behave this way (a new object is returned).
     * 
     * @param a
     * @return      self_i *= s</haxe_doc>
		</multiplyWith>
		<divideWith public="1" get="inline" set="null" line="321" static="1">
			<f a="this:s">
				<t path="hxmath.math.Vector4Type"/>
				<x path="Float"/>
				<x path="hxmath.math.Vector4"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>* Divide a vector by a scalar in place.
     * Note: /= operator on Haxe abstracts does not behave this way (a new object is returned).
     * 
     * @param a
     * @return      self_i /= s</haxe_doc>
		</divideWith>
		<addWith public="1" get="inline" set="null" line="340" static="1">
			<f a="this:a">
				<t path="hxmath.math.Vector4Type"/>
				<x path="hxmath.math.Vector4"/>
				<x path="hxmath.math.Vector4"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>* Add a vector in place.
     * Note: += operator on Haxe abstracts does not behave this way (a new object is returned).
     * 
     * @param a
     * @return      self_i += a_i</haxe_doc>
		</addWith>
		<subtractWith public="1" get="inline" set="null" line="359" static="1">
			<f a="this:a">
				<t path="hxmath.math.Vector4Type"/>
				<x path="hxmath.math.Vector4"/>
				<x path="hxmath.math.Vector4"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>* Subtract a vector in place.
     * Note: -= operator on Haxe abstracts does not behave this way (a new object is returned).
     * 
     * @param a
     * @return      self_i -= a_i</haxe_doc>
		</subtractWith>
		<maxWith public="1" get="inline" set="null" line="378" static="1">
			<f a="this:a">
				<t path="hxmath.math.Vector4Type"/>
				<x path="hxmath.math.Vector4"/>
				<x path="hxmath.math.Vector4"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>* Returns a vector built from the componentwise max of this vector and another.
     * 
     * @param a
     * @param b
     * @return      self_i = max(self_i, a_i)</haxe_doc>
		</maxWith>
		<minWith public="1" get="inline" set="null" line="397" static="1">
			<f a="this:a">
				<t path="hxmath.math.Vector4Type"/>
				<x path="hxmath.math.Vector4"/>
				<x path="hxmath.math.Vector4"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>* Returns a vector built from the componentwise min of this vector and another.
     * 
     * @param a
     * @param b
     * @return      self_i = min(self_i, a_i)</haxe_doc>
		</minWith>
		<projectOnto public="1" get="inline" set="null" line="415" static="1">
			<f a="this:a">
				<t path="hxmath.math.Vector4Type"/>
				<x path="hxmath.math.Vector4"/>
				<x path="hxmath.math.Vector4"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>* Returns a vector resulting from this vector projected onto the specified vector.
     * 
     * @param a
     * @return      self = (dot(self, a) / dot(a, a)) * a</haxe_doc>
		</projectOnto>
		<copyTo public="1" get="inline" set="null" line="434" static="1">
			<f a="this:target">
				<t path="hxmath.math.Vector4Type"/>
				<x path="hxmath.math.Vector4"/>
				<x path="Void"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>* Copy the contents of this structure to another.
     * Faster than copyToShape for static platforms (C++, etc) but requires the target to have the exact same inner type.
     * 
     * @param target    The target structure.</haxe_doc>
		</copyTo>
		<copyToShape public="1" get="inline" set="null" line="449" static="1">
			<f a="this:target">
				<t path="hxmath.math.Vector4Type"/>
				<t path="hxmath.math.Vector4Shape"/>
				<x path="Void"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>* Copy the contents of this structure to another (shape-similar) instance.
     * 
     * @param target    The target structure.</haxe_doc>
		</copyToShape>
		<copyFromShape public="1" get="inline" set="null" line="464" static="1">
			<f a="this:source">
				<t path="hxmath.math.Vector4Type"/>
				<t path="hxmath.math.Vector4Shape"/>
				<x path="Void"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>* Copy the contents of another (shape-similar) instance to this structure.
     * 
     * @param source    The source structure.</haxe_doc>
		</copyFromShape>
		<clone public="1" get="inline" set="null" line="479" static="1">
			<f a="this">
				<t path="hxmath.math.Vector4Type"/>
				<x path="hxmath.math.Vector4"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>* Clone.
     * 
     * @return  The cloned object.</haxe_doc>
		</clone>
		<getArrayElement public="1" get="inline" set="null" line="492" static="1">
			<f a="this:i">
				<t path="hxmath.math.Vector4Type"/>
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":arrayAccess"/>
			</meta>
			<haxe_doc>* Get an element by position.
     * 
     * @param i         The element index.
     * @return          The element.</haxe_doc>
		</getArrayElement>
		<setArrayElement public="1" get="inline" set="null" line="518" static="1">
			<f a="this:i:value">
				<t path="hxmath.math.Vector4Type"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":arrayAccess"/>
			</meta>
			<haxe_doc>* Set an element by position.
     * 
     * @param i         The element index.
     * @param value     The new value.
     * @return          The updated element.</haxe_doc>
		</setArrayElement>
		<applyScalarFunc public="1" get="inline" set="null" line="542" static="1">
			<f a="this:func">
				<t path="hxmath.math.Vector4Type"/>
				<f a="">
					<x path="Float"/>
					<x path="Float"/>
				</f>
				<x path="hxmath.math.Vector4"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>* Apply a scalar function to each element.
     * 
     * @param func  The function to apply.
     * @return      The modified object.</haxe_doc>
		</applyScalarFunc>
		<distanceTo public="1" get="inline" set="null" line="560" static="1">
			<f a="this:b">
				<t path="hxmath.math.Vector4Type"/>
				<x path="hxmath.math.Vector4"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>* Get the distance between this vector and another.
     * 
     * @param b
     * @return      |self - b|</haxe_doc>
		</distanceTo>
		<normalize public="1" get="inline" set="null" line="572" static="1">
			<f a="this">
				<t path="hxmath.math.Vector4Type"/>
				<x path="hxmath.math.Vector4"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>* Normalize this vector.
     * 
     * @return  The modified object.</haxe_doc>
		</normalize>
		<normalizeTo public="1" get="inline" set="null" line="592" static="1">
			<f a="this:newLength">
				<t path="hxmath.math.Vector4Type"/>
				<x path="Float"/>
				<x path="hxmath.math.Vector4"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>* Normalize this vector and scale it to the specified length.
     * 
     * @param newLength     The new length to normalize to.
     * @return              The modified object.</haxe_doc>
		</normalizeTo>
		<clamp public="1" get="inline" set="null" line="609" static="1">
			<f a="this:min:max">
				<t path="hxmath.math.Vector4Type"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="hxmath.math.Vector4"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>* Clamp this vector's length to the specified range.
     * 
     * @param min   The min length.
     * @param max   The max length.
     * @return      The modified object.</haxe_doc>
		</clamp>
		<get_length get="inline" set="null" line="627" static="1">
			<f a="this">
				<t path="hxmath.math.Vector4Type"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_length>
		<get_lengthSq get="inline" set="null" line="637" static="1">
			<f a="this">
				<t path="hxmath.math.Vector4Type"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_lengthSq>
		<get_zero get="inline" set="null" line="647" static="1"><f a=""><x path="hxmath.math.Vector4"/></f></get_zero>
		<get_xAxis get="inline" set="null" line="652" static="1"><f a=""><x path="hxmath.math.Vector4"/></f></get_xAxis>
		<get_yAxis get="inline" set="null" line="657" static="1"><f a=""><x path="hxmath.math.Vector4"/></f></get_yAxis>
		<get_zAxis get="inline" set="null" line="662" static="1"><f a=""><x path="hxmath.math.Vector4"/></f></get_zAxis>
		<get_wAxis get="inline" set="null" line="667" static="1"><f a=""><x path="hxmath.math.Vector4"/></f></get_wAxis>
	</class>
	<class path="js.lib.Error" params="" file="/home/travis/haxe/std/js/lib/Error.hx" extern="1">
		<message public="1"><c path="String"/></message>
		<name public="1"><c path="String"/></name>
		<stack public="1" set="null"><c path="String"/></stack>
		<new public="1" set="method"><f a="?message">
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":native"><e>"Error"</e></m>
		</meta>
	</class>
	<class path="js.lib.Object" params="" file="/home/travis/haxe/std/js/lib/Object.hx" extern="1">
		<assign public="1" params="T" set="method" static="1">
			<f a="target:sources">
				<c path="assign.T"/>
				<x path="haxe.extern.Rest"><a/></x>
				<c path="assign.T"/>
			</f>
			<haxe_doc>Copies the values of all enumerable own properties from one or more
		source objects to a target object.</haxe_doc>
		</assign>
		<create public="1" params="T" set="method" static="1">
			<f a="proto:?propertiesObject">
				<a/>
				<x path="haxe.DynamicAccess"><t path="js.lib.ObjectPropertyDescriptor"/></x>
				<c path="create.T"/>
			</f>
			<haxe_doc>Creates a new object with the specified prototype object and properties.</haxe_doc>
		</create>
		<defineProperties public="1" params="T" set="method" static="1">
			<f a="obj:props">
				<c path="defineProperties.T"/>
				<x path="haxe.DynamicAccess"><t path="js.lib.ObjectPropertyDescriptor"/></x>
				<c path="defineProperties.T"/>
			</f>
			<haxe_doc>Adds the named properties described by the given descriptors to an object.</haxe_doc>
		</defineProperties>
		<defineProperty public="1" params="T" set="method" static="1">
			<f a="obj:prop:descriptor">
				<c path="defineProperty.T"/>
				<c path="String"/>
				<t path="js.lib.ObjectPropertyDescriptor"/>
				<c path="defineProperty.T"/>
			</f>
			<haxe_doc>Adds the named property described by a given descriptor to an object.</haxe_doc>
		</defineProperty>
		<entries public="1" set="method" static="1">
			<f a="obj">
				<a/>
				<c path="Array"><x path="js.lib.ObjectEntry"/></c>
			</f>
			<haxe_doc>Returns an array containing all of the [key, value] pairs of a given
		object's own enumerable string properties.</haxe_doc>
		</entries>
		<freeze public="1" params="T" set="method" static="1">
			<f a="obj">
				<c path="freeze.T"/>
				<c path="freeze.T"/>
			</f>
			<haxe_doc>Freezes an object: other code can't delete or change any properties.</haxe_doc>
		</freeze>
		<fromEntries public="1" params="T" set="method" static="1">
			<f a="iterable">
				<x path="Any"/>
				<c path="fromEntries.T"/>
			</f>
			<haxe_doc>Returns a new object from an iterable of key-value pairs
		(reverses Object.entries).</haxe_doc>
		</fromEntries>
		<getOwnPropertyDescriptor public="1" set="method" static="1">
			<f a="obj:prop">
				<a/>
				<c path="String"/>
				<x path="Null"><t path="js.lib.ObjectPropertyDescriptor"/></x>
			</f>
			<haxe_doc>Returns a property descriptor for a named property on an object.</haxe_doc>
		</getOwnPropertyDescriptor>
		<getOwnPropertyNames public="1" set="method" static="1">
			<f a="obj">
				<a/>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Returns an array containing the names of all of the given object's own
		enumerable and non-enumerable properties.</haxe_doc>
		</getOwnPropertyNames>
		<getOwnPropertySymbols public="1" set="method" static="1">
			<f a="obj">
				<a/>
				<c path="Array"><c path="js.lib.Symbol"/></c>
			</f>
			<haxe_doc>Returns an array of all symbol properties found directly upon a given object.</haxe_doc>
		</getOwnPropertySymbols>
		<getPrototypeOf public="1" params="TProto" set="method" static="1">
			<f a="obj">
				<a/>
				<x path="Null"><c path="getPrototypeOf.TProto"/></x>
			</f>
			<haxe_doc>Returns the prototype of the specified object.</haxe_doc>
		</getPrototypeOf>
		<is public="1" params="T" set="method" static="1">
			<f a="value1:value2">
				<c path="is.T"/>
				<c path="is.T"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Compares if two values are the same value. Equates all NaN values
		(which differs from both Abstract Equality Comparison and
		Strict Equality Comparison).</haxe_doc>
		</is>
		<isExtensible public="1" set="method" static="1">
			<f a="obj">
				<a/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Determines if extending of an object is allowed.</haxe_doc>
		</isExtensible>
		<isFrozen public="1" set="method" static="1">
			<f a="obj">
				<a/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Determines if an object was frozen.</haxe_doc>
		</isFrozen>
		<isSealed public="1" set="method" static="1">
			<f a="obj">
				<a/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Determines if an object is sealed.</haxe_doc>
		</isSealed>
		<keys public="1" set="method" static="1">
			<f a="obj">
				<a/>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Returns an array containing the names of all of the given object's own
		enumerable string properties.</haxe_doc>
		</keys>
		<preventExtensions public="1" params="T" set="method" static="1">
			<f a="obj">
				<c path="preventExtensions.T"/>
				<c path="preventExtensions.T"/>
			</f>
			<haxe_doc>Prevents any extensions of an object.</haxe_doc>
		</preventExtensions>
		<seal public="1" params="T" set="method" static="1">
			<f a="obj">
				<c path="seal.T"/>
				<c path="seal.T"/>
			</f>
			<haxe_doc>Prevents other code from deleting properties of an object.</haxe_doc>
		</seal>
		<setPrototypeOf public="1" params="T" set="method" static="1">
			<f a="obj:prototype">
				<c path="setPrototypeOf.T"/>
				<x path="Null"><a/></x>
				<c path="setPrototypeOf.T"/>
			</f>
			<haxe_doc>Sets the prototype (i.e., the internal Prototype property).</haxe_doc>
		</setPrototypeOf>
		<values public="1" set="method" static="1">
			<f a="obj">
				<a/>
				<c path="Array"><x path="Any"/></c>
			</f>
			<haxe_doc>Returns an array containing the values that correspond to all of
		a given object's own enumerable string properties.</haxe_doc>
		</values>
		<prototype public="1" set="null" static="1">
			<t path="js.lib.ObjectPrototype"/>
			<haxe_doc>Allows the addition of properties to all objects of type Object.</haxe_doc>
		</prototype>
		<new public="1" set="method">
			<f a="?value">
				<x path="Any"/>
				<x path="Void"/>
			</f>
			<haxe_doc>The Object constructor creates an object wrapper.</haxe_doc>
		</new>
		<haxe_doc>The `js.lib.Object` constructor creates an object wrapper.

	Documentation [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":native"><e>"Object"</e></m>
		</meta>
	</class>
	<class path="js._Boot.HaxeError" params="" file="/home/travis/haxe/std/js/Boot.hx" private="1" module="js.Boot">
		<extends path="js.lib.Error"/>
		<val><d/></val>
		<new public="1" set="method" line="31"><f a="val">
	<d/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
		</meta>
	</class>
	<class path="js.Boot" params="" file="/home/travis/haxe/std/js/Boot.hx">
		<__string_rec set="method" line="78" static="1">
			<f a="o:s">
				<a>
					<toString set="null"><f a=""><c path="String"/></f></toString>
					<length set="null"><x path="Int"/></length>
					<hasOwnProperty set="null"><f a="">
	<c path="String"/>
	<x path="Bool"/>
</f></hasOwnProperty>
					<_hx_index set="null"><x path="Int"/></_hx_index>
					<__enum__ set="null"><x path="Bool"/></__enum__>
				</a>
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":ifFeature"><e>"has_enum"</e></m>
			</meta>
		</__string_rec>
		<__toStr static="1"><c path="js.lib.Function"/></__toStr>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
			<m n=":dox"><e>hide</e></m>
		</meta>
	</class>
	<class path="js.lib.EvalError" params="" file="/home/travis/haxe/std/js/lib/Error.hx" module="js.lib.Error" extern="1">
		<extends path="js.lib.Error"/>
		<new public="1" set="method"><f a="?message">
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":native"><e>"EvalError"</e></m></meta>
	</class>
	<class path="js.lib.RangeError" params="" file="/home/travis/haxe/std/js/lib/Error.hx" module="js.lib.Error" extern="1">
		<extends path="js.lib.Error"/>
		<new public="1" set="method"><f a="?message">
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":native"><e>"RangeError"</e></m></meta>
	</class>
	<class path="js.lib.ReferenceError" params="" file="/home/travis/haxe/std/js/lib/Error.hx" module="js.lib.Error" extern="1">
		<extends path="js.lib.Error"/>
		<new public="1" set="method"><f a="?message">
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":native"><e>"ReferenceError"</e></m></meta>
	</class>
	<class path="js.lib.SyntaxError" params="" file="/home/travis/haxe/std/js/lib/Error.hx" module="js.lib.Error" extern="1">
		<extends path="js.lib.Error"/>
		<new public="1" set="method"><f a="?message">
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":native"><e>"SyntaxError"</e></m></meta>
	</class>
	<class path="js.lib.TypeError" params="" file="/home/travis/haxe/std/js/lib/Error.hx" module="js.lib.Error" extern="1">
		<extends path="js.lib.Error"/>
		<new public="1" set="method"><f a="?message">
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":native"><e>"TypeError"</e></m></meta>
	</class>
	<class path="js.lib.URIError" params="" file="/home/travis/haxe/std/js/lib/Error.hx" module="js.lib.Error" extern="1">
		<extends path="js.lib.Error"/>
		<new public="1" set="method"><f a="?message">
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":native"><e>"URIError"</e></m></meta>
	</class>
	<class path="js.lib.Function" params="" file="/home/travis/haxe/std/js/lib/Function.hx" extern="1">
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Specifies the number of arguments expected by the function.</haxe_doc>
		</length>
		<name public="1">
			<c path="String"/>
			<haxe_doc>The name of the function.</haxe_doc>
		</name>
		<apply public="1" set="method">
			<f a="thisArg:argsArray">
				<d/>
				<c path="Array"><d/></c>
				<d/>
			</f>
			<haxe_doc>Calls a function and sets its this to the provided value, arguments can be passed as an Array object.</haxe_doc>
		</apply>
		<call public="1" set="method">
			<f a="thisArg:args">
				<d/>
				<x path="haxe.extern.Rest"><d/></x>
				<d/>
			</f>
			<haxe_doc>Calls (executes) a function and sets its this to the provided value, arguments can be passed as they are.</haxe_doc>
		</call>
		<bind public="1" set="method">
			<f a="thisArg:args">
				<d/>
				<x path="haxe.extern.Rest"><d/></x>
				<c path="js.lib.Function"/>
			</f>
			<haxe_doc>Creates a new function which, when called, has its this set to the provided value,
		with a given sequence of arguments preceding any provided when the new function was called.</haxe_doc>
		</bind>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a string representing the source code of the function.</haxe_doc>
		</toString>
		<new public="1" set="method">
			<f a="arg:rest">
				<c path="String"/>
				<x path="haxe.extern.Rest"><c path="String"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a new Function object.</haxe_doc>
		</new>
		<meta><m n=":native"><e>"Function"</e></m></meta>
	</class>
	<typedef path="js.lib.ObjectPrototype" params="" file="/home/travis/haxe/std/js/lib/Object.hx" module="js.lib.Object">
		<a>
			<valueOf set="null">
				<c path="js.lib.Function"/>
				<haxe_doc>Returns the primitive value of the specified object.</haxe_doc>
			</valueOf>
			<toString set="null">
				<c path="js.lib.Function"/>
				<haxe_doc>Returns a string representation of the object.</haxe_doc>
			</toString>
			<toLocaleString set="null">
				<c path="js.lib.Function"/>
				<haxe_doc>Calls `toString()`.</haxe_doc>
			</toLocaleString>
			<propertyIsEnumerable set="null">
				<c path="js.lib.Function"/>
				<haxe_doc>Returns a boolean indicating if the internal enumerable attribute is set.</haxe_doc>
			</propertyIsEnumerable>
			<isPrototypeOf set="null">
				<c path="js.lib.Function"/>
				<haxe_doc>Returns a boolean indicating whether the object this method is called
		upon is in the prototype chain of the specified object.</haxe_doc>
			</isPrototypeOf>
			<hasOwnProperty set="null">
				<c path="js.lib.Function"/>
				<haxe_doc>Returns a boolean indicating whether an object contains the specified
		property as a direct property of that object and not inherited through
		the prototype chain.</haxe_doc>
			</hasOwnProperty>
		</a>
		<haxe_doc><![CDATA[Type for
	@see <https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object>]]></haxe_doc>
	</typedef>
	<typedef path="js.lib.ObjectPropertyDescriptor" params="" file="/home/travis/haxe/std/js/lib/Object.hx" module="js.lib.Object">
		<a>
			<writable>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>`true` if and only if the value associated with the property may be
		changed with an assignment operator.

		Defaults to `false`.</haxe_doc>
			</writable>
			<value>
				<x path="Null"><x path="Any"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The value associated with the property.
		Can be any valid JavaScript value (number, object, function, etc).</haxe_doc>
			</value>
			<set>
				<x path="Null"><f a="">
	<x path="Any"/>
	<x path="Void"/>
</f></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>A function which serves as a setter for the property, or undefined if
		there is no setter. When the property is assigned to, this function
		is called with one argument (the value being assigned to the property)
		and with `this` set to the object through which the property is assigned.</haxe_doc>
			</set>
			<get>
				<x path="Null"><f a=""><x path="Any"/></f></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>A function which serves as a getter for the property, or `undefined` if
		there is no getter. When the property is accessed, this function is
		called without arguments and with `this` set to the object through which
		the property is accessed (this may not be the object on which the
		property is defined due to inheritance).
		The return value will be used as the value of the property.</haxe_doc>
			</get>
			<enumerable>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>`true` if and only if this property shows up during enumeration of the
		properties on the corresponding object.

		Defaults to `false`.</haxe_doc>
			</enumerable>
			<configurable>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>`true` if and only if the type of this property descriptor may be
		changed and if the property may be deleted from the corresponding object.

		Defaults to `false`.</haxe_doc>
			</configurable>
		</a>
		<haxe_doc><![CDATA[@see <https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty>]]></haxe_doc>
	</typedef>
	<abstract path="js.lib.ObjectEntry" params="" file="/home/travis/haxe/std/js/lib/Object.hx" module="js.lib.Object">
		<this><c path="Array"><x path="Any"/></c></this>
		<haxe_doc>Key/value access helper for `js.lib.Object.entries()`.</haxe_doc>
		<impl><class path="js.lib._Object.ObjectEntry_Impl_" params="" file="/home/travis/haxe/std/js/lib/Object.hx" private="1" module="js.lib.Object">
	<key public="1" get="accessor" set="null" static="1">
		<c path="String"/>
		<meta><m n=":impl"/></meta>
	</key>
	<value public="1" get="accessor" set="null" static="1">
		<x path="Any"/>
		<meta><m n=":impl"/></meta>
	</value>
	<meta><m n=":keep"/></meta>
</class></impl>
	</abstract>
	<class path="js.lib.Symbol" params="" file="/home/travis/haxe/std/js/lib/Symbol.hx" extern="1">
		<for_ public="1" set="method" static="1">
			<f a="key">
				<c path="String"/>
				<c path="js.lib.Symbol"/>
			</f>
			<meta><m n=":native"><e>"for"</e></m></meta>
			<haxe_doc>Searches for existing symbols with the given key and returns it if found.
		Otherwise a new symbol gets created in the global symbol registry with this key.</haxe_doc>
		</for_>
		<keyFor public="1" set="method" static="1">
			<f a="sym">
				<c path="js.lib.Symbol"/>
				<x path="Null"><c path="String"/></x>
			</f>
			<haxe_doc>Retrieves a shared symbol key from the global symbol registry for the given symbol.</haxe_doc>
		</keyFor>
		<iterator public="1" set="null" static="1">
			<c path="js.lib.Symbol"/>
			<haxe_doc>A method returning the default iterator for an object.</haxe_doc>
		</iterator>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a string containing the description of the Symbol.</haxe_doc>
		</toString>
		<ofObject public="1" params="T" get="inline" set="null" line="61">
			<f a="object">
				<a/>
				<x path="Null"><c path="ofObject.T"/></x>
			</f>
			<haxe_doc>Retrieve symbol from a given `object`.

		NOTE: This is a Haxe-specific method that generates an `object[symbol]` expression.</haxe_doc>
		</ofObject>
		<new public="1" set="method">
			<f a="?description">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":selfCall"/></meta>
			<haxe_doc>To create a new primitive symbol, use `new Symbol()` with an optional string as its `description`.

		NOTE: Unlike in plain JavaScript, `new Symbol()` syntax is used in Haxe. This generates a `Symbol(...)`
		expression as required by the JavaScript specification.</haxe_doc>
		</new>
		<meta><m n=":native"><e>"Symbol"</e></m></meta>
	</class>
</haxe>